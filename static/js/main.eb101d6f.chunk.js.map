{"version":3,"sources":["UserSettings.js","Constants.js","SimpleTaskManager.js","TaskTimes.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","DefaultSettings.js","Settings.js","BrowserNotifications.js","LocalStorage.js","index.js"],"names":["UserSettings","onChangeWorkMinutes","event","props","onchange","workMinutes","target","value","onChangeShortBreakMinutes","shortBreakMinutes","onChangeLongBreakMinutes","longBreakMinutes","onChangeLongBreakFreq","longBreakFreq","Form","Row","Col","sm","Group","as","Label","column","xs","Control","type","this","onChange","React","Component","Constants","taskName","SimpleTaskManager","handleTextInputChange","setState","taskInput","handleSaveClick","onTaskCreate","state","trim","handleTaskSelected","onTaskSelected","createButtonVisible","tasks","some","task","toUpperCase","handleRemoveClick","window","confirm","getRemoveTaskConfirmationText","selectedTask","onTaskRemoved","handleMoreTasksToggleClick","showMore","handleClearInputButtonClick","visibleTasks","filter","x","includes","totalMaxVisibleCharacters","trimmed","reduce","totalCharacters","push","length","numberOfTrimmedTasks","moreTasksLabel","Container","className","inline","controlId","InputGroup","placeholder","CREATE_TASK_PLACEHOLDER_TEXT","Append","Button","onClick","variant","xmlns","height","viewBox","width","d","fill","size","REMOVE_TASK_BUTTON_TEXT","SAVE_NEW_TASK_BUTTON_TEXT","ToggleButtonGroup","name","style","flexWrap","ToggleButton","id","NO_TASK_TEXT","map","TOTALS_KEY","TaskTimes","formatSeconds","seconds","hours","Math","floor","minutes","sortBy","period","sortByName","sortByToday","sortByYesterday","sortByWeek","sortByMonth","timesMap","calculateTimes","prevProps","eventsTimestamp","totalToday","totalYesterday","totalThisWeek","totalThisMonth","events","forEach","isWork","isForToday","isToday","start","isForYesterday","isYesterday","isForThisWeek","isThisWeek","isForThisMonth","isThisMonth","undefined","today","yesterday","week","month","end","len","getTime","Object","entries","entry","todayPercentage","getPercentage","yesterdayPercentage","weekPercentage","monthPercentage","percent","round","isNaN","Table","responsive","class","sort","a","b","charAt","App","onClickReset","RESET_CONFIRMATION_TEXT","setStateAndStorage","getStateForReset","onClickSettings","settingsVisible","onClickToggleCalendar","calendarVisible","storage","isEqual","assign","onChangeSettings","settings","getDefaultState","defaultSettings","defaultState","stateForReset","continousWork","autoStartTimers","timerSeconds","handleTimerStateChange","timerState","handleShowNotification","notificationTitle","notifications","notificationsGranted","notificationQueued","setTimeout","clearNotificationQueue","createNotification","handleEventCreated","eventTitle","wasWork","newEvent","title","Date","color","newEvents","slice","setEventsTimestamp","handleTaskCreated","newTasks","unshift","timerStartedAt","timerStartedWithSeconds","splice","indexOf","handleTaskRemoved","e","now","handleAboutShow","showAboutModal","handleAboutClose","onClickStartWorking","timerRunning","markTimerStart","onClickReturnToWork","lastTimerSeconds","newTimerSeconds","alwaysStartFullWork","lastWorkTimerSeconds","notifyCycleChange","onClickGoOnABreak","availableBreakSeconds","tick","secondsDiff","timerLastUpdatedAt","newState","calculateNewState","oldTimerSeconds","timerEndAt","onClickHoldWork","handleClose","onClickResumeWork","onChangeContinousWork","checked","onChangeAutoStartTimers","onChangeAlwaysStartFullWork","handleShow","showHoldModal","parse","requestPermission","then","result","plugins","timeGridPlugin","Worker","worker","onmessage","interval","setInterval","terminate","clearInterval","getTimerMinutes","getTimerSeconds","String","padStart","hoursPart","hoursLabel","minutesPart","secondsPart","tempState","totalWorkedSeconds","hiddenAvailableBreakSeconds","cycle","totalCombinedTime","cycleChanges","notificationToShow","secondsPassed","availableBreakSecondsIncrement","stateChange","newCycle","newAvailableBreakSeconds","newIsWork","cycleChange","additionalBreakTime","formatSecondsAsText","Helmet","defer","Modal","show","onHide","Header","closeButton","Title","Body","Footer","CONFIRM_HOLD_TIMER_MODAL_HEADER","CONFIRM_HOLD_TIMER_MODAL_TEXT","CONFIRM_HOLD_TIMER_BUTTON_TEXT","ButtonGroup","HOLD_WORK_BUTTON_TEXT","RESUME_WORK_BUTTON_TEXT","START_WORKING_BUTTON_TEXT","RESET_BUTTON_TEXT","WORK_LABEL_TEXT","BREAK_LABEL_TEXT","GO_ON_A_BREAT_BUTTON_TEXT","OverlayTrigger","overlay","Tooltip","BREAK_WILL_BECOME_AVAILABLE_TEXT","disabled","pointerEvents","RETURN_TO_WORK_BUTTON_TEXT","span","offset","getFutureAdditionBreakTime","cyclesUntilLongBreak","Check","label","CONTINOUS_WORK_TEXT","START_TIMERS_AUTOMATICALLY_TEXT","ALWAYS_START_FULL_WORK_TEXT","Collapse","in","Card","CloseButton","dayGridMonth","listPlugin","initialView","headerToolbar","right","slotDuration","eventDidMount","el","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","DefaultSettings","_workMinutes","_shortBreakMinutes","_longBreakMinutes","_longBreakFreq","_continousWork","_defaultState","BrowserNotifications","Notification","params","LocalStorage","JSON","localStorage","getItem","setItem","stringify","ReactDOM","render","basename","process","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.eb101d6f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nclass UserSettings extends React.Component {\r\n  onChangeWorkMinutes = (event) => {\r\n    this.props.onchange({\r\n      workMinutes: +event.target.value,\r\n    });\r\n  };\r\n\r\n  onChangeShortBreakMinutes = (event) => {\r\n    this.props.onchange({\r\n      shortBreakMinutes: +event.target.value,\r\n    });\r\n  };\r\n\r\n  onChangeLongBreakMinutes = (event) => {\r\n    this.props.onchange({\r\n      longBreakMinutes: +event.target.value,\r\n    });\r\n  };\r\n\r\n  onChangeLongBreakFreq = (event) => {\r\n    this.props.onchange({\r\n      longBreakFreq: +event.target.value,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Form>\r\n        <Row>\r\n          <Col sm={6}>\r\n            <Form.Group as={Row}>\r\n              <Form.Label column xs={8}>\r\n                Work cycle minutes\r\n              </Form.Label>\r\n              <Col xs={4}>\r\n                <Form.Control\r\n                  type=\"number\"\r\n                  value={this.props.workMinutes}\r\n                  onChange={this.onChangeWorkMinutes}\r\n                />\r\n              </Col>\r\n            </Form.Group>\r\n          </Col>\r\n          <Col sm={6}>\r\n            <Form.Group as={Row}>\r\n              <Form.Label column xs={8}>\r\n                Short break minutes\r\n              </Form.Label>\r\n              <Col xs={4}>\r\n                <Form.Control\r\n                  type=\"number\"\r\n                  value={this.props.shortBreakMinutes}\r\n                  onChange={this.onChangeShortBreakMinutes}\r\n                />\r\n              </Col>\r\n            </Form.Group>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col sm={6}>\r\n            <Form.Group as={Row}>\r\n              <Form.Label column xs={8}>\r\n                Long break minutes\r\n              </Form.Label>\r\n              <Col xs={4}>\r\n                <Form.Control\r\n                  type=\"number\"\r\n                  value={this.props.longBreakMinutes}\r\n                  onChange={this.onChangeLongBreakMinutes}\r\n                />\r\n              </Col>\r\n            </Form.Group>\r\n          </Col>\r\n          <Col sm={6}>\r\n            <Form.Group as={Row}>\r\n              <Form.Label column xs={8}>\r\n                Long break after n cycles\r\n              </Form.Label>\r\n              <Col xs={4}>\r\n                <Form.Control\r\n                  type=\"number\"\r\n                  value={this.props.longBreakFreq}\r\n                  onChange={this.onChangeLongBreakFreq}\r\n                />\r\n              </Col>\r\n            </Form.Group>\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserSettings;\r\n","export default class Constants {\r\n  static get CREATE_TASK_PLACEHOLDER_TEXT() {\r\n    return \"Enter task name...\";\r\n  }\r\n\r\n  static get SAVE_NEW_TASK_BUTTON_TEXT() {\r\n    return \"Save new task\";\r\n  }\r\n\r\n  static get NO_TASK_TEXT() {\r\n    return \"No task\";\r\n  }\r\n\r\n  static get GO_ON_A_BREAT_BUTTON_TEXT() {\r\n    return \"Go on a break\";\r\n  }\r\n\r\n  static get RETURN_TO_WORK_BUTTON_TEXT() {\r\n    return \"Return to work\";\r\n  }\r\n\r\n  static get START_WORKING_BUTTON_TEXT() {\r\n    return \"Start\";\r\n  }\r\n\r\n  static get HOLD_WORK_BUTTON_TEXT() {\r\n    return \"Hold\";\r\n  }\r\n\r\n  static get RESUME_WORK_BUTTON_TEXT() {\r\n    return \"Resume\";\r\n  }\r\n\r\n  static get CONTINOUS_WORK_TEXT() {\r\n    return \"Continous work\";\r\n  }\r\n\r\n  static get START_TIMERS_AUTOMATICALLY_TEXT() {\r\n    return \"Start new timers automatically\";\r\n  }\r\n\r\n  static get RESET_CONFIRMATION_TEXT() {\r\n    return \"Do you want to reset timer values? (tasks, events, settings etc. will be kept)\";\r\n  }\r\n\r\n  static get RESET_BUTTON_TEXT() {\r\n    return \"Reset\";\r\n  }\r\n\r\n  static get CONFIRM_HOLD_TIMER_BUTTON_TEXT() {\r\n    return \"Yes, hold timer\";\r\n  }\r\n\r\n  static get CONFIRM_HOLD_TIMER_MODAL_HEADER() {\r\n    return \"Warning!\";\r\n  }\r\n\r\n  static get CONFIRM_HOLD_TIMER_MODAL_TEXT() {\r\n    return 'This option should only be used if you\\'re stopping work for a significant amount of time. It should not be used for normal mid-work breaks - instead, please wait for the \"Go on a break\" button to become available.\\n\\nAre sure you want to hold the timer anyway?';\r\n  }\r\n\r\n  static get WORK_LABEL_TEXT() {\r\n    return \"Work\";\r\n  }\r\n\r\n  static get BREAK_LABEL_TEXT() {\r\n    return \"Break\";\r\n  }\r\n\r\n  static get BREAK_WILL_BECOME_AVAILABLE_TEXT() {\r\n    return \"A break will be available when the current work timer finishes.\";\r\n  }\r\n\r\n  static get REMOVE_TASK_BUTTON_TEXT() {\r\n    return \"Remove task\";\r\n  }\r\n\r\n  static getRemoveTaskConfirmationText(taskName) {\r\n    return `Are sure you want to remove the task \"${taskName}\"?`;\r\n  }\r\n\r\n  static get ALWAYS_START_FULL_WORK_TEXT() {\r\n    return \"Always start full work timer\";\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Constants from \"./Constants\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport ToggleButtonGroup from \"react-bootstrap/ToggleButtonGroup\";\r\nimport ToggleButton from \"react-bootstrap/ToggleButton\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { InputGroup } from \"react-bootstrap\";\r\n\r\nclass SimpleTaskManager extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      taskInput: \"\",\r\n      showMore: false,\r\n    };\r\n  }\r\n\r\n  handleTextInputChange = (event) => {\r\n    const value = event.target.value;\r\n    this.setState({\r\n      taskInput: value,\r\n    });\r\n  };\r\n\r\n  handleSaveClick = () => {\r\n    this.props.onTaskCreate(this.state.taskInput.trim());\r\n    this.setState({\r\n      taskInput: \"\",\r\n    });\r\n  };\r\n\r\n  handleTaskSelected = (value) => {\r\n    this.props.onTaskSelected(value);\r\n  };\r\n\r\n  getVisibleTasks() {\r\n    let visibleTasks = this.props.tasks\r\n      ? this.props.tasks.filter((x) =>\r\n          x.toUpperCase().includes(this.state.taskInput.toUpperCase())\r\n        )\r\n      : [];\r\n    if (this.props.totalMaxVisibleCharacters) {\r\n      let trimmed = [];\r\n      visibleTasks.reduce((totalCharacters, task) => {\r\n        if (totalCharacters < this.props.totalMaxVisibleCharacters) {\r\n          trimmed.push(task);\r\n        }\r\n        return totalCharacters + task.length;\r\n      }, 0);\r\n      return trimmed;\r\n    } else {\r\n      return visibleTasks;\r\n    }\r\n  }\r\n\r\n  createButtonVisible = () => {\r\n    return (\r\n      this.state.taskInput &&\r\n      this.state.taskInput.trim() !== \"\" &&\r\n      (!this.props.tasks ||\r\n        !this.props.tasks.some(\r\n          (task) => task.toUpperCase() === this.state.taskInput.toUpperCase()\r\n        ))\r\n    );\r\n  };\r\n\r\n  handleRemoveClick = () => {\r\n    if (\r\n      window.confirm(\r\n        Constants.getRemoveTaskConfirmationText(this.props.selectedTask)\r\n      )\r\n    ) {\r\n      this.props.onTaskRemoved(this.props.selectedTask);\r\n    }\r\n  };\r\n\r\n  handleMoreTasksToggleClick = () => {\r\n    this.setState({\r\n      showMore: !this.state.showMore,\r\n    });\r\n  };\r\n\r\n  handleClearInputButtonClick = () => {\r\n    this.setState({\r\n      taskInput: \"\",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let numberOfTrimmedTasks = 0;\r\n    let visibleTasks = this.props.tasks\r\n      ? this.props.tasks.filter((x) =>\r\n          x.toUpperCase().includes(this.state.taskInput.toUpperCase())\r\n        )\r\n      : [];\r\n    if (this.props.totalMaxVisibleCharacters) {\r\n      let trimmed = [];\r\n      visibleTasks.reduce((totalCharacters, task) => {\r\n        if (totalCharacters < this.props.totalMaxVisibleCharacters) {\r\n          trimmed.push(task);\r\n        }\r\n        return totalCharacters + task.length;\r\n      }, 0);\r\n      numberOfTrimmedTasks = visibleTasks.length - trimmed.length;\r\n      if (!this.state.showMore) {\r\n        visibleTasks = trimmed;\r\n      }\r\n    }\r\n    let moreTasksLabel = this.state.showMore\r\n      ? \"show less tasks\"\r\n      : \"show \" + numberOfTrimmedTasks + \" more tasks\";\r\n    return (\r\n      <Container>\r\n        <Row className=\"mb-2\">\r\n          <Col xs={9}>\r\n            <Form inline>\r\n              <Form.Group controlId=\"taskInput\" className=\"mr-1\">\r\n                <InputGroup>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    onChange={this.handleTextInputChange}\r\n                    placeholder={Constants.CREATE_TASK_PLACEHOLDER_TEXT}\r\n                    value={this.state.taskInput}\r\n                  ></Form.Control>\r\n                  {this.state.taskInput !== \"\" && (\r\n                    <InputGroup.Append>\r\n                      <Button\r\n                        as=\"span\"\r\n                        onClick={this.handleClearInputButtonClick}\r\n                        variant=\"light\"\r\n                        data-testid=\"clear-input-btn\"\r\n                      >\r\n                        <svg\r\n                          xmlns=\"http://www.w3.org/2000/svg\"\r\n                          height=\"24\"\r\n                          viewBox=\"0 0 24 24\"\r\n                          width=\"24\"\r\n                        >\r\n                          <path d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n                          <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\" />\r\n                        </svg>\r\n                      </Button>\r\n                    </InputGroup.Append>\r\n                  )}\r\n                </InputGroup>\r\n                {numberOfTrimmedTasks > 0 && this.state.showMore && (\r\n                  <Button\r\n                    variant=\"light\"\r\n                    className=\"float-left ml-3\"\r\n                    onClick={this.handleMoreTasksToggleClick}\r\n                  >\r\n                    {moreTasksLabel}\r\n                  </Button>\r\n                )}\r\n              </Form.Group>\r\n            </Form>\r\n          </Col>\r\n          {this.props.selectedTask && (\r\n            <Col xs={3}>\r\n              <Button\r\n                variant=\"outline-danger\"\r\n                size=\"sm\"\r\n                onClick={this.handleRemoveClick}\r\n                className=\"float-right\"\r\n              >\r\n                {Constants.REMOVE_TASK_BUTTON_TEXT}\r\n              </Button>\r\n            </Col>\r\n          )}\r\n        </Row>\r\n        {this.createButtonVisible() ? (\r\n          <Row>\r\n            <Col>\r\n              <Button\r\n                type=\"primary\"\r\n                onClick={this.handleSaveClick}\r\n                className=\"float-left\"\r\n              >\r\n                {Constants.SAVE_NEW_TASK_BUTTON_TEXT} \"{this.state.taskInput}\"\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        ) : null}\r\n        <Row>\r\n          <Col>\r\n            <ToggleButtonGroup\r\n              type=\"radio\"\r\n              name=\"tasks\"\r\n              style={{ flexWrap: \"wrap\" }}\r\n              className=\"float-left\"\r\n              value={this.props.selectedTask}\r\n              onChange={this.handleTaskSelected}\r\n            >\r\n              <ToggleButton id=\"radio-null\" value=\"\">\r\n                {Constants.NO_TASK_TEXT}\r\n              </ToggleButton>\r\n              {visibleTasks.map((task) => {\r\n                return (\r\n                  <ToggleButton\r\n                    id={\"radio-\" + task}\r\n                    value={task}\r\n                    data-testid={\"button-\" + task}\r\n                    key={task}\r\n                  >\r\n                    {task}\r\n                  </ToggleButton>\r\n                );\r\n              })}\r\n            </ToggleButtonGroup>\r\n            {numberOfTrimmedTasks > 0 && (\r\n              <Button\r\n                variant=\"light\"\r\n                className=\"float-left\"\r\n                data-testid=\"more-tasks-btn\"\r\n                onClick={this.handleMoreTasksToggleClick}\r\n              >\r\n                {moreTasksLabel}\r\n              </Button>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SimpleTaskManager;\r\n","import React from \"react\";\r\nimport { isToday, isYesterday, isThisWeek, isThisMonth } from \"date-fns\";\r\nimport Constants from \"./Constants\";\r\nimport Table from \"react-bootstrap/Table\";\r\n\r\nconst TOTALS_KEY = \"@@@TOTALS\";\r\n\r\nclass TaskTimes extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      timesMap: this.calculateTimes(),\r\n      sortBy: \"name\"\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.eventsTimestamp !== prevProps.eventsTimestamp) {\r\n      this.setState({\r\n        timesMap: this.calculateTimes(),\r\n      });\r\n    }\r\n  }\r\n\r\n  formatSeconds = (seconds) => {\r\n    seconds /= 1000;\r\n    let hours = Math.floor(seconds / 3600);\r\n    let minutes = Math.floor((seconds % 3600) / 60);\r\n    return `${hours}h${minutes}m`;\r\n  };\r\n\r\n  calculateTimes() {\r\n    const timesMap = {};\r\n    let totalToday = 0,\r\n      totalYesterday = 0,\r\n      totalThisWeek = 0,\r\n      totalThisMonth = 0;\r\n    this.props.events.forEach((event) => {\r\n      if (!event.isWork) {\r\n        return;\r\n      }\r\n      let isForToday = isToday(event.start);\r\n      let isForYesterday = isYesterday(event.start);\r\n      let isForThisWeek = isThisWeek(event.start);\r\n      let isForThisMonth = isThisMonth(event.start);\r\n      if (!isForToday && !isForYesterday && !isForThisWeek && !isForThisMonth) {\r\n        return;\r\n      }\r\n      let taskName = event.task;\r\n      if (\r\n        taskName === null ||\r\n        taskName === undefined ||\r\n        taskName === \"\" ||\r\n        taskName === \"null\"\r\n      ) {\r\n        taskName = Constants.NO_TASK_TEXT;\r\n      }\r\n      if (!(taskName in timesMap)) {\r\n        timesMap[taskName] = {\r\n          today: 0,\r\n          yesterday: 0,\r\n          week: 0,\r\n          month: 0,\r\n        };\r\n      }\r\n      if (event.end !== undefined) {\r\n        let len = event.end.getTime() - event.start.getTime();\r\n        if (isForToday) {\r\n          timesMap[taskName].today += len;\r\n          totalToday += len;\r\n        } else if (isForYesterday) {\r\n          timesMap[taskName].yesterday += len;\r\n          totalYesterday += len;\r\n        }\r\n        if (isForThisWeek) {\r\n          timesMap[taskName].week += len;\r\n          totalThisWeek += len;\r\n        }\r\n        if (isForThisMonth) {\r\n          timesMap[taskName].month += len;\r\n          totalThisMonth += len;\r\n        }\r\n      }\r\n    });\r\n    Object.entries(timesMap).forEach((entry) => {\r\n      entry[1].todayPercentage = this.getPercentage(entry[1].today, totalToday);\r\n      entry[1].yesterdayPercentage = this.getPercentage(\r\n        entry[1].yesterday,\r\n        totalYesterday\r\n      );\r\n      entry[1].weekPercentage = this.getPercentage(\r\n        entry[1].week,\r\n        totalThisWeek\r\n      );\r\n      entry[1].monthPercentage = this.getPercentage(\r\n        entry[1].month,\r\n        totalThisMonth\r\n      );\r\n    });\r\n    timesMap[TOTALS_KEY] = {\r\n      today: totalToday,\r\n      yesterday: totalYesterday,\r\n      week: totalThisWeek,\r\n      month: totalThisMonth,\r\n    };\r\n    return timesMap;\r\n  }\r\n\r\n  getPercentage(today, totalToday) {\r\n    const percent = Math.round((today / totalToday) * 100);\r\n    return !isNaN(percent) ? percent + \"%\" : \"-\";\r\n  }\r\n\r\n  sortBy = (period) => {\r\n    this.setState({\r\n      sortBy: period\r\n    });\r\n  }\r\n\r\n  sortByName = () => {\r\n    this.sortBy(\"name\");\r\n  }\r\n\r\n  sortByToday = () => {\r\n    this.sortBy(\"today\");\r\n  }\r\n\r\n  sortByYesterday = () => {\r\n    this.sortBy(\"yesterday\");\r\n  }\r\n\r\n  sortByWeek = () => {\r\n    this.sortBy(\"week\");\r\n  }\r\n\r\n  sortByMonth = () => {\r\n    this.sortBy(\"month\");\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Table size=\"sm\" responsive>\r\n        <thead>\r\n          <tr>\r\n            <th><button type=\"button\" class=\"btn btn-light\" onClick={this.sortByName}>Task {this.state.sortBy === \"name\" ? \"↑\" : \"\"}</button></th>\r\n            <th><button type=\"button\" class=\"btn btn-light\" onClick={this.sortByToday}>Today {this.state.sortBy === \"today\" ? \"↓\" : \"\"}</button></th>\r\n            <th>%</th>\r\n            <th><button type=\"button\" class=\"btn btn-light\" onClick={this.sortByYesterday}>Yesterday {this.state.sortBy === \"yesterday\" ? \"↓\" : \"\"}</button></th>\r\n            <th>%</th>\r\n            <th><button type=\"button\" class=\"btn btn-light\" onClick={this.sortByWeek}>Week {this.state.sortBy === \"week\" ? \"↓\" : \"\"}</button></th>\r\n            <th>%</th>\r\n            <th><button type=\"button\" class=\"btn btn-light\" onClick={this.sortByMonth}>Month {this.state.sortBy === \"month\" ? \"↓\" : \"\"}</button></th>\r\n            <th>%</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {Object.entries(this.state.timesMap).filter((entry) => entry[0] !== TOTALS_KEY).sort((a, b) => {\r\n            if (a[0] === b[0]) {\r\n              return 0;\r\n            }\r\n            if (this.state.sortBy === 'name') {\r\n              return a[0] > b[0] ? 1 : -1;\r\n            }\r\n            if (this.state.sortBy === 'today') {\r\n              return a[1].today > b[1].today ? -1 : 1;\r\n            }\r\n            if (this.state.sortBy === 'yesterday') {\r\n              return a[1].yesterday > b[1].yesterday ? -1 : 1;\r\n            }\r\n            if (this.state.sortBy === 'week') {\r\n              return a[1].week > b[1].week ? -1 : 1;\r\n            }\r\n            if (this.state.sortBy === 'month') {\r\n              return a[1].month > b[1].month ? -1 : 1;\r\n            }\r\n            return 0;\r\n          })\r\n            .map((entry) => (\r\n              <tr key={entry[0]}>\r\n                <td>{entry[0]}</td>\r\n                <td\r\n                  data-testid={\"today-\" + entry[0].charAt(0) + entry[0].length}\r\n                >\r\n                  {this.formatSeconds(entry[1].today)}\r\n                </td>\r\n                <td\r\n                  data-testid={\"todayp-\" + entry[0].charAt(0) + entry[0].length}\r\n                >\r\n                  {entry[1].todayPercentage}\r\n                </td>\r\n                <td\r\n                  data-testid={\r\n                    \"yesterday-\" + entry[0].charAt(0) + entry[0].length\r\n                  }\r\n                >\r\n                  {this.formatSeconds(entry[1].yesterday)}\r\n                </td>\r\n                <td\r\n                  data-testid={\r\n                    \"yesterdayp-\" + entry[0].charAt(0) + entry[0].length\r\n                  }\r\n                >\r\n                  {entry[1].yesterdayPercentage}\r\n                </td>\r\n                <td\r\n                  data-testid={\"week-\" + entry[0].charAt(0) + entry[0].length}\r\n                >\r\n                  {this.formatSeconds(entry[1].week)}\r\n                </td>\r\n                <td\r\n                  data-testid={\"weekp-\" + entry[0].charAt(0) + entry[0].length}\r\n                >\r\n                  {entry[1].weekPercentage}\r\n                </td>\r\n                <td\r\n                  data-testid={\"month-\" + entry[0].charAt(0) + entry[0].length}\r\n                >\r\n                  {this.formatSeconds(entry[1].month)}\r\n                </td>\r\n                <td\r\n                  data-testid={\"monthp-\" + entry[0].charAt(0) + entry[0].length}\r\n                >\r\n                  {entry[1].monthPercentage}\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          <tr class=\"font-italic\">\r\n            <td>Total</td>\r\n            <td data-testid={\"today-total\"}>\r\n              {this.formatSeconds(this.state.timesMap[TOTALS_KEY].today)}\r\n            </td>\r\n            <td data-testid={\"todayp-total\"}>100%</td>\r\n            <td data-testid={\"yesterday-total\"}>\r\n              {this.formatSeconds(this.state.timesMap[TOTALS_KEY].yesterday)}\r\n            </td>\r\n            <td data-testid={\"yesterdayp-total\"}>100%</td>\r\n            <td data-testid={\"week-total\"}>\r\n              {this.formatSeconds(this.state.timesMap[TOTALS_KEY].week)}\r\n            </td>\r\n            <td data-testid={\"weekp-total\"}>100%</td>\r\n            <td data-testid={\"month-total\"}>\r\n              {this.formatSeconds(this.state.timesMap[TOTALS_KEY].month)}\r\n            </td>\r\n            <td data-testid={\"monthp-total\"}>100%</td>\r\n          </tr>\r\n        </tbody>\r\n      </Table>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TaskTimes;\r\n","import React from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport \"./App.css\";\r\nimport UserSettings from \"./UserSettings\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\r\nimport dayGridMonth from \"@fullcalendar/daygrid\";\r\nimport listPlugin from \"@fullcalendar/list\";\r\nimport SimpleTaskManager from \"./SimpleTaskManager\";\r\nimport TaskTimes from \"./TaskTimes\";\r\nimport Constants from \"./Constants\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Collapse from \"react-bootstrap/Collapse\";\r\nimport CloseButton from \"react-bootstrap/CloseButton\";\r\nimport isEqual from \"lodash/isEqual\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\r\nimport Tooltip from \"react-bootstrap/Tooltip\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.defaultSettings = props.defaultSettings;\r\n    this.storage = props.storage;\r\n    this.state = this.getDefaultState();\r\n    if (this.storage && this.storage.state) {\r\n      this.state = Object.assign(this.state, this.storage.state);\r\n      this.state.events.forEach((e) => {\r\n        e.start = new Date(Date.parse(e.start));\r\n        e.end = new Date(Date.parse(e.end));\r\n      });\r\n    }\r\n    if (props.notifications) {\r\n      this.notifications = props.notifications;\r\n      this.notifications.requestPermission().then((result) => {\r\n        if (result === \"granted\") {\r\n          this.notificationsGranted = true;\r\n        }\r\n      });\r\n    }\r\n    this.plugins = [timeGridPlugin];\r\n\r\n    if (window.Worker) {\r\n      this.worker = new Worker(\"./worker.js\");\r\n      this.worker.onmessage = () => {\r\n        this.tick();\r\n      };\r\n    } else {\r\n      this.interval = setInterval(this.tick, 1000);\r\n    }\r\n    this.tick();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.worker) {\r\n      this.worker.terminate();\r\n    } else {\r\n      clearInterval(this.interval);\r\n    }\r\n  }\r\n\r\n  onClickReset = () => {\r\n    if (window.confirm(Constants.RESET_CONFIRMATION_TEXT)) {\r\n      this.setStateAndStorage(this.getStateForReset());\r\n    }\r\n  };\r\n\r\n  onClickSettings = () => {\r\n    this.setState({\r\n      settingsVisible: !this.state.settingsVisible,\r\n    });\r\n  };\r\n\r\n  onClickToggleCalendar = () => {\r\n    this.setState({\r\n      calendarVisible: !this.state.calendarVisible,\r\n    });\r\n  };\r\n\r\n  setStateAndStorage = (state) => {\r\n    this.setState(state);\r\n    if (this.storage && !isEqual(this.storage.state, state)) {\r\n      this.storage.state = Object.assign(this.state, state);\r\n    }\r\n  };\r\n\r\n  onChangeSettings = (settings) => {\r\n    this.setStateAndStorage(settings);\r\n  };\r\n\r\n  getDefaultState = () => {\r\n    return Object.assign({}, this.defaultSettings.defaultState);\r\n  };\r\n\r\n  getStateForReset = () => {\r\n    const stateForReset = this.getDefaultState();\r\n    stateForReset.continousWork = this.state.continousWork;\r\n    stateForReset.autoStartTimers = this.state.autoStartTimers;\r\n    stateForReset.workMinutes = this.state.workMinutes;\r\n    stateForReset.shortBreakMinutes = this.state.shortBreakMinutes;\r\n    stateForReset.longBreakMinutes = this.state.longBreakMinutes;\r\n    stateForReset.longBreakFreq = this.state.longBreakFreq;\r\n    stateForReset.timerSeconds = this.state.workMinutes * 60;\r\n    stateForReset.events = this.state.events;\r\n    stateForReset.tasks = this.state.tasks;\r\n    return stateForReset;\r\n  };\r\n\r\n  handleTimerStateChange = (timerState) => {\r\n    this.setStateAndStorage(timerState);\r\n  };\r\n\r\n  handleShowNotification = (notificationTitle) => {\r\n    if (this.notifications && this.notificationsGranted) {\r\n      if (!this.notificationQueued) {\r\n        // makes sure that notifications are sent not more frequently than 10 seconds apart\r\n        this.notificationQueued = true;\r\n        setTimeout(this.clearNotificationQueue, 10000);\r\n        this.notifications.createNotification(notificationTitle);\r\n      }\r\n    }\r\n  };\r\n\r\n  clearNotificationQueue = () => {\r\n    this.notificationQueued = null;\r\n  };\r\n\r\n  handleEventCreated = (event) => {\r\n    let eventTitle = event.wasWork ? \"Work\" : \"Break\";\r\n    if (this.state.selectedTask && event.wasWork) {\r\n      eventTitle += \" (\" + this.state.selectedTask + \")\";\r\n    }\r\n    const newEvent = {\r\n      title: eventTitle,\r\n      isWork: event.wasWork,\r\n      start: new Date(event.start),\r\n      end: new Date(event.end),\r\n      color: event.wasWork ? \"#3788d8\" : \"orange\",\r\n      task: this.state.selectedTask,\r\n    };\r\n    if (newEvent.start.getTime() === newEvent.end.getTime()) {\r\n      return;\r\n    }\r\n    let newEvents = [...this.state.events, newEvent];\r\n    if (\r\n      newEvents.length > 1 &&\r\n      newEvents[newEvents.length - 1].isWork ===\r\n        newEvents[newEvents.length - 2].isWork &&\r\n      newEvents[newEvents.length - 2].end.getTime() ===\r\n        newEvents[newEvents.length - 1].start.getTime() &&\r\n      newEvents[newEvents.length - 1].task ===\r\n        newEvents[newEvents.length - 2].task\r\n    ) {\r\n      newEvents = newEvents.slice(0, newEvents.length - 1);\r\n      newEvents[newEvents.length - 1].end = new Date(event.end);\r\n    }\r\n    this.setStateAndStorage({\r\n      events: newEvents,\r\n    });\r\n    this.setEventsTimestamp();\r\n  };\r\n\r\n  handleTaskCreated = (task) => {\r\n    let newTasks = this.state.tasks;\r\n    newTasks.unshift(task);\r\n    this.setStateAndStorage({\r\n      tasks: newTasks,\r\n    });\r\n    this.setEventsTimestamp();\r\n  };\r\n\r\n  handleTaskSelected = (task) => {\r\n    const end =\r\n      this.state.timerStartedAt +\r\n      (this.state.timerStartedWithSeconds - this.state.timerSeconds) * 1000;\r\n    this.handleEventCreated({\r\n      wasWork: this.state.isWork,\r\n      start: this.state.timerStartedAt,\r\n      end: end,\r\n    });\r\n\r\n    let newTasks = this.state.tasks;\r\n    if (task) {\r\n      newTasks.splice(this.state.tasks.indexOf(task), 1);\r\n      newTasks.splice(0, 0, task);\r\n    }\r\n\r\n    this.setStateAndStorage({\r\n      timerStartedAt: end,\r\n      timerStartedWithSeconds: this.state.timerSeconds,\r\n      selectedTask: task,\r\n      tasks: newTasks,\r\n    });\r\n  };\r\n\r\n  handleTaskRemoved = (task) => {\r\n    let newTasks = this.state.tasks;\r\n    newTasks.splice(newTasks.indexOf(task), 1);\r\n    let newEvents = this.state.events.filter((e) => e.task !== task);\r\n    this.setState({\r\n      tasks: newTasks,\r\n      events: newEvents,\r\n      eventsTimestamp: Date.now(),\r\n      selectedTask:\r\n        this.state.selectedTask === task ? null : this.state.selectedTask,\r\n    });\r\n  };\r\n\r\n  setEventsTimestamp = () => {\r\n    this.setState({\r\n      eventsTimestamp: Date.now(),\r\n    });\r\n  };\r\n\r\n  handleAboutShow = () => {\r\n    this.setState({\r\n      showAboutModal: true,\r\n    });\r\n  };\r\n\r\n  handleAboutClose = () => {\r\n    this.setState({\r\n      showAboutModal: false,\r\n    });\r\n  };\r\n\r\n  formatSecondsAsTimer() {\r\n    let minutesPart = this.getTimerMinutes();\r\n    let secondsPart = this.getTimerSeconds();\r\n    return minutesPart + \":\" + secondsPart;\r\n  }\r\n\r\n  getTimerSeconds() {\r\n    return String(this.state.timerSeconds % 60).padStart(2, \"0\");\r\n  }\r\n\r\n  getTimerMinutes() {\r\n    return String(Math.floor(this.state.timerSeconds / 60)).padStart(2, \"0\");\r\n  }\r\n\r\n  formatSecondsAsText(seconds) {\r\n    seconds = Math.round(seconds);\r\n    let hoursPart = Math.floor(seconds / 3600) + \"\";\r\n    let hoursLabel = hoursPart === \"1\" ? \"hour\" : \"hours\";\r\n    seconds = seconds % 3600;\r\n    let minutesPart = Math.floor(seconds / 60) + \"\";\r\n    let minutesLabel = minutesPart === \"1\" ? \"minute\" : \"minutes\";\r\n    seconds = seconds % 60;\r\n    let secondsPart = (seconds % 60) + \"\";\r\n    let secondsLabel = secondsPart === \"1\" ? \"second\" : \"seconds\";\r\n    const formattedTime = (\r\n      (hoursPart !== \"0\" ? hoursPart + \" \" + hoursLabel + \" \" : \"\") +\r\n      (minutesPart !== \"0\" ? minutesPart + \" \" + minutesLabel + \" \" : \"\") +\r\n      (secondsPart !== \"0\" ? secondsPart + \" \" + secondsLabel : \"\")\r\n    ).trim();\r\n    return formattedTime || \"0 minutes\";\r\n  }\r\n\r\n  onClickStartWorking = () => {\r\n    this.setStateAndStorage({\r\n      isWork: true,\r\n      timerRunning: true,\r\n    });\r\n    this.markTimerStart(this.state.timerSeconds, Date.now());\r\n  };\r\n\r\n  onClickReturnToWork = () => {\r\n    const lastTimerSeconds = this.state.timerSeconds;\r\n    const newTimerSeconds =\r\n      (!this.state.alwaysStartFullWork && this.state.lastWorkTimerSeconds) ||\r\n      this.state.workMinutes * 60;\r\n    this.setStateAndStorage({\r\n      isWork: true,\r\n      timerSeconds: newTimerSeconds,\r\n    });\r\n    this.notifyCycleChange(false, lastTimerSeconds, newTimerSeconds);\r\n  };\r\n\r\n  onClickGoOnABreak = () => {\r\n    let availableBreakSeconds = Math.round(this.state.availableBreakSeconds);\r\n    const lastTimerSeconds = this.state.timerSeconds;\r\n    this.setStateAndStorage({\r\n      isWork: false,\r\n      timerSeconds: availableBreakSeconds,\r\n      availableBreakSeconds: availableBreakSeconds,\r\n    });\r\n    this.notifyCycleChange(true, lastTimerSeconds, availableBreakSeconds);\r\n  };\r\n\r\n  tick = () => {\r\n    if (!this.state.timerRunning) {\r\n      this.setStateAndStorage({\r\n        timerLastUpdatedAt: Date.now(),\r\n      });\r\n      return;\r\n    }\r\n\r\n    let now = Date.now();\r\n    let secondsDiff = Math.round((now - this.state.timerLastUpdatedAt) / 1000);\r\n    let newState = this.calculateNewState(secondsDiff, now);\r\n\r\n    this.setStateAndStorage(newState);\r\n  };\r\n\r\n  notifyCycleChange = (wasWork, oldTimerSeconds, newTimerSeconds) => {\r\n    const timerEndAt =\r\n      this.state.timerStartedAt +\r\n      (this.state.timerStartedWithSeconds - oldTimerSeconds) * 1000;\r\n    const event = {\r\n      wasWork: wasWork,\r\n      start: this.state.timerStartedAt,\r\n      end: timerEndAt,\r\n    };\r\n    this.handleEventCreated(event);\r\n    this.markTimerStart(newTimerSeconds, timerEndAt);\r\n  };\r\n\r\n  markTimerStart = (timerSeconds, timerStartedAt) => {\r\n    const newState = {\r\n      timerStartedAt: timerStartedAt,\r\n      timerStartedWithSeconds: timerSeconds,\r\n    };\r\n    this.setStateAndStorage(newState);\r\n  };\r\n\r\n  onClickHoldWork = () => {\r\n    this.setStateAndStorage({\r\n      timerRunning: false,\r\n    });\r\n    this.notifyCycleChange(\r\n      this.state.isWork,\r\n      this.state.timerSeconds,\r\n      this.state.timerSeconds\r\n    );\r\n    this.handleClose();\r\n  };\r\n\r\n  onClickResumeWork = () => {\r\n    this.setStateAndStorage({\r\n      timerRunning: true,\r\n    });\r\n    this.markTimerStart(this.state.timerSeconds, Date.now());\r\n  };\r\n\r\n  onChangeContinousWork = (event) => {\r\n    this.setStateAndStorage({\r\n      continousWork: event.target.checked,\r\n    });\r\n  };\r\n\r\n  onChangeAutoStartTimers = (event) => {\r\n    this.setStateAndStorage({\r\n      autoStartTimers: event.target.checked,\r\n    });\r\n  };\r\n\r\n  onChangeAlwaysStartFullWork = (event) => {\r\n    this.setStateAndStorage({\r\n      alwaysStartFullWork: event.target.checked,\r\n    });\r\n  };\r\n\r\n  calculateNewState(secondsDiff, now) {\r\n    this.tempState = {\r\n      isWork: this.state.isWork,\r\n      totalWorkedSeconds: this.state.totalWorkedSeconds,\r\n      lastWorkTimerSeconds: this.state.lastWorkTimerSeconds,\r\n      availableBreakSeconds: this.state.availableBreakSeconds,\r\n      hiddenAvailableBreakSeconds: this.state.hiddenAvailableBreakSeconds,\r\n      timerLastUpdatedAt: this.state.timerLastUpdatedAt,\r\n      cycle: this.state.cycle,\r\n      continousWork: this.state.continousWork,\r\n      timerSeconds: this.state.timerSeconds,\r\n      totalCombinedTime: this.state.totalCombinedTime,\r\n    };\r\n\r\n    let cycleChanges = [];\r\n    let notificationToShow = null;\r\n\r\n    for (let secondsPassed = secondsDiff; secondsPassed > 0; secondsPassed--) {\r\n      this.tempState.timerSeconds--;\r\n      this.tempState.totalCombinedTime++;\r\n      if (this.tempState.isWork) {\r\n        this.tempState.totalWorkedSeconds++;\r\n        this.tempState.lastWorkTimerSeconds = this.tempState.timerSeconds;\r\n        let availableBreakSecondsIncrement =\r\n          (this.state.shortBreakMinutes * 1.0) / this.state.workMinutes;\r\n        if (\r\n          this.tempState.availableBreakSeconds >=\r\n          this.state.shortBreakMinutes * 60\r\n        ) {\r\n          this.tempState.availableBreakSeconds +=\r\n            availableBreakSecondsIncrement;\r\n        } else {\r\n          this.tempState.hiddenAvailableBreakSeconds +=\r\n            availableBreakSecondsIncrement;\r\n        }\r\n      } else {\r\n        this.tempState.availableBreakSeconds--;\r\n      }\r\n      this.tempState.timerLastUpdatedAt = now;\r\n      if (this.tempState.timerSeconds === 0) {\r\n        let isWork = this.tempState.isWork;\r\n        let stateChange = {};\r\n        if (isWork) {\r\n          let newCycle = this.tempState.cycle + 1;\r\n          let newAvailableBreakSeconds = this.tempState.availableBreakSeconds;\r\n          if (newCycle === this.state.longBreakFreq) {\r\n            newCycle = 0;\r\n            newAvailableBreakSeconds +=\r\n              this.state.longBreakMinutes * 60 -\r\n              this.state.shortBreakMinutes * 60;\r\n          }\r\n          newAvailableBreakSeconds +=\r\n            this.tempState.hiddenAvailableBreakSeconds;\r\n          newAvailableBreakSeconds = Math.round(newAvailableBreakSeconds);\r\n\r\n          let newTimerSeconds;\r\n          let newIsWork;\r\n\r\n          if (this.tempState.continousWork) {\r\n            newTimerSeconds = this.state.workMinutes * 60;\r\n            newIsWork = true;\r\n          } else {\r\n            newTimerSeconds = newAvailableBreakSeconds;\r\n            newIsWork = false;\r\n          }\r\n\r\n          stateChange = {\r\n            timerSeconds: newTimerSeconds,\r\n            availableBreakSeconds: newAvailableBreakSeconds,\r\n            hiddenAvailableBreakSeconds: 0,\r\n            isWork: newIsWork,\r\n            cycle: newCycle,\r\n          };\r\n        } else {\r\n          stateChange = {\r\n            timerSeconds:\r\n              (!this.state.alwaysStartFullWork &&\r\n                this.state.lastWorkTimerSeconds) ||\r\n              this.state.workMinutes * 60,\r\n            isWork: true,\r\n          };\r\n        }\r\n\r\n        stateChange.timerRunning = this.state.autoStartTimers;\r\n\r\n        const lastTimerSeconds = this.tempState.timerSeconds;\r\n        this.tempState = Object.assign(this.tempState, stateChange);\r\n\r\n        notificationToShow = isWork ? \"Work finished\" : \"Break finished\";\r\n\r\n        cycleChanges.push({\r\n          isWork: isWork,\r\n          lastTimerSeconds: lastTimerSeconds,\r\n          newTimerSeconds: this.tempState.timerSeconds,\r\n        });\r\n      }\r\n    }\r\n\r\n    cycleChanges.forEach((cycleChange) => {\r\n      this.notifyCycleChange(\r\n        cycleChange.isWork,\r\n        cycleChange.lastTimerSeconds,\r\n        cycleChange.newTimerSeconds\r\n      );\r\n    });\r\n\r\n    if (notificationToShow) {\r\n      this.handleShowNotification(notificationToShow);\r\n    }\r\n\r\n    return this.tempState;\r\n  }\r\n\r\n  get cyclesUntilLongBreak() {\r\n    return this.state.longBreakFreq - this.state.cycle;\r\n  }\r\n\r\n  handleShow = () => {\r\n    this.setState({\r\n      showHoldModal: true,\r\n    });\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({\r\n      showHoldModal: false,\r\n    });\r\n  };\r\n\r\n  getFutureAdditionBreakTime() {\r\n    let additionalBreakTime = Math.round(\r\n      this.state.hiddenAvailableBreakSeconds +\r\n        ((this.state.timerSeconds * 1.0) / (this.state.workMinutes * 60.0)) *\r\n          this.state.shortBreakMinutes *\r\n          60\r\n    );\r\n    if (this.state.cycle === this.state.longBreakFreq - 1) {\r\n      additionalBreakTime +=\r\n        (this.state.longBreakMinutes - this.state.shortBreakMinutes) * 60;\r\n    }\r\n    return this.formatSecondsAsText(additionalBreakTime);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Helmet defer={false}>\r\n          <title>\r\n            {String(Math.floor(this.state.timerSeconds / 60)).padStart(2, \"0\") +\r\n              \":\" +\r\n              String(this.state.timerSeconds % 60).padStart(2, \"0\")}{\" \"}\r\n            {this.state.isWork === true\r\n              ? \"Work\"\r\n              : this.state.isWork === false\r\n              ? \"Break\"\r\n              : \"\"}\r\n            {this.state.isWork && this.state.selectedTask\r\n              ? \" (\" + this.state.selectedTask + \")\"\r\n              : \"\"}\r\n          </title>\r\n        </Helmet>\r\n        <Container>\r\n          <Modal\r\n            size=\"lg\"\r\n            show={this.state.showAboutModal}\r\n            onHide={this.handleAboutClose}\r\n          >\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>About</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n              <p>\r\n                Productivity timer that enables you to work in \"25 minutes work\r\n                - 5 minutes break\" model, but designed to be tolerant of\r\n                situations when you cannot go on a break when you should or when\r\n                you are forced to cut your break short and go back to work right\r\n                now. The goal of the app is to always calculate the amount of\r\n                break time you are entitled to.\r\n              </p>\r\n              <p>\r\n                Features:\r\n                <ul>\r\n                  <li>\r\n                    work in sessions that are at least 25 minutes long, but\r\n                    extend them at will as much as you want - the app will\r\n                    calculate the correct amount of break time available to you\r\n                    at all times\r\n                  </li>\r\n                  <li>\r\n                    get back to work before finishing your break and be able to\r\n                    reclaim the remaining break time later\r\n                  </li>\r\n                  <li>\r\n                    track how much time you spent on a given task, with\r\n                    precision down to minutes\r\n                  </li>\r\n                  <li>configure work and break times per your needs</li>\r\n                  <li>\r\n                    you may safely close the app when the timer is running -\r\n                    when you open the app again, the correct app state will be\r\n                    calculated, taking into account how much time has passed\r\n                    (this also applies to forceful shutdowns like system crashes\r\n                    or power outages)\r\n                  </li>\r\n                  <li>\r\n                    100% private - all the data is kept locally on your device,\r\n                    nothing is sent to the server - in fact, there is no server\r\n                    backend at all\r\n                  </li>\r\n                </ul>\r\n              </p>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Button onClick={this.handleAboutClose}>Close</Button>\r\n            </Modal.Footer>\r\n          </Modal>\r\n          <Row>\r\n            <Col>\r\n              <Button\r\n                variant=\"link\"\r\n                onClick={this.handleAboutShow}\r\n                className=\"float-right\"\r\n              >\r\n                About\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n          <Modal show={this.state.showHoldModal} onHide={this.handleClose}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>\r\n                {Constants.CONFIRM_HOLD_TIMER_MODAL_HEADER}\r\n              </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>{Constants.CONFIRM_HOLD_TIMER_MODAL_TEXT}</Modal.Body>\r\n            <Modal.Footer>\r\n              <Button variant=\"secondary\" onClick={this.handleClose}>\r\n                No\r\n              </Button>\r\n              <Button variant=\"primary\" onClick={this.onClickHoldWork}>\r\n                {Constants.CONFIRM_HOLD_TIMER_BUTTON_TEXT}\r\n              </Button>\r\n            </Modal.Footer>\r\n          </Modal>\r\n          <Row className=\"mt-3\">\r\n            <Col>\r\n              <ButtonGroup>\r\n                {this.state.timerRunning === true && (\r\n                  <Button variant=\"outline-warning\" onClick={this.handleShow}>\r\n                    {Constants.HOLD_WORK_BUTTON_TEXT}\r\n                  </Button>\r\n                )}\r\n                {this.state.timerRunning === false && (\r\n                  <Button\r\n                    variant=\"secondary\"\r\n                    onClick={this.onClickResumeWork}\r\n                    data-testid=\"resume-work-btn\"\r\n                  >\r\n                    {Constants.RESUME_WORK_BUTTON_TEXT}\r\n                  </Button>\r\n                )}\r\n                {this.state.isWork === null && (\r\n                  <Button\r\n                    variant=\"success\"\r\n                    onClick={this.onClickStartWorking}\r\n                    data-testid=\"start-working-btn\"\r\n                  >\r\n                    {Constants.START_WORKING_BUTTON_TEXT}\r\n                  </Button>\r\n                )}\r\n                {this.state.isWork !== null && (\r\n                  <Button\r\n                    variant=\"outline-dark\"\r\n                    onClick={this.onClickReset}\r\n                    data-testid=\"reset-btn\"\r\n                  >\r\n                    {Constants.RESET_BUTTON_TEXT}\r\n                  </Button>\r\n                )}\r\n              </ButtonGroup>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <h3 className=\"mt-3\">\r\n                {this.state.isWork === true\r\n                  ? Constants.WORK_LABEL_TEXT\r\n                  : this.state.isWork === false\r\n                  ? Constants.BREAK_LABEL_TEXT\r\n                  : \"\"}\r\n              </h3>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <h1 data-testid=\"timer\">\r\n                {this.getTimerMinutes() + \":\" + this.getTimerSeconds()}\r\n              </h1>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              {this.state.isWork === true ? (\r\n                <>\r\n                  {!this.state.availableBreakSeconds ? (\r\n                    <>\r\n                      <OverlayTrigger\r\n                        overlay={\r\n                          <Tooltip id=\"tooltip-disabled\">\r\n                            {Constants.BREAK_WILL_BECOME_AVAILABLE_TEXT}\r\n                          </Tooltip>\r\n                        }\r\n                      >\r\n                        <span className=\"d-inline-block\">\r\n                          <Button\r\n                            disabled\r\n                            variant=\"success\"\r\n                            style={{ pointerEvents: \"none\" }}\r\n                          >\r\n                            {Constants.GO_ON_A_BREAT_BUTTON_TEXT}\r\n                          </Button>\r\n                        </span>\r\n                      </OverlayTrigger>\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <Button\r\n                        variant=\"success\"\r\n                        onClick={this.onClickGoOnABreak}\r\n                      >\r\n                        {Constants.GO_ON_A_BREAT_BUTTON_TEXT}\r\n                      </Button>\r\n                    </>\r\n                  )}\r\n                </>\r\n              ) : null}\r\n              {this.state.isWork === false ? (\r\n                <>\r\n                  <Button\r\n                    variant=\"secondary\"\r\n                    onClick={this.onClickReturnToWork}\r\n                  >\r\n                    {Constants.RETURN_TO_WORK_BUTTON_TEXT}\r\n                  </Button>\r\n                </>\r\n              ) : null}\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col sm={6} className=\"font-weight-light text-md-right\">\r\n              Total time worked:\r\n            </Col>\r\n            <Col sm={6} className=\"text-md-left\" data-testid=\"totalWorkedTime\">\r\n              {this.formatSecondsAsText(this.state.totalWorkedSeconds)}\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col sm={6} className=\"font-weight-light text-md-right\">\r\n              Available break time:\r\n            </Col>\r\n            <Col\r\n              sm={6}\r\n              className=\"text-md-left\"\r\n              data-testid=\"availableBreakTime\"\r\n            >\r\n              {this.formatSecondsAsText(this.state.availableBreakSeconds)}\r\n            </Col>\r\n          </Row>\r\n          {this.state.isWork &&\r\n            this.state.availableBreakSeconds <\r\n              this.state.shortBreakMinutes * 60 && (\r\n              <Row>\r\n                <Col\r\n                  xs={12}\r\n                  sm={{ span: 6, offset: 6 }}\r\n                  className=\"text-md-left text-muted font-weight-light small\"\r\n                >\r\n                  +{\" \"}\r\n                  <span data-testid=\"futureAdditionBreakTime\">\r\n                    {this.getFutureAdditionBreakTime()}\r\n                  </span>{\" \"}\r\n                  after work timer finishes\r\n                </Col>\r\n              </Row>\r\n            )}\r\n          <Row>\r\n            <Col sm={6} className=\"font-weight-light text-md-right\">\r\n              Cycles until long break ({this.state.longBreakMinutes} minutes):\r\n            </Col>\r\n            <Col sm={6} className=\"text-md-left\" data-testid=\"longBreakInfo\">\r\n              {this.cyclesUntilLongBreak}\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col sm={6} className=\"font-weight-light text-md-right\">\r\n              Total time (work + break):\r\n            </Col>\r\n            <Col\r\n              sm={6}\r\n              className=\"text-md-left\"\r\n              data-testid=\"totalCombinedTime\"\r\n            >\r\n              {this.formatSecondsAsText(this.state.totalCombinedTime)}\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Form.Check\r\n                type=\"checkbox\"\r\n                label={Constants.CONTINOUS_WORK_TEXT}\r\n                checked={this.state.continousWork}\r\n                id=\"cont-work-check\"\r\n                data-testid=\"cont-work\"\r\n                onChange={this.onChangeContinousWork}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Form.Check\r\n                type=\"checkbox\"\r\n                label={Constants.START_TIMERS_AUTOMATICALLY_TEXT}\r\n                checked={this.state.autoStartTimers}\r\n                id=\"auto-start-timers-check\"\r\n                data-testid=\"auto-start-timers\"\r\n                onChange={this.onChangeAutoStartTimers}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Form.Check\r\n                type=\"checkbox\"\r\n                label={Constants.ALWAYS_START_FULL_WORK_TEXT}\r\n                checked={this.state.alwaysStartFullWork}\r\n                id=\"full-work-check\"\r\n                data-testid=\"full-work\"\r\n                onChange={this.onChangeAlwaysStartFullWork}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"mt-2 mb-2\">\r\n            <Col>\r\n              <Button variant=\"outline-dark\" onClick={this.onClickSettings}>\r\n                Settings\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"mb-3\">\r\n            <Col>\r\n              <Collapse in={this.state.settingsVisible}>\r\n                <div>\r\n                  <Card>\r\n                    <Card.Header>\r\n                      <CloseButton onClick={this.onClickSettings} />\r\n                    </Card.Header>\r\n                    <Card.Body>\r\n                      <UserSettings\r\n                        workMinutes={this.state.workMinutes}\r\n                        shortBreakMinutes={this.state.shortBreakMinutes}\r\n                        longBreakMinutes={this.state.longBreakMinutes}\r\n                        longBreakFreq={this.state.longBreakFreq}\r\n                        onchange={this.onChangeSettings}\r\n                      />\r\n                    </Card.Body>\r\n                  </Card>\r\n                </div>\r\n              </Collapse>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"mb-3\">\r\n            <Col>\r\n              <SimpleTaskManager\r\n                onTaskCreate={this.handleTaskCreated}\r\n                onTaskSelected={this.handleTaskSelected}\r\n                tasks={this.state.tasks}\r\n                selectedTask={this.state.selectedTask}\r\n                onTaskRemoved={this.handleTaskRemoved}\r\n                eventsTimestamp={this.state.eventsTimestamp}\r\n                totalMaxVisibleCharacters={400}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"mb-3\">\r\n            <Col>\r\n              <TaskTimes\r\n                events={this.state.events}\r\n                eventsTimestamp={this.state.eventsTimestamp}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"mb-2\">\r\n            <Col>\r\n              <Button\r\n                variant=\"outline-dark\"\r\n                data-testid=\"toggle-calendar-btn\"\r\n                onClick={this.onClickToggleCalendar}\r\n              >\r\n                {this.state.calendarVisible ? \"Hide calendar\" : \"Show calendar\"}\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Collapse in={this.state.calendarVisible}>\r\n                <Card>\r\n                  <Card.Body>\r\n                    {this.state.calendarVisible && (\r\n                      <FullCalendar\r\n                        events={this.state.events}\r\n                        plugins={[timeGridPlugin, dayGridMonth, listPlugin]}\r\n                        initialView=\"timeGridWeek\"\r\n                        headerToolbar={{\r\n                          right:\r\n                            \"today prev,next dayGridMonth,timeGridWeek,timeGridDay listWeek\",\r\n                        }}\r\n                        slotDuration=\"00:10:00\"\r\n                        height={650}\r\n                        eventDidMount={function (event) {\r\n                          event.el.title = event.event.title;\r\n                        }}\r\n                      />\r\n                    )}\r\n                  </Card.Body>\r\n                </Card>\r\n              </Collapse>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import Settings from \"./Settings\";\r\n\r\nclass DefaultSettings extends Settings {\r\n  constructor() {\r\n    const workMinutes = 25;\r\n    const shortBreakMinutes = 5;\r\n    const longBreakMinutes = 10;\r\n    const longBreakFreq = 4;\r\n    const continousWork = true;\r\n\r\n    super(\r\n      workMinutes,\r\n      shortBreakMinutes,\r\n      longBreakMinutes,\r\n      longBreakFreq,\r\n      continousWork,\r\n      {\r\n        timerSeconds: workMinutes * 60,\r\n        lastWorkTimerSeconds: workMinutes * 60,\r\n        totalWorkedSeconds: 0,\r\n        isWork: null,\r\n        availableBreakSeconds: 0,\r\n        hiddenAvailableBreakSeconds: 0,\r\n        totalCombinedTime: 0,\r\n        cycle: 0,\r\n        notificationsGranted: false,\r\n        timerRunning: null,\r\n        continousWork: continousWork,\r\n        timerLastUpdatedAt: Date.now(),\r\n        autoStartTimers: true,\r\n        alwaysStartFullWork: true,\r\n        workMinutes: workMinutes,\r\n        shortBreakMinutes: shortBreakMinutes,\r\n        longBreakMinutes: longBreakMinutes,\r\n        longBreakFreq: longBreakFreq,\r\n        settingsVisible: false,\r\n        calendarVisible: false,\r\n        events: [],\r\n        timerStartedAt: null,\r\n        timerStartedWithSeconds: null,\r\n        tasks: [],\r\n        selectedTask: \"\",\r\n        showHoldModal: false\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nexport default DefaultSettings;\r\n","class Settings {\r\n  constructor(\r\n    workMinutes,\r\n    shortBreakMinutes,\r\n    longBreakMinutes,\r\n    longBreakFreq,\r\n    continousWork,\r\n    defaultState\r\n  ) {\r\n    this._workMinutes = workMinutes;\r\n    this._shortBreakMinutes = shortBreakMinutes;\r\n    this._longBreakMinutes = longBreakMinutes;\r\n    this._longBreakFreq = longBreakFreq;\r\n    this._continousWork = continousWork;\r\n    this._defaultState = defaultState;\r\n  }\r\n\r\n  get workMinutes() {\r\n    return this._workMinutes;\r\n  }\r\n\r\n  get shortBreakMinutes() {\r\n    return this._shortBreakMinutes;\r\n  }\r\n\r\n  get longBreakMinutes() {\r\n    return this._longBreakMinutes;\r\n  }\r\n\r\n  get longBreakFreq() {\r\n    return this._longBreakFreq;\r\n  }\r\n\r\n  get continousWork() {\r\n    return this._continousWork;\r\n  }\r\n\r\n  get defaultState() {\r\n    return this._defaultState;\r\n  }\r\n}\r\n\r\nexport default Settings;\r\n","class BrowserNotifications {\r\n  requestPermission() {\r\n    return Notification.requestPermission();\r\n  }\r\n\r\n  createNotification(title, params) {\r\n    new Notification(title, params);\r\n  }\r\n}\r\n\r\nexport default BrowserNotifications;\r\n","class LocalStorage {\r\n  get state() {\r\n    return JSON.parse(localStorage.getItem(\"timer_state\"));\r\n  }\r\n\r\n  set state(state) {\r\n    localStorage.setItem(\"timer_state\", JSON.stringify(state));\r\n  }\r\n}\r\n\r\nexport default LocalStorage;\r\n","import \"./custom.scss\";\r\nimport \"@fontsource/signika\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport DefaultSettings from \"./DefaultSettings\";\r\nimport BrowserNotifications from \"./BrowserNotifications\";\r\nimport LocalStorage from \"./LocalStorage\";\r\n\r\nReactDOM.render(\r\n  <App\r\n    basename={process.env.PUBLIC_URL}\r\n    defaultSettings={new DefaultSettings()}\r\n    notifications={new BrowserNotifications()}\r\n    storage={new LocalStorage()}\r\n  />,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}