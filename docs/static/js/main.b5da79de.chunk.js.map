{"version":3,"sources":["App.js","serviceWorker.js","DefaultSettings.js","Settings.js","BrowserNotifications.js","LocalStorage.js","index.js"],"names":["App","props","onClickStartWorking","setStateAndStorage","isWork","timerRunning","onClickReturnToWork","timerSeconds","settings","workMinutes","onClickGoOnABreak","availableBreakSeconds","Math","round","state","tick","now","Date","secondsDiff","timerLastUpdatedAt","tempState","secondsPassed","totalWorkedSeconds","availableBreakSecondsIncrement","shortBreakMinutes","hiddenAvailableBreakSeconds","onTimerFinish","stateChange","newTimerSeconds","newIsWork","newCycle","cycle","newAvailableBreakSeconds","longBreakFreq","longBreakMinutes","continousWork","autoStartTimers","Object","assign","notifications","notificationsGranted","notificationTitle","createNotification","onClickHoldWork","onClickResumeWork","onClickReset","window","confirm","defaultState","getDefaultState","onChangeContinousWork","event","target","checked","onChangeAutoStartTimers","setState","storage","setInterval","requestPermission","then","result","seconds","String","floor","padStart","hoursPart","hoursLabel","minutesPart","secondsPart","className","Helmet","this","formatSecondsAsTimer","rel","href","integrity","crossorigin","class","onClick","data-testid","formatSecondsAsText","cyclesUntilLongBreak","type","value","onChange","id","for","React","Component","Boolean","location","hostname","match","DefaultSettings","_workMinutes","_shortBreakMinutes","_longBreakMinutes","_longBreakFreq","BrowserNotifications","Notification","title","params","LocalStorage","JSON","parse","localStorage","getItem","setItem","stringify","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b5da79de.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.settings = props.settings;\r\n    this.storage = props.storage;\r\n    if (this.storage && this.storage.state) {\r\n      this.state = this.storage.state;\r\n    } else {\r\n      this.state = this.getDefaultState();\r\n    }\r\n    setInterval(this.tick, 1000);\r\n    this.tick();\r\n    if (props.notifications) {\r\n      this.notifications = props.notifications;\r\n      this.notifications.requestPermission().then((result) => {\r\n        if (result === 'granted') {\r\n          this.notificationsGranted = true;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  formatSecondsAsTimer(seconds) {\r\n    let minutesPart = String(Math.floor(seconds / 60)).padStart(2, '0');\r\n    let secondsPart = String(seconds % 60).padStart(2, '0');\r\n    return minutesPart + ':' + secondsPart;\r\n  }\r\n\r\n  formatSecondsAsText(seconds) {\r\n    seconds = Math.round(seconds);\r\n    let hoursPart = Math.floor(seconds / 3600) + '';\r\n    let hoursLabel = hoursPart === '1' ? 'hour' : 'hours';\r\n    seconds = seconds % 3600;\r\n    let minutesPart = Math.floor(seconds / 60) + '';\r\n    let minutesLabel = minutesPart === '1' ? 'minute' : 'minutes';\r\n    seconds = seconds % 60;\r\n    let secondsPart = (seconds % 60) + '';\r\n    let secondsLabel = secondsPart === '1' ? 'second' : 'seconds';\r\n    return hoursPart + ' ' + hoursLabel + ' ' + minutesPart + ' ' + minutesLabel + ' ' + secondsPart + ' ' + secondsLabel;\r\n  }\r\n\r\n  onClickStartWorking = () => {\r\n    this.setStateAndStorage({\r\n      isWork: true,\r\n      timerRunning: true\r\n    });\r\n  }\r\n\r\n  onClickReturnToWork = () => {\r\n    this.setStateAndStorage({\r\n      isWork: true,\r\n      timerSeconds: this.settings.workMinutes * 60\r\n    });\r\n  }\r\n\r\n  onClickGoOnABreak = () => {\r\n    let availableBreakSeconds = Math.round(this.state.availableBreakSeconds);\r\n    this.setStateAndStorage({\r\n      isWork: false,\r\n      timerSeconds: availableBreakSeconds,\r\n      availableBreakSeconds: availableBreakSeconds\r\n    });\r\n  }\r\n\r\n  tick = () => {\r\n    if (!this.state.timerRunning) {\r\n      this.setStateAndStorage({\r\n        timerLastUpdatedAt: Date.now()\r\n      });\r\n      return;\r\n    }\r\n\r\n    let now = Date.now();\r\n    let secondsDiff = Math.round((now - this.state.timerLastUpdatedAt) / 1000);\r\n    this.tempState = this.state;\r\n\r\n    for (let secondsPassed = secondsDiff; secondsPassed > 0; secondsPassed--) {\r\n      this.tempState.timerSeconds--;\r\n      if (this.tempState.isWork) {\r\n        this.tempState.totalWorkedSeconds++;\r\n        let availableBreakSecondsIncrement = this.settings.shortBreakMinutes * 1.0 / this.settings.workMinutes;\r\n        if (this.tempState.availableBreakSeconds >= this.settings.shortBreakMinutes * 60) {\r\n          this.tempState.availableBreakSeconds += availableBreakSecondsIncrement;\r\n        } else {\r\n          this.tempState.hiddenAvailableBreakSeconds += availableBreakSecondsIncrement;\r\n        }\r\n      } else {\r\n        this.tempState.availableBreakSeconds--;\r\n      }\r\n      this.tempState.timerLastUpdatedAt = now;\r\n      if (this.tempState.timerSeconds === 0) {\r\n        this.onTimerFinish();\r\n      }\r\n    }\r\n\r\n    this.setStateAndStorage(this.tempState);\r\n  }\r\n\r\n  onTimerFinish = () => {\r\n    let isWork = this.tempState.isWork;\r\n    let stateChange = {};\r\n    if (isWork) {\r\n      let newCycle = this.tempState.cycle + 1;\r\n      let newAvailableBreakSeconds = this.tempState.availableBreakSeconds;\r\n      if (newCycle === this.settings.longBreakFreq) {\r\n        newCycle = 0;\r\n        newAvailableBreakSeconds += this.settings.longBreakMinutes * 60 - this.settings.shortBreakMinutes * 60;\r\n      }\r\n      newAvailableBreakSeconds += this.tempState.hiddenAvailableBreakSeconds;\r\n      newAvailableBreakSeconds = Math.round(newAvailableBreakSeconds);\r\n\r\n      let newTimerSeconds;\r\n      let newIsWork;\r\n\r\n      if (this.tempState.continousWork) {\r\n        newTimerSeconds = this.settings.workMinutes * 60;\r\n        newIsWork = true;\r\n      } else {\r\n        newTimerSeconds = newAvailableBreakSeconds;\r\n        newIsWork = false;\r\n      }\r\n\r\n      stateChange = {\r\n        timerSeconds: newTimerSeconds,\r\n        availableBreakSeconds: newAvailableBreakSeconds,\r\n        hiddenAvailableBreakSeconds: 0,\r\n        isWork: newIsWork,\r\n        cycle: newCycle\r\n      };\r\n    } else {\r\n      stateChange = {\r\n        timerSeconds: this.settings.workMinutes * 60,\r\n        isWork: true\r\n      };\r\n    }\r\n\r\n    stateChange.timerRunning = this.state.autoStartTimers;\r\n\r\n    this.tempState = Object.assign(this.tempState, stateChange);\r\n\r\n    if (this.notifications && this.notificationsGranted) {\r\n      let notificationTitle = isWork ? 'Work finished' : 'Break finished';\r\n      this.notifications.createNotification(notificationTitle);\r\n    }\r\n  }\r\n\r\n  onClickHoldWork = () => {\r\n    this.setStateAndStorage({\r\n      timerRunning: false\r\n    });\r\n  }\r\n\r\n  onClickResumeWork = () => {\r\n    this.setStateAndStorage({\r\n      timerRunning: true\r\n    });\r\n  }\r\n\r\n  onClickReset = () => {\r\n    if (window.confirm(\"Are you sure you want to reset everything to inital state?\")) {\r\n      let defaultState = this.getDefaultState();\r\n      defaultState.continousWork = this.state.continousWork;\r\n      defaultState.autoStartTimers = this.state.autoStartTimers;\r\n      this.setStateAndStorage(defaultState);\r\n    }\r\n  }\r\n\r\n  onChangeContinousWork = (event) => {\r\n    this.setStateAndStorage({\r\n      continousWork: event.target.checked\r\n    });\r\n  }\r\n\r\n  onChangeAutoStartTimers = (event) => {\r\n    this.setStateAndStorage({\r\n      autoStartTimers: event.target.checked\r\n    });\r\n  }\r\n\r\n  setStateAndStorage = (state) => {\r\n    this.setState(state);\r\n    if (this.storage) {\r\n      this.storage.state = Object.assign(this.state, state);\r\n    }\r\n  }\r\n\r\n  get cyclesUntilLongBreak() {\r\n    return this.settings.longBreakFreq - this.state.cycle;\r\n  }\r\n\r\n  getDefaultState = () => {\r\n    return {\r\n      timerSeconds: this.settings.workMinutes * 60,\r\n      totalWorkedSeconds: 0,\r\n      isWork: null,\r\n      availableBreakSeconds: 0,\r\n      hiddenAvailableBreakSeconds: 0,\r\n      cycle: 0,\r\n      notificationsGranted: false,\r\n      timerRunning: null,\r\n      continousWork: false,\r\n      timerLastUpdatedAt: Date.now(),\r\n      autoStartTimers: true\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Helmet>\r\n          <title>{this.formatSecondsAsTimer(this.state.timerSeconds)}</title>\r\n        </Helmet>\r\n\r\n        <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" \r\n          integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"></link>\r\n\r\n        <div class=\"container\">\r\n          <div class=\"row\">\r\n            <div class=\"col-sm offset-sm-11\">\r\n              <button className=\"btn\" onClick={this.onClickReset} data-testid=\"reset-btn\">Reset</button>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-sm\">\r\n              {this.state.timerRunning === true &&\r\n                <button className=\"btn btn-warning\" onClick={this.onClickHoldWork}>Hold work</button>\r\n              }\r\n              {this.state.timerRunning === false &&\r\n                <button className=\"btn btn-secondary\" onClick={this.onClickResumeWork} data-testid=\"resume-work-btn\">Resume work</button>\r\n              }\r\n              {this.state.isWork === null &&\r\n                <button className=\"btn btn-success\" onClick={this.onClickStartWorking} data-testid=\"start-working-btn\">Start working</button>\r\n              }\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-sm\">\r\n              <h1 data-testid=\"timer\">{this.formatSecondsAsTimer(this.state.timerSeconds)}</h1>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-sm\">\r\n              {(this.state.isWork === true && this.state.availableBreakSeconds) ?\r\n                <>\r\n                  <button className=\"btn btn-success\" onClick={this.onClickGoOnABreak}>Go on a break</button>\r\n                </> : null\r\n              }\r\n              {this.state.isWork === false ?\r\n                <>\r\n                  <button className=\"btn btn-secondary\" onClick={this.onClickReturnToWork}>Return to work</button>\r\n                </> : null\r\n              }\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-sm font-weight-light text-md-right\">\r\n              Total time worked:\r\n            </div>\r\n            <div class=\"col-sm text-md-left\" data-testid=\"totalWorkedTime\">\r\n              {this.formatSecondsAsText(this.state.totalWorkedSeconds)}\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-sm font-weight-light text-md-right\">\r\n              Available break time:\r\n            </div>\r\n            <div class=\"col-sm text-md-left\" data-testid=\"availableBreakTime\">\r\n              {this.formatSecondsAsText(this.state.availableBreakSeconds)}\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-sm font-weight-light text-md-right\">\r\n              Cycles until long break ({this.settings.longBreakMinutes} minutes):\r\n            </div>\r\n            <div class=\"col-sm text-md-left\" data-testid=\"longBreakInfo\">\r\n              {this.cyclesUntilLongBreak}\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-sm\">\r\n              <div class=\"form-check\">\r\n                <input class=\"form-check-input\" type=\"checkbox\" value=\"\" onChange={this.onChangeContinousWork}\r\n                  checked={this.state.continousWork} data-testid=\"cont-work\" id=\"cont-work-check\" />\r\n                <label class=\"form-check-label\" for=\"cont-work-check\">\r\n                  Continuous work\r\n                </label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-sm\">\r\n              <div class=\"form-check\">\r\n                <input class=\"form-check-input\" type=\"checkbox\" value=\"\" onChange={this.onChangeAutoStartTimers}\r\n                  checked={this.state.autoStartTimers} data-testid=\"auto-start-timers\" id=\"auto-start-timers-check\" />\r\n                <label class=\"form-check-label\" for=\"auto-start-timers-check\">\r\n                  Start timers automatically\r\n                </label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import Settings from './Settings';\r\n\r\nclass DefaultSettings extends Settings {\r\n  constructor() {\r\n    super(25, 5, 10, 4, 480);\r\n  }\r\n}\r\n\r\nexport default DefaultSettings;","class Settings {\r\n    constructor(workMinutes, shortBreakMinutes, longBreakMinutes, longBreakFreq) {\r\n        this._workMinutes = workMinutes;\r\n        this._shortBreakMinutes = shortBreakMinutes;\r\n        this._longBreakMinutes = longBreakMinutes;\r\n        this._longBreakFreq = longBreakFreq;\r\n    }\r\n\r\n    get workMinutes() {\r\n        return this._workMinutes;\r\n    }\r\n\r\n    get shortBreakMinutes() {\r\n        return this._shortBreakMinutes;\r\n    }\r\n\r\n    get longBreakMinutes() {\r\n        return this._longBreakMinutes;\r\n    }\r\n\r\n    get longBreakFreq() {\r\n        return this._longBreakFreq;\r\n    }\r\n}\r\n\r\nexport default Settings;","class BrowserNotifications {\r\n    requestPermission() {\r\n        return Notification.requestPermission();\r\n    }\r\n\r\n    createNotification(title, params) {\r\n        new Notification(title, params);\r\n    }\r\n}\r\n\r\nexport default BrowserNotifications;","class LocalStorage {\r\n    get state() {\r\n        return JSON.parse(localStorage.getItem('timer_state'));\r\n    }\r\n\r\n    set state(state) {\r\n        localStorage.setItem('timer_state', JSON.stringify(state));\r\n    }\r\n}\r\n\r\nexport default LocalStorage;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport DefaultSettings from './DefaultSettings';\r\nimport BrowserNotifications from './BrowserNotifications';\r\nimport LocalStorage from './LocalStorage';\r\n\r\nReactDOM.render(<App basename={ process.env.PUBLIC_URL } settings={ new DefaultSettings() } notifications={ new BrowserNotifications() } storage={ new LocalStorage() }/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}