{"version":3,"sources":["UserSettings.js","App.js","serviceWorker.js","DefaultSettings.js","Settings.js","BrowserNotifications.js","LocalStorage.js","index.js"],"names":["UserSettings","props","componentWillReceiveProps","setState","onChangeWorkMinutes","event","onchange","workMinutes","target","value","onChangeShortBreakMinutes","shortBreakMinutes","onChangeLongBreakMinutes","longBreakMinutes","onChangeLongBreakFreq","longBreakFreq","state","class","for","type","this","onChange","id","React","Component","App","onClickStartWorking","setStateAndStorage","isWork","timerRunning","onClickReturnToWork","timerSeconds","onClickGoOnABreak","availableBreakSeconds","Math","round","tick","now","Date","secondsDiff","timerLastUpdatedAt","tempState","secondsPassed","totalWorkedSeconds","availableBreakSecondsIncrement","hiddenAvailableBreakSeconds","onTimerFinish","stateChange","newTimerSeconds","newIsWork","newCycle","cycle","newAvailableBreakSeconds","continousWork","autoStartTimers","Object","assign","notifications","notificationsGranted","notificationTitle","createNotification","onClickHoldWork","onClickResumeWork","onClickReset","window","confirm","getDefaultStateWithoutSettings","onClickSettings","settingsVisible","onChangeContinousWork","checked","onChangeAutoStartTimers","storage","onChangeSettings","settings","getDefaultState","defaultSettings","defaultState","setInterval","requestPermission","then","result","seconds","String","floor","padStart","hoursPart","hoursLabel","minutesPart","secondsPart","className","Helmet","formatSecondsAsTimer","rel","href","integrity","crossorigin","src","onClick","data-testid","formatSecondsAsText","cyclesUntilLongBreak","Boolean","location","hostname","match","DefaultSettings","_workMinutes","_shortBreakMinutes","_longBreakMinutes","_longBreakFreq","BrowserNotifications","Notification","title","params","LocalStorage","JSON","parse","localStorage","getItem","setItem","stringify","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d176c282.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass UserSettings extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            workMinutes: props.workMinutes,\r\n            shortBreakMinutes: props.shortBreakMinutes,\r\n            longBreakMinutes: props.longBreakMinutes,\r\n            longBreakFreq: props.longBreakFreq\r\n        }\r\n        this.onchange = props.onchange;\r\n    }\r\n\r\n    componentWillReceiveProps = (props) => {\r\n        this.setState(props);\r\n    }\r\n\r\n    onChangeWorkMinutes = (event) => {\r\n        this.onchange({\r\n            workMinutes: event.target.value\r\n        });\r\n    }\r\n\r\n    onChangeShortBreakMinutes = (event) => {\r\n        this.onchange({\r\n            shortBreakMinutes: event.target.value\r\n        });\r\n    }\r\n\r\n    onChangeLongBreakMinutes = (event) => {\r\n        this.onchange({\r\n            longBreakMinutes: event.target.value\r\n        });\r\n    }\r\n\r\n    onChangeLongBreakFreq = (event) => {\r\n        this.onchange({\r\n            longBreakFreq: event.target.value\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div class=\"d-flex flex-row form-group\">\r\n                    <label for=\"work-minutes\" class=\"p-2 col-form-label\">Work cycle minutes</label>\r\n                    <div class=\"p-2\">\r\n                        <input class=\"form-control\" type=\"number\" value={this.state.workMinutes} onChange={this.onChangeWorkMinutes} id=\"work-minutes\" />\r\n                    </div>\r\n                </div>\r\n                <div class=\"d-flex flex-row form-group\">\r\n                    <label for=\"short-break-minutes\" class=\"p-2 col-form-label\">Short break minutes</label>\r\n                    <div class=\"p-2\">\r\n                        <input class=\"form-control\" type=\"number\" value={this.state.shortBreakMinutes} onChange={this.onChangeShortBreakMinutes} id=\"short-break-minutes\" />\r\n                    </div>\r\n                </div>\r\n                <div class=\"d-flex flex-row form-group\">\r\n                    <label for=\"long-break-minutes\" class=\"p-2 col-form-label\">Long break minutes</label>\r\n                    <div class=\"p-2\">\r\n                        <input class=\"form-control\" type=\"number\" value={this.state.longBreakMinutes} onChange={this.onChangeLongBreakMinutes} id=\"long-break-minutes\" />\r\n                    </div>\r\n                </div>\r\n                <div class=\"d-flex flex-row form-group\">\r\n                    <label for=\"long-break-freq\" class=\"p-2 col-form-label\">Long break after n cycles</label>\r\n                    <div class=\"p-2\">\r\n                        <input class=\"form-control\" type=\"number\" value={this.state.longBreakFreq} onChange={this.onChangeLongBreakFreq} id=\"long-break-freq\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UserSettings;","import React from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport './App.css';\r\nimport UserSettings from './UserSettings';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.defaultSettings = props.defaultSettings;\r\n    this.storage = props.storage;\r\n    this.state = this.getDefaultState();\r\n    if (this.storage && this.storage.state) {\r\n      this.state = Object.assign(this.state, this.storage.state);\r\n    }\r\n    setInterval(this.tick, 1000);\r\n    this.tick();\r\n    if (props.notifications) {\r\n      this.notifications = props.notifications;\r\n      this.notifications.requestPermission().then((result) => {\r\n        if (result === 'granted') {\r\n          this.notificationsGranted = true;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  formatSecondsAsTimer(seconds) {\r\n    let minutesPart = String(Math.floor(seconds / 60)).padStart(2, '0');\r\n    let secondsPart = String(seconds % 60).padStart(2, '0');\r\n    return minutesPart + ':' + secondsPart;\r\n  }\r\n\r\n  formatSecondsAsText(seconds) {\r\n    seconds = Math.round(seconds);\r\n    let hoursPart = Math.floor(seconds / 3600) + '';\r\n    let hoursLabel = hoursPart === '1' ? 'hour' : 'hours';\r\n    seconds = seconds % 3600;\r\n    let minutesPart = Math.floor(seconds / 60) + '';\r\n    let minutesLabel = minutesPart === '1' ? 'minute' : 'minutes';\r\n    seconds = seconds % 60;\r\n    let secondsPart = (seconds % 60) + '';\r\n    let secondsLabel = secondsPart === '1' ? 'second' : 'seconds';\r\n    return hoursPart + ' ' + hoursLabel + ' ' + minutesPart + ' ' + minutesLabel + ' ' + secondsPart + ' ' + secondsLabel;\r\n  }\r\n\r\n  onClickStartWorking = () => {\r\n    this.setStateAndStorage({\r\n      isWork: true,\r\n      timerRunning: true\r\n    });\r\n  }\r\n\r\n  onClickReturnToWork = () => {\r\n    this.setStateAndStorage({\r\n      isWork: true,\r\n      timerSeconds: this.state.workMinutes * 60\r\n    });\r\n  }\r\n\r\n  onClickGoOnABreak = () => {\r\n    let availableBreakSeconds = Math.round(this.state.availableBreakSeconds);\r\n    this.setStateAndStorage({\r\n      isWork: false,\r\n      timerSeconds: availableBreakSeconds,\r\n      availableBreakSeconds: availableBreakSeconds\r\n    });\r\n  }\r\n\r\n  tick = () => {\r\n    if (!this.state.timerRunning) {\r\n      this.setStateAndStorage({\r\n        timerLastUpdatedAt: Date.now()\r\n      });\r\n      return;\r\n    }\r\n\r\n    let now = Date.now();\r\n    let secondsDiff = Math.round((now - this.state.timerLastUpdatedAt) / 1000);\r\n    this.tempState = this.state;\r\n\r\n    for (let secondsPassed = secondsDiff; secondsPassed > 0; secondsPassed--) {\r\n      this.tempState.timerSeconds--;\r\n      if (this.tempState.isWork) {\r\n        this.tempState.totalWorkedSeconds++;\r\n        let availableBreakSecondsIncrement = this.state.shortBreakMinutes * 1.0 / this.state.workMinutes;\r\n        if (this.tempState.availableBreakSeconds >= this.state.shortBreakMinutes * 60) {\r\n          this.tempState.availableBreakSeconds += availableBreakSecondsIncrement;\r\n        } else {\r\n          this.tempState.hiddenAvailableBreakSeconds += availableBreakSecondsIncrement;\r\n        }\r\n      } else {\r\n        this.tempState.availableBreakSeconds--;\r\n      }\r\n      this.tempState.timerLastUpdatedAt = now;\r\n      if (this.tempState.timerSeconds === 0) {\r\n        this.onTimerFinish();\r\n      }\r\n    }\r\n\r\n    this.setStateAndStorage(this.tempState);\r\n  }\r\n\r\n  onTimerFinish = () => {\r\n    let isWork = this.tempState.isWork;\r\n    let stateChange = {};\r\n    if (isWork) {\r\n      let newCycle = this.tempState.cycle + 1;\r\n      let newAvailableBreakSeconds = this.tempState.availableBreakSeconds;\r\n      if (newCycle === this.state.longBreakFreq) {\r\n        newCycle = 0;\r\n        newAvailableBreakSeconds += this.state.longBreakMinutes * 60 - this.state.shortBreakMinutes * 60;\r\n      }\r\n      newAvailableBreakSeconds += this.tempState.hiddenAvailableBreakSeconds;\r\n      newAvailableBreakSeconds = Math.round(newAvailableBreakSeconds);\r\n\r\n      let newTimerSeconds;\r\n      let newIsWork;\r\n\r\n      if (this.tempState.continousWork) {\r\n        newTimerSeconds = this.state.workMinutes * 60;\r\n        newIsWork = true;\r\n      } else {\r\n        newTimerSeconds = newAvailableBreakSeconds;\r\n        newIsWork = false;\r\n      }\r\n\r\n      stateChange = {\r\n        timerSeconds: newTimerSeconds,\r\n        availableBreakSeconds: newAvailableBreakSeconds,\r\n        hiddenAvailableBreakSeconds: 0,\r\n        isWork: newIsWork,\r\n        cycle: newCycle\r\n      };\r\n    } else {\r\n      stateChange = {\r\n        timerSeconds: this.state.workMinutes * 60,\r\n        isWork: true\r\n      };\r\n    }\r\n\r\n    stateChange.timerRunning = this.state.autoStartTimers;\r\n\r\n    this.tempState = Object.assign(this.tempState, stateChange);\r\n\r\n    if (this.notifications && this.notificationsGranted) {\r\n      let notificationTitle = isWork ? 'Work finished' : 'Break finished';\r\n      this.notifications.createNotification(notificationTitle);\r\n    }\r\n  }\r\n\r\n  onClickHoldWork = () => {\r\n    this.setStateAndStorage({\r\n      timerRunning: false\r\n    });\r\n  }\r\n\r\n  onClickResumeWork = () => {\r\n    this.setStateAndStorage({\r\n      timerRunning: true\r\n    });\r\n  }\r\n\r\n  onClickReset = () => {\r\n    if (window.confirm(\"Are you sure you want to reset everything to inital state?\")) {\r\n      this.setStateAndStorage(this.getDefaultStateWithoutSettings());\r\n    }\r\n  }\r\n\r\n  onClickSettings = () => {\r\n    this.setState({\r\n      settingsVisible: !this.state.settingsVisible\r\n    });\r\n  }\r\n\r\n  onChangeContinousWork = (event) => {\r\n    this.setStateAndStorage({\r\n      continousWork: event.target.checked\r\n    });\r\n  }\r\n\r\n  onChangeAutoStartTimers = (event) => {\r\n    this.setStateAndStorage({\r\n      autoStartTimers: event.target.checked\r\n    });\r\n  }\r\n\r\n  setStateAndStorage = (state) => {\r\n    this.setState(state);\r\n    if (this.storage) {\r\n      this.storage.state = Object.assign(this.state, state);\r\n    }\r\n  }\r\n\r\n  onChangeSettings = (settings) => {\r\n    this.setStateAndStorage(settings);\r\n  }\r\n\r\n  get cyclesUntilLongBreak() {\r\n    return this.state.longBreakFreq - this.state.cycle;\r\n  }\r\n\r\n  getDefaultState = () => {\r\n    return {\r\n      timerSeconds: this.defaultSettings.workMinutes * 60,\r\n      totalWorkedSeconds: 0,\r\n      isWork: null,\r\n      availableBreakSeconds: 0,\r\n      hiddenAvailableBreakSeconds: 0,\r\n      cycle: 0,\r\n      notificationsGranted: false,\r\n      timerRunning: null,\r\n      continousWork: false,\r\n      timerLastUpdatedAt: Date.now(),\r\n      autoStartTimers: true,\r\n      workMinutes: this.defaultSettings.workMinutes,\r\n      shortBreakMinutes: this.defaultSettings.shortBreakMinutes,\r\n      longBreakMinutes: this.defaultSettings.longBreakMinutes,\r\n      longBreakFreq: this.defaultSettings.longBreakFreq,\r\n      settingsVisible: false\r\n    };\r\n  }\r\n\r\n  getDefaultStateWithoutSettings = () => {\r\n    const defaultState = this.getDefaultState();\r\n    defaultState.continousWork = this.state.continousWork;\r\n    defaultState.autoStartTimers = this.state.autoStartTimers;\r\n    defaultState.workMinutes = this.state.workMinutes;\r\n    defaultState.shortBreakMinutes = this.state.shortBreakMinutes;\r\n    defaultState.longBreakMinutes = this.state.longBreakMinutes;\r\n    defaultState.longBreakFreq = this.state.longBreakFreq;\r\n    defaultState.timerSeconds = this.state.workMinutes * 60;\r\n    return defaultState;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Helmet>\r\n          <title>{this.formatSecondsAsTimer(this.state.timerSeconds)}</title>\r\n        </Helmet>\r\n\r\n        <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\r\n          integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"></link>\r\n\r\n        <script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin=\"anonymous\"></script>\r\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\" integrity=\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\" crossorigin=\"anonymous\"></script>\r\n        <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\" integrity=\"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\" crossorigin=\"anonymous\"></script>\r\n\r\n        <div class=\"container\">\r\n          <div class=\"row\">\r\n            <div class=\"col-sm offset-sm-11\">\r\n              <button className=\"btn\" onClick={this.onClickReset} data-testid=\"reset-btn\">Reset</button>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-sm\">\r\n              {this.state.timerRunning === true &&\r\n                <button className=\"btn btn-warning\" onClick={this.onClickHoldWork}>Hold work</button>\r\n              }\r\n              {this.state.timerRunning === false &&\r\n                <button className=\"btn btn-secondary\" onClick={this.onClickResumeWork} data-testid=\"resume-work-btn\">Resume work</button>\r\n              }\r\n              {this.state.isWork === null &&\r\n                <button className=\"btn btn-success\" onClick={this.onClickStartWorking} data-testid=\"start-working-btn\">Start working</button>\r\n              }\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-sm\">\r\n              <h1 data-testid=\"timer\">{this.formatSecondsAsTimer(this.state.timerSeconds)}</h1>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-sm\">\r\n              {(this.state.isWork === true && this.state.availableBreakSeconds) ?\r\n                <>\r\n                  <button className=\"btn btn-success\" onClick={this.onClickGoOnABreak}>Go on a break</button>\r\n                </> : null\r\n              }\r\n              {this.state.isWork === false ?\r\n                <>\r\n                  <button className=\"btn btn-secondary\" onClick={this.onClickReturnToWork}>Return to work</button>\r\n                </> : null\r\n              }\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-sm font-weight-light text-md-right\">\r\n              Total time worked:\r\n            </div>\r\n            <div class=\"col-sm text-md-left\" data-testid=\"totalWorkedTime\">\r\n              {this.formatSecondsAsText(this.state.totalWorkedSeconds)}\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-sm font-weight-light text-md-right\">\r\n              Available break time:\r\n            </div>\r\n            <div class=\"col-sm text-md-left\" data-testid=\"availableBreakTime\">\r\n              {this.formatSecondsAsText(this.state.availableBreakSeconds)}\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-sm font-weight-light text-md-right\">\r\n              Cycles until long break ({this.state.longBreakMinutes} minutes):\r\n            </div>\r\n            <div class=\"col-sm text-md-left\" data-testid=\"longBreakInfo\">\r\n              {this.cyclesUntilLongBreak}\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-sm\">\r\n              <div class=\"form-check\">\r\n                <input class=\"form-check-input\" type=\"checkbox\" value=\"\" onChange={this.onChangeContinousWork}\r\n                  checked={this.state.continousWork} data-testid=\"cont-work\" id=\"cont-work-check\" />\r\n                <label class=\"form-check-label\" for=\"cont-work-check\">\r\n                  Continuous work\r\n                </label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-sm\">\r\n              <div class=\"form-check\">\r\n                <input class=\"form-check-input\" type=\"checkbox\" value=\"\" onChange={this.onChangeAutoStartTimers}\r\n                  checked={this.state.autoStartTimers} data-testid=\"auto-start-timers\" id=\"auto-start-timers-check\" />\r\n                <label class=\"form-check-label\" for=\"auto-start-timers-check\">\r\n                  Start timers automatically\r\n                </label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <button class=\"btn m-2\" type=\"button\" onClick={this.onClickSettings}>\r\n            Settings\r\n          </button>\r\n          <div class={this.state.settingsVisible ? 'collapse show' : 'collapse'}>\r\n            <div class=\"card card-body\">\r\n              <UserSettings\r\n                workMinutes={this.state.workMinutes} shortBreakMinutes={this.state.shortBreakMinutes}\r\n                longBreakMinutes={this.state.longBreakMinutes} longBreakFreq={this.state.longBreakFreq}\r\n                onchange={this.onChangeSettings} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import Settings from './Settings';\r\n\r\nclass DefaultSettings extends Settings {\r\n  constructor() {\r\n    super(25, 5, 10, 4, 480);\r\n  }\r\n}\r\n\r\nexport default DefaultSettings;","class Settings {\r\n    constructor(workMinutes, shortBreakMinutes, longBreakMinutes, longBreakFreq) {\r\n        this._workMinutes = workMinutes;\r\n        this._shortBreakMinutes = shortBreakMinutes;\r\n        this._longBreakMinutes = longBreakMinutes;\r\n        this._longBreakFreq = longBreakFreq;\r\n    }\r\n\r\n    get workMinutes() {\r\n        return this._workMinutes;\r\n    }\r\n\r\n    get shortBreakMinutes() {\r\n        return this._shortBreakMinutes;\r\n    }\r\n\r\n    get longBreakMinutes() {\r\n        return this._longBreakMinutes;\r\n    }\r\n\r\n    get longBreakFreq() {\r\n        return this._longBreakFreq;\r\n    }\r\n}\r\n\r\nexport default Settings;","class BrowserNotifications {\r\n    requestPermission() {\r\n        return Notification.requestPermission();\r\n    }\r\n\r\n    createNotification(title, params) {\r\n        new Notification(title, params);\r\n    }\r\n}\r\n\r\nexport default BrowserNotifications;","class LocalStorage {\r\n    get state() {\r\n        return JSON.parse(localStorage.getItem('timer_state'));\r\n    }\r\n\r\n    set state(state) {\r\n        localStorage.setItem('timer_state', JSON.stringify(state));\r\n    }\r\n}\r\n\r\nexport default LocalStorage;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport DefaultSettings from './DefaultSettings';\r\nimport BrowserNotifications from './BrowserNotifications';\r\nimport LocalStorage from './LocalStorage';\r\n\r\nReactDOM.render(<App basename={ process.env.PUBLIC_URL } defaultSettings={ new DefaultSettings() } notifications={ new BrowserNotifications() } storage={ new LocalStorage() }/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}