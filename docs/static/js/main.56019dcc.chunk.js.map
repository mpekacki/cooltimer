{"version":3,"sources":["UserSettings.js","Timer.js","Constants.js","SimpleTaskManager.js","App.js","serviceWorker.js","DefaultSettings.js","Settings.js","BrowserNotifications.js","LocalStorage.js","index.js"],"names":["UserSettings","props","componentWillReceiveProps","setState","onChangeWorkMinutes","event","onchange","workMinutes","target","value","onChangeShortBreakMinutes","shortBreakMinutes","onChangeLongBreakMinutes","longBreakMinutes","onChangeLongBreakFreq","longBreakFreq","state","class","htmlFor","type","this","onChange","id","React","Component","Timer","onClickStartWorking","setStateAndStorage","isWork","timerRunning","markTimerStart","timerSeconds","Date","now","onClickReturnToWork","lastTimerSeconds","newTimerSeconds","notifyCycleChange","onClickGoOnABreak","availableBreakSeconds","Math","round","tick","secondsDiff","timerLastUpdatedAt","tempState","totalWorkedSeconds","hiddenAvailableBreakSeconds","cycle","continousWork","secondsPassed","availableBreakSecondsIncrement","onTimerFinish","stateChange","newIsWork","newCycle","newAvailableBreakSeconds","autoStartTimers","Object","assign","showNotification","wasWork","oldTimerSeconds","timerEndAt","timerStartedAt","timerStartedWithSeconds","start","end","newState","onClickHoldWork","onClickResumeWork","onChangeContinousWork","checked","onChangeAutoStartTimers","setInterval","seconds","String","floor","padStart","hoursPart","hoursLabel","minutesPart","secondsPart","className","onClick","data-testid","formatSecondsAsTimer","formatSecondsAsText","cyclesUntilLongBreak","Constants","SimpleTaskManager","handleTextInputChange","taskInput","handleSaveClick","onTaskCreate","handleTaskSelected","onTaskSelected","placeholder","CREATE_TASK_PLACEHOLDER_TEXT","SAVE_NEW_TASK_BUTTON_TEXT","tasks","map","task","name","App","onClickReset","window","confirm","getStateForReset","onClickSettings","settingsVisible","storage","onChangeSettings","settings","getDefaultState","defaultSettings","notificationsGranted","events","stateForReset","handleTimerStateChange","timerState","handleShowNotification","notificationTitle","notifications","createNotification","handleEventCreated","eventTitle","undefined","selectedTask","newEvent","title","color","getTime","newEvents","length","slice","handleTaskCreated","newTasks","push","oldSelectedTask","forEach","e","parse","requestPermission","then","result","plugins","timeGridPlugin","Helmet","rel","href","integrity","crossOrigin","src","dayGridMonth","listPlugin","initialView","headerToolbar","right","slotDuration","Boolean","location","hostname","match","DefaultSettings","_workMinutes","_shortBreakMinutes","_longBreakMinutes","_longBreakFreq","BrowserNotifications","Notification","params","LocalStorage","JSON","localStorage","getItem","setItem","stringify","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.56019dcc.chunk.js","sourcesContent":["import React from 'react';\n\nclass UserSettings extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            workMinutes: props.workMinutes,\n            shortBreakMinutes: props.shortBreakMinutes,\n            longBreakMinutes: props.longBreakMinutes,\n            longBreakFreq: props.longBreakFreq\n        }\n        this.onchange = props.onchange;\n    }\n\n    componentWillReceiveProps = (props) => {\n        this.setState(props);\n    }\n\n    onChangeWorkMinutes = (event) => {\n        this.onchange({\n            workMinutes: event.target.value\n        });\n    }\n\n    onChangeShortBreakMinutes = (event) => {\n        this.onchange({\n            shortBreakMinutes: event.target.value\n        });\n    }\n\n    onChangeLongBreakMinutes = (event) => {\n        this.onchange({\n            longBreakMinutes: event.target.value\n        });\n    }\n\n    onChangeLongBreakFreq = (event) => {\n        this.onchange({\n            longBreakFreq: event.target.value\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <div class=\"d-flex flex-row form-group\">\n                    <label htmlFor=\"work-minutes\" class=\"p-2 col-form-label\">Work cycle minutes</label>\n                    <div class=\"p-2\">\n                        <input class=\"form-control\" type=\"number\" value={this.state.workMinutes} onChange={this.onChangeWorkMinutes} id=\"work-minutes\" />\n                    </div>\n                </div>\n                <div class=\"d-flex flex-row form-group\">\n                    <label htmlFor=\"short-break-minutes\" class=\"p-2 col-form-label\">Short break minutes</label>\n                    <div class=\"p-2\">\n                        <input class=\"form-control\" type=\"number\" value={this.state.shortBreakMinutes} onChange={this.onChangeShortBreakMinutes} id=\"short-break-minutes\" />\n                    </div>\n                </div>\n                <div class=\"d-flex flex-row form-group\">\n                    <label htmlFor=\"long-break-minutes\" class=\"p-2 col-form-label\">Long break minutes</label>\n                    <div class=\"p-2\">\n                        <input class=\"form-control\" type=\"number\" value={this.state.longBreakMinutes} onChange={this.onChangeLongBreakMinutes} id=\"long-break-minutes\" />\n                    </div>\n                </div>\n                <div class=\"d-flex flex-row form-group\">\n                    <label htmlFor=\"long-break-freq\" class=\"p-2 col-form-label\">Long break after n cycles</label>\n                    <div class=\"p-2\">\n                        <input class=\"form-control\" type=\"number\" value={this.state.longBreakFreq} onChange={this.onChangeLongBreakFreq} id=\"long-break-freq\" />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default UserSettings;","import React from 'react';\n\nclass Timer extends React.Component {\n    constructor(props) {\n        super(props);\n        // let state = JSON.parse(JSON.stringify(props));\n        // this.timerStartedAt = state.timerStartedAt;\n        // this.timerStartedWithSeconds = state.timerStartedWithSeconds;\n        // delete state.timerStartedAt;\n        // delete state.timerStartedWithSeconds;\n        // this.state = { ...state };\n        // console.log(props);\n        setInterval(this.tick, 1000);\n        this.tick();\n    }\n\n    // componentWillReceiveProps(props) {\n    //     // if (!this.timerStartedAt)\n    //     //     this.timerStartedAt = props.timerStartedAt;\n    //     // if (!this.timerStartedWithSeconds)\n    //     //     this.timerStartedWithSeconds = props.timerStartedWithSeconds;\n    //     let state = JSON.parse(JSON.stringify(props));\n    //     // delete state.timerStartedAt;\n    //     // delete state.timerStartedWithSeconds;\n    //     this.setState(state);\n    // }\n\n    formatSecondsAsTimer(seconds) {\n        let minutesPart = String(Math.floor(seconds / 60)).padStart(2, '0');\n        let secondsPart = String(seconds % 60).padStart(2, '0');\n        return minutesPart + ':' + secondsPart;\n    }\n\n    formatSecondsAsText(seconds) {\n        seconds = Math.round(seconds);\n        let hoursPart = Math.floor(seconds / 3600) + '';\n        let hoursLabel = hoursPart === '1' ? 'hour' : 'hours';\n        seconds = seconds % 3600;\n        let minutesPart = Math.floor(seconds / 60) + '';\n        let minutesLabel = minutesPart === '1' ? 'minute' : 'minutes';\n        seconds = seconds % 60;\n        let secondsPart = (seconds % 60) + '';\n        let secondsLabel = secondsPart === '1' ? 'second' : 'seconds';\n        return hoursPart + ' ' + hoursLabel + ' ' + minutesPart + ' ' + minutesLabel + ' ' + secondsPart + ' ' + secondsLabel;\n    }\n\n    onClickStartWorking = () => {\n        this.setStateAndStorage({\n            isWork: true,\n            timerRunning: true\n        });\n        this.markTimerStart(this.props.timerSeconds, Date.now());\n    }\n\n    onClickReturnToWork = () => {\n        const lastTimerSeconds = this.props.timerSeconds;\n        const newTimerSeconds = this.props.workMinutes * 60;\n        this.setStateAndStorage({\n            isWork: true,\n            timerSeconds: newTimerSeconds\n        });\n        this.notifyCycleChange(false, lastTimerSeconds, newTimerSeconds);\n    }\n\n    onClickGoOnABreak = () => {\n        let availableBreakSeconds = Math.round(this.props.availableBreakSeconds);\n        const lastTimerSeconds = this.props.timerSeconds;\n        this.setStateAndStorage({\n            isWork: false,\n            timerSeconds: availableBreakSeconds,\n            availableBreakSeconds: availableBreakSeconds\n        });\n        this.notifyCycleChange(true, lastTimerSeconds, availableBreakSeconds);\n    }\n\n    tick = () => {\n        if (!this.props.timerRunning) {\n            this.setStateAndStorage({\n                timerLastUpdatedAt: Date.now()\n            });\n            return;\n        }\n\n        let now = Date.now();\n        let secondsDiff = Math.round((now - this.props.timerLastUpdatedAt) / 1000);\n        this.tempState = {\n            isWork: this.props.isWork,\n            totalWorkedSeconds: this.props.totalWorkedSeconds,\n            availableBreakSeconds: this.props.availableBreakSeconds,\n            hiddenAvailableBreakSeconds: this.props.hiddenAvailableBreakSeconds,\n            timerLastUpdatedAt: this.props.timerLastUpdatedAt,\n            cycle: this.props.cycle,\n            continousWork: this.props.continousWork,\n            timerSeconds: this.props.timerSeconds\n        };\n\n        for (let secondsPassed = secondsDiff; secondsPassed > 0; secondsPassed--) {\n            this.tempState.timerSeconds--;\n            if (this.tempState.isWork) {\n                this.tempState.totalWorkedSeconds++;\n                let availableBreakSecondsIncrement = this.props.shortBreakMinutes * 1.0 / this.props.workMinutes;\n                if (this.tempState.availableBreakSeconds >= this.props.shortBreakMinutes * 60) {\n                    this.tempState.availableBreakSeconds += availableBreakSecondsIncrement;\n                } else {\n                    this.tempState.hiddenAvailableBreakSeconds += availableBreakSecondsIncrement;\n                }\n            } else {\n                this.tempState.availableBreakSeconds--;\n            }\n            this.tempState.timerLastUpdatedAt = now;\n            if (this.tempState.timerSeconds === 0) {\n                this.onTimerFinish();\n            }\n        }\n\n        this.setStateAndStorage(this.tempState);\n    }\n\n    onTimerFinish = () => {\n        let isWork = this.tempState.isWork;\n        let stateChange = {};\n        if (isWork) {\n            let newCycle = this.tempState.cycle + 1;\n            let newAvailableBreakSeconds = this.tempState.availableBreakSeconds;\n            if (newCycle === this.props.longBreakFreq) {\n                newCycle = 0;\n                newAvailableBreakSeconds += this.props.longBreakMinutes * 60 - this.props.shortBreakMinutes * 60;\n            }\n            newAvailableBreakSeconds += this.tempState.hiddenAvailableBreakSeconds;\n            newAvailableBreakSeconds = Math.round(newAvailableBreakSeconds);\n\n            let newTimerSeconds;\n            let newIsWork;\n\n            if (this.tempState.continousWork) {\n                newTimerSeconds = this.props.workMinutes * 60;\n                newIsWork = true;\n            } else {\n                newTimerSeconds = newAvailableBreakSeconds;\n                newIsWork = false;\n            }\n\n            stateChange = {\n                timerSeconds: newTimerSeconds,\n                availableBreakSeconds: newAvailableBreakSeconds,\n                hiddenAvailableBreakSeconds: 0,\n                isWork: newIsWork,\n                cycle: newCycle\n            };\n        } else {\n            stateChange = {\n                timerSeconds: this.props.workMinutes * 60,\n                isWork: true\n            };\n        }\n\n        stateChange.timerRunning = this.props.autoStartTimers;\n\n        const lastTimerSeconds = this.tempState.timerSeconds;\n        this.tempState = Object.assign(this.tempState, stateChange);\n\n        this.props.showNotification(isWork ? 'Work finished' : 'Break finished');\n        this.notifyCycleChange(isWork, lastTimerSeconds, this.tempState.timerSeconds);\n    }\n\n    notifyCycleChange = (wasWork, oldTimerSeconds, newTimerSeconds) => {\n        // console.log({\n        //     oldTimerSeconds: oldTimerSeconds,\n        //     newTimerSeconds: newTimerSeconds,\n        //     stateTimerStartedWithSeconds: this.timerStartedWithSeconds\n        // });\n        const timerEndAt = this.props.timerStartedAt + (this.props.timerStartedWithSeconds - oldTimerSeconds) * 1000;\n        const event = {\n            wasWork: wasWork,\n            start: this.props.timerStartedAt,\n            end: timerEndAt\n        };\n        this.props.onTimerFinish(event);\n        // console.log(event);\n        this.markTimerStart(newTimerSeconds, timerEndAt);\n    }\n\n    markTimerStart = (timerSeconds, timerStartedAt) => {\n        const newState = {\n            timerStartedAt: timerStartedAt,\n            timerStartedWithSeconds: timerSeconds\n        };\n        // console.log(newState);\n        // this.timerStartedAt = timerStartedAt;\n        // this.timerStartedWithSeconds = timerSeconds;\n        this.props.setStateAndStorage(newState);\n    }\n\n    onClickHoldWork = () => {\n        this.setStateAndStorage({\n            timerRunning: false\n        });\n        this.notifyCycleChange(this.props.isWork, this.props.timerSeconds, this.props.timerSeconds);\n    }\n\n    onClickResumeWork = () => {\n        this.setStateAndStorage({\n            timerRunning: true\n        });\n        this.markTimerStart(this.props.timerSeconds, Date.now());\n    }\n\n    onChangeContinousWork = (event) => {\n        this.setStateAndStorage({\n            continousWork: event.target.checked\n        });\n    }\n\n    onChangeAutoStartTimers = (event) => {\n        this.setStateAndStorage({\n            autoStartTimers: event.target.checked\n        });\n    }\n\n    setStateAndStorage = (newState) => {\n        // this.setState(newState);\n        this.props.setStateAndStorage(newState);\n    }\n\n    get cyclesUntilLongBreak() {\n        return this.props.longBreakFreq - this.props.cycle;\n    }\n\n    render() {\n        return (\n            <div>\n                <div class=\"row\">\n                    <div class=\"col-sm\">\n                        {this.props.timerRunning === true &&\n                            <button className=\"btn btn-warning\" onClick={this.onClickHoldWork}>Hold work</button>\n                        }\n                        {this.props.timerRunning === false &&\n                            <button className=\"btn btn-secondary\" onClick={this.onClickResumeWork} data-testid=\"resume-work-btn\">Resume work</button>\n                        }\n                        {this.props.isWork === null &&\n                            <button className=\"btn btn-success\" onClick={this.onClickStartWorking} data-testid=\"start-working-btn\">Start working</button>\n                        }\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-sm\">\n                        <h1 data-testid=\"timer\">{this.formatSecondsAsTimer(this.props.timerSeconds)}</h1>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-sm\">\n                        {(this.props.isWork === true && this.props.availableBreakSeconds) ?\n                            <>\n                                <button className=\"btn btn-success\" onClick={this.onClickGoOnABreak}>Go on a break</button>\n                            </> : null\n                        }\n                        {this.props.isWork === false ?\n                            <>\n                                <button className=\"btn btn-secondary\" onClick={this.onClickReturnToWork}>Return to work</button>\n                            </> : null\n                        }\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-sm font-weight-light text-md-right\">\n                        Total time worked:\n            </div>\n                    <div class=\"col-sm text-md-left\" data-testid=\"totalWorkedTime\">\n                        {this.formatSecondsAsText(this.props.totalWorkedSeconds)}\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-sm font-weight-light text-md-right\">\n                        Available break time:\n            </div>\n                    <div class=\"col-sm text-md-left\" data-testid=\"availableBreakTime\">\n                        {this.formatSecondsAsText(this.props.availableBreakSeconds)}\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-sm font-weight-light text-md-right\">\n                        Cycles until long break ({this.props.longBreakMinutes} minutes):\n            </div>\n                    <div class=\"col-sm text-md-left\" data-testid=\"longBreakInfo\">\n                        {this.cyclesUntilLongBreak}\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-sm\">\n                        <div class=\"form-check\">\n                            <input class=\"form-check-input\" type=\"checkbox\" value=\"\" onChange={this.onChangeContinousWork}\n                                checked={this.props.continousWork} data-testid=\"cont-work\" id=\"cont-work-check\" />\n                            <label class=\"form-check-label\" htmlFor=\"cont-work-check\">\n                                Continuous work\n                </label>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-sm\">\n                        <div class=\"form-check\">\n                            <input class=\"form-check-input\" type=\"checkbox\" value=\"\" onChange={this.onChangeAutoStartTimers}\n                                checked={this.props.autoStartTimers} data-testid=\"auto-start-timers\" id=\"auto-start-timers-check\" />\n                            <label class=\"form-check-label\" htmlFor=\"auto-start-timers-check\">\n                                Start timers automatically\n                </label>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Timer;","export default class Constants {\n    static get CREATE_TASK_PLACEHOLDER_TEXT() {\n        return 'Enter task name...';\n    }\n\n    static get SAVE_NEW_TASK_BUTTON_TEXT() {\n        return 'Save new task';\n    }\n}","import React from 'react';\nimport Constants from './Constants';\n\nclass SimpleTaskManager extends React.Component {\n  handleTextInputChange = (event) => {\n    this.setState({ taskInput: event.target.value });\n  }\n\n  handleSaveClick = () => {\n    this.props.onTaskCreate(this.state.taskInput);\n  }\n\n  handleTaskSelected = (event) => {\n    this.props.onTaskSelected(event.target.value);\n  }\n\n  render() {\n    return (\n      <div>\n        <input type=\"text\" onChange={this.handleTextInputChange} placeholder={Constants.CREATE_TASK_PLACEHOLDER_TEXT} />\n        <button onClick={this.handleSaveClick}>{Constants.SAVE_NEW_TASK_BUTTON_TEXT}</button>\n        {this.props && this.props.tasks && this.props.tasks.map(\n          task => {\n            return (\n              <div>\n                <input type=\"radio\" id={task} name=\"task\" value={task} onChange={this.handleTaskSelected}></input>\n                <label htmlFor={task}>{task}</label>\n              </div>\n            )\n          }\n        )}\n      </div>\n    );\n  }\n}\n\nexport default SimpleTaskManager;","import React from 'react';\nimport { Helmet } from 'react-helmet';\nimport './App.css';\nimport UserSettings from './UserSettings';\nimport Timer from './Timer';\nimport FullCalendar from '@fullcalendar/react';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport dayGridMonth from '@fullcalendar/daygrid';\nimport listPlugin from '@fullcalendar/list';\nimport SimpleTaskManager from './SimpleTaskManager';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.defaultSettings = props.defaultSettings;\n    this.storage = props.storage;\n    this.state = this.getDefaultState();\n    if (this.storage && this.storage.state) {\n      this.state = Object.assign(this.state, this.storage.state);\n      this.state.events.forEach(e => {\n        e.start = new Date(Date.parse(e.start));\n        e.end = new Date(Date.parse(e.end));\n      });\n    }\n    if (props.notifications) {\n      this.notifications = props.notifications;\n      this.notifications.requestPermission().then((result) => {\n        if (result === 'granted') {\n          this.notificationsGranted = true;\n        }\n      });\n    }\n    this.plugins = [timeGridPlugin];\n  }\n\n  onClickReset = () => {\n    if (window.confirm(\"Are you sure you want to reset everything to inital state?\")) {\n      this.setStateAndStorage(this.getStateForReset());\n    }\n  }\n\n  onClickSettings = () => {\n    this.setState({\n      settingsVisible: !this.state.settingsVisible\n    });\n  }\n\n  setStateAndStorage = (state) => {\n    this.setState(state);\n    if (this.storage) {\n      this.storage.state = Object.assign(this.state, state);\n    }\n  }\n\n  onChangeSettings = (settings) => {\n    this.setStateAndStorage(settings);\n  }\n\n  getDefaultState = () => {\n    return {\n      timerSeconds: this.defaultSettings.workMinutes * 60,\n      totalWorkedSeconds: 0,\n      isWork: null,\n      availableBreakSeconds: 0,\n      hiddenAvailableBreakSeconds: 0,\n      cycle: 0,\n      notificationsGranted: false,\n      timerRunning: null,\n      continousWork: false,\n      timerLastUpdatedAt: Date.now(),\n      autoStartTimers: true,\n      workMinutes: this.defaultSettings.workMinutes,\n      shortBreakMinutes: this.defaultSettings.shortBreakMinutes,\n      longBreakMinutes: this.defaultSettings.longBreakMinutes,\n      longBreakFreq: this.defaultSettings.longBreakFreq,\n      settingsVisible: false,\n      events: [],\n      timerStartedAt: null,\n      timerStartedWithSeconds: null,\n      tasks: []\n    };\n  }\n\n  getStateForReset = () => {\n    const stateForReset = this.getDefaultState();\n    stateForReset.continousWork = this.state.continousWork;\n    stateForReset.autoStartTimers = this.state.autoStartTimers;\n    stateForReset.workMinutes = this.state.workMinutes;\n    stateForReset.shortBreakMinutes = this.state.shortBreakMinutes;\n    stateForReset.longBreakMinutes = this.state.longBreakMinutes;\n    stateForReset.longBreakFreq = this.state.longBreakFreq;\n    stateForReset.timerSeconds = this.state.workMinutes * 60;\n    stateForReset.events = this.state.events;\n    return stateForReset;\n  }\n\n  handleTimerStateChange = (timerState) => {\n    if (timerState.timerStartedAt < this.state.timerStartedAt) {\n      timerState.timerStartedAt = this.state.timerStartedAt;\n    }\n    this.setStateAndStorage(timerState);\n  }\n\n  handleShowNotification = (notificationTitle) => {\n    if (this.notifications && this.notificationsGranted) {\n      this.notifications.createNotification(notificationTitle);\n    }\n  }\n\n  handleEventCreated = (event) => {\n    let eventTitle = event.wasWork ? 'Work' : 'Break';\n    if (this.state.selectedTask !== undefined) {\n      eventTitle += ' (' + this.state.selectedTask + ')';\n    }\n    const newEvent = {\n      title: eventTitle,\n      isWork: event.wasWork,\n      start: new Date(event.start),\n      end: new Date(event.end),\n      color: event.wasWork ? '#3788d8' : 'orange',\n      task: this.state.selectedTask\n    };\n    if (newEvent.start.getTime() === newEvent.end.getTime()) {\n      return;\n    }\n    let newEvents = [...this.state.events, newEvent];\n    if (newEvents.length > 1 && newEvents[newEvents.length - 1].isWork === newEvents[newEvents.length - 2].isWork\n      && newEvents[newEvents.length - 2].end.getTime() === newEvents[newEvents.length - 1].start.getTime() \n      && newEvents[newEvents.length - 1].task === newEvents[newEvents.length - 2].task) {\n      newEvents = newEvents.slice(0, newEvents.length - 1);\n      newEvents[newEvents.length - 1].end = new Date(event.end);\n    }\n    this.setStateAndStorage({\n      events: newEvents\n    });\n  }\n\n  handleTaskCreated = (task) => {\n    let newTasks = this.state.tasks;\n    newTasks.push(task);\n    this.setStateAndStorage({\n      tasks: newTasks\n    });\n  }\n\n  handleTaskSelected = (task) => {\n    const oldSelectedTask = this.state.selectedTask;\n    const end = this.state.timerStartedAt + (this.state.timerStartedWithSeconds - this.state.timerSeconds) * 1000;\n    if (oldSelectedTask !== undefined) {\n      this.handleEventCreated({\n        wasWork: this.state.isWork,\n        start: this.state.timerStartedAt,\n        end: end\n      });\n    }\n    this.setStateAndStorage({\n      timerStartedAt: end,\n      timerStartedWithSeconds: this.state.timerSeconds,\n      selectedTask: task\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Helmet>\n          <title>Timer</title>\n        </Helmet>\n\n        <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n          integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossOrigin=\"anonymous\"></link>\n\n        <script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossOrigin=\"anonymous\"></script>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\" integrity=\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\" crossOrigin=\"anonymous\"></script>\n        <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\" integrity=\"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\" crossOrigin=\"anonymous\"></script>\n\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-sm offset-sm-11\">\n              <button className=\"btn\" onClick={this.onClickReset} data-testid=\"reset-btn\">Reset</button>\n            </div>\n          </div>\n          <Timer timerSeconds={this.state.timerSeconds}\n            totalWorkedSeconds={this.state.totalWorkedSeconds}\n            isWork={this.state.isWork}\n            availableBreakSeconds={this.state.availableBreakSeconds}\n            hiddenAvailableBreakSeconds={this.state.hiddenAvailableBreakSeconds}\n            cycle={this.state.cycle}\n            timerRunning={this.state.timerRunning}\n            continousWork={this.state.continousWork}\n            timerLastUpdatedAt={this.state.timerLastUpdatedAt}\n            autoStartTimers={this.state.autoStartTimers}\n            workMinutes={this.state.workMinutes}\n            shortBreakMinutes={this.state.shortBreakMinutes}\n            longBreakMinutes={this.state.longBreakMinutes}\n            longBreakFreq={this.state.longBreakFreq}\n            timerStartedAt={this.state.timerStartedAt}\n            timerStartedWithSeconds={this.state.timerStartedWithSeconds}\n            setStateAndStorage={this.handleTimerStateChange}\n            showNotification={this.handleShowNotification}\n            onTimerFinish={this.handleEventCreated} />\n          <button className=\"btn m-2\" type=\"button\" onClick={this.onClickSettings}>\n            Settings\n          </button>\n          <div className={this.state.settingsVisible ? 'collapse show' : 'collapse'}>\n            <div className=\"card card-body row\">\n              <UserSettings\n                workMinutes={this.state.workMinutes} shortBreakMinutes={this.state.shortBreakMinutes}\n                longBreakMinutes={this.state.longBreakMinutes} longBreakFreq={this.state.longBreakFreq}\n                onchange={this.onChangeSettings} />\n            </div>\n          </div>\n          <div className=\"row\">\n            <SimpleTaskManager onTaskCreate={this.handleTaskCreated} onTaskSelected={this.handleTaskSelected} tasks={this.state.tasks} />\n          </div>\n          <div className=\"card card-body\">\n            <FullCalendar events={this.state.events} plugins={[timeGridPlugin, dayGridMonth, listPlugin]} initialView=\"timeGridWeek\" headerToolbar={\n              { right: 'today prev,next dayGridMonth,timeGridWeek,timeGridDay listWeek' }\n            } slotDuration='00:15:00' />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import Settings from './Settings';\r\n\r\nclass DefaultSettings extends Settings {\r\n  constructor() {\r\n    super(25, 5, 10, 4, 480);\r\n  }\r\n}\r\n\r\nexport default DefaultSettings;","class Settings {\r\n    constructor(workMinutes, shortBreakMinutes, longBreakMinutes, longBreakFreq) {\r\n        this._workMinutes = workMinutes;\r\n        this._shortBreakMinutes = shortBreakMinutes;\r\n        this._longBreakMinutes = longBreakMinutes;\r\n        this._longBreakFreq = longBreakFreq;\r\n    }\r\n\r\n    get workMinutes() {\r\n        return this._workMinutes;\r\n    }\r\n\r\n    get shortBreakMinutes() {\r\n        return this._shortBreakMinutes;\r\n    }\r\n\r\n    get longBreakMinutes() {\r\n        return this._longBreakMinutes;\r\n    }\r\n\r\n    get longBreakFreq() {\r\n        return this._longBreakFreq;\r\n    }\r\n}\r\n\r\nexport default Settings;","class BrowserNotifications {\r\n    requestPermission() {\r\n        return Notification.requestPermission();\r\n    }\r\n\r\n    createNotification(title, params) {\r\n        new Notification(title, params);\r\n    }\r\n}\r\n\r\nexport default BrowserNotifications;","class LocalStorage {\r\n    get state() {\r\n        return JSON.parse(localStorage.getItem('timer_state'));\r\n    }\r\n\r\n    set state(state) {\r\n        localStorage.setItem('timer_state', JSON.stringify(state));\r\n    }\r\n}\r\n\r\nexport default LocalStorage;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport DefaultSettings from './DefaultSettings';\r\nimport BrowserNotifications from './BrowserNotifications';\r\nimport LocalStorage from './LocalStorage';\r\n\r\nReactDOM.render(<App basename={ process.env.PUBLIC_URL } defaultSettings={ new DefaultSettings() } notifications={ new BrowserNotifications() } storage={ new LocalStorage() }/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}