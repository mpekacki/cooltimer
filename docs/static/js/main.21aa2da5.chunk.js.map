{"version":3,"sources":["UserSettings.js","Timer.js","App.js","serviceWorker.js","DefaultSettings.js","Settings.js","BrowserNotifications.js","LocalStorage.js","index.js"],"names":["UserSettings","props","componentWillReceiveProps","setState","onChangeWorkMinutes","event","onchange","workMinutes","target","value","onChangeShortBreakMinutes","shortBreakMinutes","onChangeLongBreakMinutes","longBreakMinutes","onChangeLongBreakFreq","longBreakFreq","state","class","for","type","this","onChange","id","React","Component","Timer","onClickStartWorking","setStateAndStorage","isWork","timerRunning","markTimerStart","timerSeconds","Date","now","onClickReturnToWork","lastTimerSeconds","newTimerSeconds","notifyCycleChange","onClickGoOnABreak","availableBreakSeconds","Math","round","tick","secondsDiff","timerLastUpdatedAt","tempState","secondsPassed","totalWorkedSeconds","availableBreakSecondsIncrement","hiddenAvailableBreakSeconds","onTimerFinish","stateChange","newIsWork","newCycle","cycle","newAvailableBreakSeconds","continousWork","autoStartTimers","Object","assign","showNotification","wasWork","oldTimerSeconds","timerEndAt","timerStartedAt","timerStartedWithSeconds","start","end","newState","onClickHoldWork","onClickResumeWork","onChangeContinousWork","checked","onChangeAutoStartTimers","JSON","parse","stringify","setInterval","seconds","String","floor","padStart","hoursPart","hoursLabel","minutesPart","secondsPart","className","onClick","data-testid","formatSecondsAsTimer","formatSecondsAsText","cyclesUntilLongBreak","htmlFor","App","onClickReset","window","confirm","getStateForReset","onClickSettings","settingsVisible","storage","onChangeSettings","settings","getDefaultState","defaultSettings","notificationsGranted","events","stateForReset","handleTimerStateChange","timerState","handleShowNotification","notificationTitle","notifications","createNotification","handleTimerFinish","newEvents","title","color","length","getTime","slice","forEach","e","requestPermission","then","result","plugins","timeGridPlugin","Helmet","rel","href","integrity","crossorigin","src","dayGridMonth","listPlugin","initialView","headerToolbar","right","slotDuration","Boolean","location","hostname","match","DefaultSettings","_workMinutes","_shortBreakMinutes","_longBreakMinutes","_longBreakFreq","BrowserNotifications","Notification","params","LocalStorage","localStorage","getItem","setItem","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.21aa2da5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass UserSettings extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            workMinutes: props.workMinutes,\r\n            shortBreakMinutes: props.shortBreakMinutes,\r\n            longBreakMinutes: props.longBreakMinutes,\r\n            longBreakFreq: props.longBreakFreq\r\n        }\r\n        this.onchange = props.onchange;\r\n    }\r\n\r\n    componentWillReceiveProps = (props) => {\r\n        this.setState(props);\r\n    }\r\n\r\n    onChangeWorkMinutes = (event) => {\r\n        this.onchange({\r\n            workMinutes: event.target.value\r\n        });\r\n    }\r\n\r\n    onChangeShortBreakMinutes = (event) => {\r\n        this.onchange({\r\n            shortBreakMinutes: event.target.value\r\n        });\r\n    }\r\n\r\n    onChangeLongBreakMinutes = (event) => {\r\n        this.onchange({\r\n            longBreakMinutes: event.target.value\r\n        });\r\n    }\r\n\r\n    onChangeLongBreakFreq = (event) => {\r\n        this.onchange({\r\n            longBreakFreq: event.target.value\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div class=\"d-flex flex-row form-group\">\r\n                    <label for=\"work-minutes\" class=\"p-2 col-form-label\">Work cycle minutes</label>\r\n                    <div class=\"p-2\">\r\n                        <input class=\"form-control\" type=\"number\" value={this.state.workMinutes} onChange={this.onChangeWorkMinutes} id=\"work-minutes\" />\r\n                    </div>\r\n                </div>\r\n                <div class=\"d-flex flex-row form-group\">\r\n                    <label for=\"short-break-minutes\" class=\"p-2 col-form-label\">Short break minutes</label>\r\n                    <div class=\"p-2\">\r\n                        <input class=\"form-control\" type=\"number\" value={this.state.shortBreakMinutes} onChange={this.onChangeShortBreakMinutes} id=\"short-break-minutes\" />\r\n                    </div>\r\n                </div>\r\n                <div class=\"d-flex flex-row form-group\">\r\n                    <label for=\"long-break-minutes\" class=\"p-2 col-form-label\">Long break minutes</label>\r\n                    <div class=\"p-2\">\r\n                        <input class=\"form-control\" type=\"number\" value={this.state.longBreakMinutes} onChange={this.onChangeLongBreakMinutes} id=\"long-break-minutes\" />\r\n                    </div>\r\n                </div>\r\n                <div class=\"d-flex flex-row form-group\">\r\n                    <label for=\"long-break-freq\" class=\"p-2 col-form-label\">Long break after n cycles</label>\r\n                    <div class=\"p-2\">\r\n                        <input class=\"form-control\" type=\"number\" value={this.state.longBreakFreq} onChange={this.onChangeLongBreakFreq} id=\"long-break-freq\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UserSettings;","import React from 'react';\r\n\r\nclass Timer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        let state = JSON.parse(JSON.stringify(props));\r\n        this.timerStartedAt = state.timerStartedAt;\r\n        this.timerStartedWithSeconds = state.timerStartedWithSeconds;\r\n        delete state.timerStartedAt;\r\n        delete state.timerStartedWithSeconds;\r\n        this.state = { ...state };\r\n        // console.log(props);\r\n        setInterval(this.tick, 1000);\r\n        this.tick();\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        if (!this.timerStartedAt)\r\n            this.timerStartedAt = props.timerStartedAt;\r\n        if (!this.timerStartedWithSeconds)\r\n            this.timerStartedWithSeconds = props.timerStartedWithSeconds;\r\n        let state = JSON.parse(JSON.stringify(props));\r\n        delete state.timerStartedAt;\r\n        delete state.timerStartedWithSeconds;\r\n        this.setState(state);\r\n    }\r\n\r\n    formatSecondsAsTimer(seconds) {\r\n        let minutesPart = String(Math.floor(seconds / 60)).padStart(2, '0');\r\n        let secondsPart = String(seconds % 60).padStart(2, '0');\r\n        return minutesPart + ':' + secondsPart;\r\n    }\r\n\r\n    formatSecondsAsText(seconds) {\r\n        seconds = Math.round(seconds);\r\n        let hoursPart = Math.floor(seconds / 3600) + '';\r\n        let hoursLabel = hoursPart === '1' ? 'hour' : 'hours';\r\n        seconds = seconds % 3600;\r\n        let minutesPart = Math.floor(seconds / 60) + '';\r\n        let minutesLabel = minutesPart === '1' ? 'minute' : 'minutes';\r\n        seconds = seconds % 60;\r\n        let secondsPart = (seconds % 60) + '';\r\n        let secondsLabel = secondsPart === '1' ? 'second' : 'seconds';\r\n        return hoursPart + ' ' + hoursLabel + ' ' + minutesPart + ' ' + minutesLabel + ' ' + secondsPart + ' ' + secondsLabel;\r\n    }\r\n\r\n    onClickStartWorking = () => {\r\n        this.setStateAndStorage({\r\n            isWork: true,\r\n            timerRunning: true\r\n        });\r\n        this.markTimerStart(this.state.timerSeconds, Date.now());\r\n    }\r\n\r\n    onClickReturnToWork = () => {\r\n        const lastTimerSeconds = this.state.timerSeconds;\r\n        const newTimerSeconds = this.state.workMinutes * 60;\r\n        this.setStateAndStorage({\r\n            isWork: true,\r\n            timerSeconds: newTimerSeconds\r\n        });\r\n        this.notifyCycleChange(false, lastTimerSeconds, newTimerSeconds);\r\n    }\r\n\r\n    onClickGoOnABreak = () => {\r\n        let availableBreakSeconds = Math.round(this.state.availableBreakSeconds);\r\n        const lastTimerSeconds = this.state.timerSeconds;\r\n        this.setStateAndStorage({\r\n            isWork: false,\r\n            timerSeconds: availableBreakSeconds,\r\n            availableBreakSeconds: availableBreakSeconds\r\n        });\r\n        this.notifyCycleChange(true, lastTimerSeconds, availableBreakSeconds);\r\n    }\r\n\r\n    tick = () => {\r\n        if (!this.state.timerRunning) {\r\n            this.setStateAndStorage({\r\n                timerLastUpdatedAt: Date.now()\r\n            });\r\n            return;\r\n        }\r\n\r\n        let now = Date.now();\r\n        let secondsDiff = Math.round((now - this.state.timerLastUpdatedAt) / 1000);\r\n        this.tempState = this.state;\r\n\r\n        for (let secondsPassed = secondsDiff; secondsPassed > 0; secondsPassed--) {\r\n            this.tempState.timerSeconds--;\r\n            if (this.tempState.isWork) {\r\n                this.tempState.totalWorkedSeconds++;\r\n                let availableBreakSecondsIncrement = this.state.shortBreakMinutes * 1.0 / this.state.workMinutes;\r\n                if (this.tempState.availableBreakSeconds >= this.state.shortBreakMinutes * 60) {\r\n                    this.tempState.availableBreakSeconds += availableBreakSecondsIncrement;\r\n                } else {\r\n                    this.tempState.hiddenAvailableBreakSeconds += availableBreakSecondsIncrement;\r\n                }\r\n            } else {\r\n                this.tempState.availableBreakSeconds--;\r\n            }\r\n            this.tempState.timerLastUpdatedAt = now;\r\n            if (this.tempState.timerSeconds === 0) {\r\n                this.onTimerFinish();\r\n            }\r\n        }\r\n\r\n        this.setStateAndStorage(this.tempState);\r\n    }\r\n\r\n    onTimerFinish = () => {\r\n        let isWork = this.tempState.isWork;\r\n        let stateChange = {};\r\n        if (isWork) {\r\n            let newCycle = this.tempState.cycle + 1;\r\n            let newAvailableBreakSeconds = this.tempState.availableBreakSeconds;\r\n            if (newCycle === this.state.longBreakFreq) {\r\n                newCycle = 0;\r\n                newAvailableBreakSeconds += this.state.longBreakMinutes * 60 - this.state.shortBreakMinutes * 60;\r\n            }\r\n            newAvailableBreakSeconds += this.tempState.hiddenAvailableBreakSeconds;\r\n            newAvailableBreakSeconds = Math.round(newAvailableBreakSeconds);\r\n\r\n            let newTimerSeconds;\r\n            let newIsWork;\r\n\r\n            if (this.tempState.continousWork) {\r\n                newTimerSeconds = this.state.workMinutes * 60;\r\n                newIsWork = true;\r\n            } else {\r\n                newTimerSeconds = newAvailableBreakSeconds;\r\n                newIsWork = false;\r\n            }\r\n\r\n            stateChange = {\r\n                timerSeconds: newTimerSeconds,\r\n                availableBreakSeconds: newAvailableBreakSeconds,\r\n                hiddenAvailableBreakSeconds: 0,\r\n                isWork: newIsWork,\r\n                cycle: newCycle\r\n            };\r\n        } else {\r\n            stateChange = {\r\n                timerSeconds: this.state.workMinutes * 60,\r\n                isWork: true\r\n            };\r\n        }\r\n\r\n        stateChange.timerRunning = this.state.autoStartTimers;\r\n\r\n        const lastTimerSeconds = this.tempState.timerSeconds;\r\n        this.tempState = Object.assign(this.tempState, stateChange);\r\n\r\n        this.props.showNotification(isWork ? 'Work finished' : 'Break finished');\r\n        this.notifyCycleChange(isWork, lastTimerSeconds, this.tempState.timerSeconds);\r\n    }\r\n\r\n    notifyCycleChange = (wasWork, oldTimerSeconds, newTimerSeconds) => {\r\n        // console.log({\r\n        //     oldTimerSeconds: oldTimerSeconds,\r\n        //     newTimerSeconds: newTimerSeconds,\r\n        //     stateTimerStartedWithSeconds: this.timerStartedWithSeconds\r\n        // });\r\n        const timerEndAt = this.timerStartedAt + (this.timerStartedWithSeconds - oldTimerSeconds) * 1000;\r\n        const event = {\r\n            wasWork: wasWork,\r\n            start: this.timerStartedAt,\r\n            end: timerEndAt\r\n        };\r\n        this.props.onTimerFinish(event);\r\n        // console.log(event);\r\n        this.markTimerStart(newTimerSeconds, timerEndAt);\r\n    }\r\n\r\n    markTimerStart = (timerSeconds, timerStartedAt) => {\r\n        const newState = {\r\n            timerStartedAt: timerStartedAt,\r\n            timerStartedWithSeconds: timerSeconds\r\n        };\r\n        // console.log(newState);\r\n        this.timerStartedAt = timerStartedAt;\r\n        this.timerStartedWithSeconds = timerSeconds;\r\n        this.props.setStateAndStorage(newState);\r\n    }\r\n\r\n    onClickHoldWork = () => {\r\n        this.setStateAndStorage({\r\n            timerRunning: false\r\n        });\r\n        this.notifyCycleChange(this.state.isWork, this.state.timerSeconds, this.state.timerSeconds);\r\n    }\r\n\r\n    onClickResumeWork = () => {\r\n        this.setStateAndStorage({\r\n            timerRunning: true\r\n        });\r\n        this.markTimerStart(this.state.timerSeconds, Date.now());\r\n    }\r\n\r\n    onChangeContinousWork = (event) => {\r\n        this.setStateAndStorage({\r\n            continousWork: event.target.checked\r\n        });\r\n    }\r\n\r\n    onChangeAutoStartTimers = (event) => {\r\n        this.setStateAndStorage({\r\n            autoStartTimers: event.target.checked\r\n        });\r\n    }\r\n\r\n    setStateAndStorage = (newState) => {\r\n        this.setState(newState);\r\n        this.props.setStateAndStorage(newState);\r\n    }\r\n\r\n    get cyclesUntilLongBreak() {\r\n        return this.state.longBreakFreq - this.state.cycle;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div class=\"row\">\r\n                    <div class=\"col-sm\">\r\n                        {this.state.timerRunning === true &&\r\n                            <button className=\"btn btn-warning\" onClick={this.onClickHoldWork}>Hold work</button>\r\n                        }\r\n                        {this.state.timerRunning === false &&\r\n                            <button className=\"btn btn-secondary\" onClick={this.onClickResumeWork} data-testid=\"resume-work-btn\">Resume work</button>\r\n                        }\r\n                        {this.state.isWork === null &&\r\n                            <button className=\"btn btn-success\" onClick={this.onClickStartWorking} data-testid=\"start-working-btn\">Start working</button>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"col-sm\">\r\n                        <h1 data-testid=\"timer\">{this.formatSecondsAsTimer(this.state.timerSeconds)}</h1>\r\n                    </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"col-sm\">\r\n                        {(this.state.isWork === true && this.state.availableBreakSeconds) ?\r\n                            <>\r\n                                <button className=\"btn btn-success\" onClick={this.onClickGoOnABreak}>Go on a break</button>\r\n                            </> : null\r\n                        }\r\n                        {this.state.isWork === false ?\r\n                            <>\r\n                                <button className=\"btn btn-secondary\" onClick={this.onClickReturnToWork}>Return to work</button>\r\n                            </> : null\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"col-sm font-weight-light text-md-right\">\r\n                        Total time worked:\r\n            </div>\r\n                    <div class=\"col-sm text-md-left\" data-testid=\"totalWorkedTime\">\r\n                        {this.formatSecondsAsText(this.state.totalWorkedSeconds)}\r\n                    </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"col-sm font-weight-light text-md-right\">\r\n                        Available break time:\r\n            </div>\r\n                    <div class=\"col-sm text-md-left\" data-testid=\"availableBreakTime\">\r\n                        {this.formatSecondsAsText(this.state.availableBreakSeconds)}\r\n                    </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"col-sm font-weight-light text-md-right\">\r\n                        Cycles until long break ({this.state.longBreakMinutes} minutes):\r\n            </div>\r\n                    <div class=\"col-sm text-md-left\" data-testid=\"longBreakInfo\">\r\n                        {this.cyclesUntilLongBreak}\r\n                    </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"col-sm\">\r\n                        <div class=\"form-check\">\r\n                            <input class=\"form-check-input\" type=\"checkbox\" value=\"\" onChange={this.onChangeContinousWork}\r\n                                checked={this.state.continousWork} data-testid=\"cont-work\" id=\"cont-work-check\" />\r\n                            <label class=\"form-check-label\" htmlFor=\"cont-work-check\">\r\n                                Continuous work\r\n                </label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"col-sm\">\r\n                        <div class=\"form-check\">\r\n                            <input class=\"form-check-input\" type=\"checkbox\" value=\"\" onChange={this.onChangeAutoStartTimers}\r\n                                checked={this.state.autoStartTimers} data-testid=\"auto-start-timers\" id=\"auto-start-timers-check\" />\r\n                            <label class=\"form-check-label\" htmlFor=\"auto-start-timers-check\">\r\n                                Start timers automatically\r\n                </label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Timer;","import React from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport './App.css';\r\nimport UserSettings from './UserSettings';\r\nimport Timer from './Timer';\r\nimport FullCalendar from '@fullcalendar/react';\r\nimport timeGridPlugin from '@fullcalendar/timegrid';\r\nimport dayGridMonth from '@fullcalendar/daygrid';\r\nimport listPlugin from '@fullcalendar/list';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.defaultSettings = props.defaultSettings;\r\n    this.storage = props.storage;\r\n    this.state = this.getDefaultState();\r\n    if (this.storage && this.storage.state) {\r\n      this.state = Object.assign(this.state, this.storage.state);\r\n      this.state.events.forEach(e => {\r\n        e.start = new Date(Date.parse(e.start));\r\n        e.end = new Date(Date.parse(e.end));\r\n      });\r\n    }\r\n    if (props.notifications) {\r\n      this.notifications = props.notifications;\r\n      this.notifications.requestPermission().then((result) => {\r\n        if (result === 'granted') {\r\n          this.notificationsGranted = true;\r\n        }\r\n      });\r\n    }\r\n    this.plugins = [timeGridPlugin];\r\n  }\r\n\r\n  onClickReset = () => {\r\n    if (window.confirm(\"Are you sure you want to reset everything to inital state?\")) {\r\n      this.setStateAndStorage(this.getStateForReset());\r\n    }\r\n  }\r\n\r\n  onClickSettings = () => {\r\n    this.setState({\r\n      settingsVisible: !this.state.settingsVisible\r\n    });\r\n  }\r\n\r\n  setStateAndStorage = (state) => {\r\n    this.setState(state);\r\n    if (this.storage) {\r\n      this.storage.state = Object.assign(this.state, state);\r\n    }\r\n  }\r\n\r\n  onChangeSettings = (settings) => {\r\n    this.setStateAndStorage(settings);\r\n  }\r\n\r\n  getDefaultState = () => {\r\n    return {\r\n      timerSeconds: this.defaultSettings.workMinutes * 60,\r\n      totalWorkedSeconds: 0,\r\n      isWork: null,\r\n      availableBreakSeconds: 0,\r\n      hiddenAvailableBreakSeconds: 0,\r\n      cycle: 0,\r\n      notificationsGranted: false,\r\n      timerRunning: null,\r\n      continousWork: false,\r\n      timerLastUpdatedAt: Date.now(),\r\n      autoStartTimers: true,\r\n      workMinutes: this.defaultSettings.workMinutes,\r\n      shortBreakMinutes: this.defaultSettings.shortBreakMinutes,\r\n      longBreakMinutes: this.defaultSettings.longBreakMinutes,\r\n      longBreakFreq: this.defaultSettings.longBreakFreq,\r\n      settingsVisible: false,\r\n      events: [],\r\n      timerStartedAt: null,\r\n      timerStartedWithSeconds: null\r\n    };\r\n  }\r\n\r\n  getStateForReset = () => {\r\n    const stateForReset = this.getDefaultState();\r\n    stateForReset.continousWork = this.state.continousWork;\r\n    stateForReset.autoStartTimers = this.state.autoStartTimers;\r\n    stateForReset.workMinutes = this.state.workMinutes;\r\n    stateForReset.shortBreakMinutes = this.state.shortBreakMinutes;\r\n    stateForReset.longBreakMinutes = this.state.longBreakMinutes;\r\n    stateForReset.longBreakFreq = this.state.longBreakFreq;\r\n    stateForReset.timerSeconds = this.state.workMinutes * 60;\r\n    stateForReset.events = this.state.events;\r\n    return stateForReset;\r\n  }\r\n\r\n  handleTimerStateChange = (timerState) => {\r\n    if (timerState.timerStartedAt < this.state.timerStartedAt) {\r\n      timerState.timerStartedAt = this.state.timerStartedAt;\r\n    }\r\n    this.setStateAndStorage(timerState);\r\n  }\r\n\r\n  handleShowNotification = (notificationTitle) => {\r\n    if (this.notifications && this.notificationsGranted) {\r\n      this.notifications.createNotification(notificationTitle);\r\n    }\r\n  }\r\n\r\n  handleTimerFinish = (event) => {\r\n    let newEvents = [...this.state.events, {\r\n      title: event.wasWork ? 'Work' : 'Break',\r\n      isWork: event.wasWork,\r\n      start: new Date(event.start),\r\n      end: new Date(event.end),\r\n      color: event.wasWork ? '#3788d8' : 'orange'\r\n    }];\r\n    if (newEvents.length > 1 && newEvents[newEvents.length - 1].isWork === newEvents[newEvents.length - 2].isWork\r\n      && newEvents[newEvents.length - 2].end.getTime() === newEvents[newEvents.length - 1].start.getTime()) {\r\n      newEvents = newEvents.slice(0, newEvents.length - 1);\r\n      newEvents[newEvents.length - 1].end = new Date(event.end);\r\n    }\r\n    this.setStateAndStorage({\r\n      events: newEvents\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Helmet>\r\n          <title>Timer</title>\r\n        </Helmet>\r\n\r\n        <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\r\n          integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"></link>\r\n\r\n        <script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin=\"anonymous\"></script>\r\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\" integrity=\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\" crossorigin=\"anonymous\"></script>\r\n        <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\" integrity=\"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\" crossorigin=\"anonymous\"></script>\r\n\r\n        <div class=\"container\">\r\n          <div class=\"row\">\r\n            <div class=\"col-sm offset-sm-11\">\r\n              <button className=\"btn\" onClick={this.onClickReset} data-testid=\"reset-btn\">Reset</button>\r\n            </div>\r\n          </div>\r\n          <Timer timerSeconds={this.state.timerSeconds}\r\n            totalWorkedSeconds={this.state.totalWorkedSeconds}\r\n            isWork={this.state.isWork}\r\n            availableBreakSeconds={this.state.availableBreakSeconds}\r\n            hiddenAvailableBreakSeconds={this.state.hiddenAvailableBreakSeconds}\r\n            cycle={this.state.cycle}\r\n            timerRunning={this.state.timerRunning}\r\n            continousWork={this.state.continousWork}\r\n            timerLastUpdatedAt={this.state.timerLastUpdatedAt}\r\n            autoStartTimers={this.state.autoStartTimers}\r\n            workMinutes={this.state.workMinutes}\r\n            shortBreakMinutes={this.state.shortBreakMinutes}\r\n            longBreakMinutes={this.state.longBreakMinutes}\r\n            longBreakFreq={this.state.longBreakFreq}\r\n            timerStartedAt={this.state.timerStartedAt}\r\n            timerStartedWithSeconds={this.state.timerStartedWithSeconds}\r\n            setStateAndStorage={this.handleTimerStateChange}\r\n            showNotification={this.handleShowNotification}\r\n            onTimerFinish={this.handleTimerFinish} />\r\n          <button class=\"btn m-2\" type=\"button\" onClick={this.onClickSettings}>\r\n            Settings\r\n          </button>\r\n          <div class={this.state.settingsVisible ? 'collapse show' : 'collapse'}>\r\n            <div class=\"card card-body\">\r\n              <UserSettings\r\n                workMinutes={this.state.workMinutes} shortBreakMinutes={this.state.shortBreakMinutes}\r\n                longBreakMinutes={this.state.longBreakMinutes} longBreakFreq={this.state.longBreakFreq}\r\n                onchange={this.onChangeSettings} />\r\n            </div>\r\n          </div>\r\n          <div class=\"card card-body\">\r\n            <FullCalendar events={this.state.events} plugins={[timeGridPlugin, dayGridMonth, listPlugin]} initialView=\"timeGridWeek\" headerToolbar={\r\n              { right: 'today prev,next dayGridMonth,timeGridWeek,timeGridDay listWeek' }\r\n            } slotDuration='00:15:00' />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import Settings from './Settings';\r\n\r\nclass DefaultSettings extends Settings {\r\n  constructor() {\r\n    super(25, 5, 10, 4, 480);\r\n  }\r\n}\r\n\r\nexport default DefaultSettings;","class Settings {\r\n    constructor(workMinutes, shortBreakMinutes, longBreakMinutes, longBreakFreq) {\r\n        this._workMinutes = workMinutes;\r\n        this._shortBreakMinutes = shortBreakMinutes;\r\n        this._longBreakMinutes = longBreakMinutes;\r\n        this._longBreakFreq = longBreakFreq;\r\n    }\r\n\r\n    get workMinutes() {\r\n        return this._workMinutes;\r\n    }\r\n\r\n    get shortBreakMinutes() {\r\n        return this._shortBreakMinutes;\r\n    }\r\n\r\n    get longBreakMinutes() {\r\n        return this._longBreakMinutes;\r\n    }\r\n\r\n    get longBreakFreq() {\r\n        return this._longBreakFreq;\r\n    }\r\n}\r\n\r\nexport default Settings;","class BrowserNotifications {\r\n    requestPermission() {\r\n        return Notification.requestPermission();\r\n    }\r\n\r\n    createNotification(title, params) {\r\n        new Notification(title, params);\r\n    }\r\n}\r\n\r\nexport default BrowserNotifications;","class LocalStorage {\r\n    get state() {\r\n        return JSON.parse(localStorage.getItem('timer_state'));\r\n    }\r\n\r\n    set state(state) {\r\n        localStorage.setItem('timer_state', JSON.stringify(state));\r\n    }\r\n}\r\n\r\nexport default LocalStorage;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport DefaultSettings from './DefaultSettings';\r\nimport BrowserNotifications from './BrowserNotifications';\r\nimport LocalStorage from './LocalStorage';\r\n\r\nReactDOM.render(<App basename={ process.env.PUBLIC_URL } defaultSettings={ new DefaultSettings() } notifications={ new BrowserNotifications() } storage={ new LocalStorage() }/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}