{"version":3,"sources":["UserSettings.js","Constants.js","Timer.js","SimpleTaskManager.js","TaskTimes.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","DefaultSettings.js","Settings.js","BrowserNotifications.js","LocalStorage.js","index.js"],"names":["UserSettings","onChangeWorkMinutes","event","props","onchange","workMinutes","target","value","onChangeShortBreakMinutes","shortBreakMinutes","onChangeLongBreakMinutes","longBreakMinutes","onChangeLongBreakFreq","longBreakFreq","Form","Row","Col","sm","Group","as","Label","column","xs","Control","type","this","onChange","Text","className","React","Component","Constants","taskName","Timer","onClickStartWorking","setStateAndStorage","isWork","timerRunning","markTimerStart","timerSeconds","Date","now","onClickReturnToWork","lastTimerSeconds","newTimerSeconds","alwaysStartFullWork","lastWorkTimerSeconds","notifyCycleChange","onClickGoOnABreak","availableBreakSeconds","Math","round","tick","secondsDiff","timerLastUpdatedAt","newState","calculateNewState","wasWork","oldTimerSeconds","timerEndAt","timerStartedAt","timerStartedWithSeconds","start","end","onTimerFinish","onClickHoldWork","handleClose","onClickResumeWork","onChangeContinousWork","continousWork","checked","onChangeAutoStartTimers","autoStartTimers","onChangeAlwaysStartFullWork","handleShow","setState","showHoldModal","interval","setInterval","state","clearInterval","getTimerMinutes","getTimerSeconds","String","padStart","floor","seconds","hoursPart","hoursLabel","minutesPart","secondsPart","trim","tempState","totalWorkedSeconds","hiddenAvailableBreakSeconds","cycle","totalCombinedTime","secondsPassed","availableBreakSecondsIncrement","stateChange","newCycle","newAvailableBreakSeconds","newIsWork","Object","assign","showNotification","Modal","show","onHide","Header","closeButton","Title","CONFIRM_HOLD_TIMER_MODAL_HEADER","Body","CONFIRM_HOLD_TIMER_MODAL_TEXT","Footer","Button","variant","onClick","CONFIRM_HOLD_TIMER_BUTTON_TEXT","ButtonGroup","HOLD_WORK_BUTTON_TEXT","RESUME_WORK_BUTTON_TEXT","START_WORKING_BUTTON_TEXT","onClickReset","RESET_BUTTON_TEXT","WORK_LABEL_TEXT","BREAK_LABEL_TEXT","GO_ON_A_BREAT_BUTTON_TEXT","OverlayTrigger","overlay","Tooltip","id","BREAK_WILL_BECOME_AVAILABLE_TEXT","disabled","style","pointerEvents","RETURN_TO_WORK_BUTTON_TEXT","formatSecondsAsText","span","offset","getFutureAdditionBreakTime","cyclesUntilLongBreak","Check","label","CONTINOUS_WORK_TEXT","START_TIMERS_AUTOMATICALLY_TEXT","ALWAYS_START_FULL_WORK_TEXT","additionalBreakTime","SimpleTaskManager","handleTextInputChange","taskInput","createButtonVisible","tasks","some","task","toUpperCase","visibleTasks","getVisibleTasks","handleSaveClick","onTaskCreate","handleTaskSelected","onTaskSelected","handleRemoveClick","window","confirm","getRemoveTaskConfirmationText","selectedTask","onTaskRemoved","prevProps","eventsTimestamp","length","searchText","filter","x","includes","Container","inline","controlId","placeholder","CREATE_TASK_PLACEHOLDER_TEXT","SAVE_NEW_TASK_BUTTON_TEXT","size","REMOVE_TASK_BUTTON_TEXT","ToggleButtonGroup","name","flexWrap","ToggleButton","NO_TASK_TEXT","map","TOTALS_KEY","TaskTimes","formatSeconds","hours","minutes","timesMap","calculateTimes","totalToday","totalYesterday","totalThisWeek","totalThisMonth","events","forEach","isForToday","isToday","isForYesterday","isYesterday","isForThisWeek","isThisWeek","isForThisMonth","isThisMonth","undefined","today","yesterday","week","month","len","getTime","entries","entry","todayPercentage","getPercentage","yesterdayPercentage","weekPercentage","monthPercentage","percent","isNaN","Table","responsive","charAt","App","RESET_CONFIRMATION_TEXT","getStateForReset","onClickSettings","settingsVisible","onClickToggleCalendar","calendarVisible","storage","isEqual","onChangeSettings","settings","getDefaultState","defaultSettings","defaultState","stateForReset","handleTimerStateChange","timerState","handleShowNotification","notificationTitle","notifications","notificationsGranted","notificationQueued","setTimeout","clearNotificationQueue","createNotification","handleEventCreated","eventTitle","newEvent","title","color","newEvents","slice","setEventsTimestamp","handleTaskCreated","newTasks","push","splice","indexOf","handleTaskRemoved","e","parse","requestPermission","then","result","plugins","timeGridPlugin","Helmet","defer","Collapse","in","Card","CloseButton","dayGridMonth","listPlugin","initialView","headerToolbar","right","slotDuration","height","eventDidMount","el","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","DefaultSettings","_workMinutes","_shortBreakMinutes","_longBreakMinutes","_longBreakFreq","_continousWork","_defaultState","BrowserNotifications","Notification","params","LocalStorage","JSON","localStorage","getItem","setItem","stringify","ReactDOM","render","basename","process","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.926e6b33.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nclass UserSettings extends React.Component {\r\n  onChangeWorkMinutes = (event) => {\r\n    this.props.onchange({\r\n      workMinutes: event.target.value,\r\n    });\r\n  };\r\n\r\n  onChangeShortBreakMinutes = (event) => {\r\n    this.props.onchange({\r\n      shortBreakMinutes: event.target.value,\r\n    });\r\n  };\r\n\r\n  onChangeLongBreakMinutes = (event) => {\r\n    this.props.onchange({\r\n      longBreakMinutes: event.target.value,\r\n    });\r\n  };\r\n\r\n  onChangeLongBreakFreq = (event) => {\r\n    this.props.onchange({\r\n      longBreakFreq: event.target.value,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Form>\r\n        <Row>\r\n          <Col sm={6}>\r\n            <Form.Group as={Row}>\r\n              <Form.Label column xs={8}>\r\n                Work cycle minutes\r\n              </Form.Label>\r\n              <Col xs={4}>\r\n                <Form.Control\r\n                  type=\"number\"\r\n                  value={this.props.workMinutes}\r\n                  onChange={this.onChangeWorkMinutes}\r\n                />\r\n              </Col>\r\n            </Form.Group>\r\n          </Col>\r\n          <Col sm={6}>\r\n            <Form.Group as={Row}>\r\n              <Form.Label column xs={8}>\r\n                Short break minutes\r\n              </Form.Label>\r\n              <Col xs={4}>\r\n                <Form.Control\r\n                  type=\"number\"\r\n                  value={this.props.shortBreakMinutes}\r\n                  onChange={this.onChangeShortBreakMinutes}\r\n                />\r\n              </Col>\r\n            </Form.Group>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col sm={6}>\r\n            <Form.Group as={Row}>\r\n              <Form.Label column xs={8}>\r\n                Long break minutes\r\n              </Form.Label>\r\n              <Col xs={4}>\r\n                <Form.Control\r\n                  type=\"number\"\r\n                  value={this.props.longBreakMinutes}\r\n                  onChange={this.onChangeLongBreakMinutes}\r\n                />\r\n              </Col>\r\n            </Form.Group>\r\n          </Col>\r\n          <Col sm={6}>\r\n            <Form.Group as={Row}>\r\n              <Form.Label column xs={8}>\r\n                Long break after n cycles\r\n              </Form.Label>\r\n              <Col xs={4}>\r\n                <Form.Control\r\n                  type=\"number\"\r\n                  value={this.props.longBreakFreq}\r\n                  onChange={this.onChangeLongBreakFreq}\r\n                />\r\n              </Col>\r\n            </Form.Group>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <Form.Text className=\"text-muted\">\r\n              Changes are effective after timer reset.\r\n            </Form.Text>\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserSettings;\r\n","export default class Constants {\r\n  static get CREATE_TASK_PLACEHOLDER_TEXT() {\r\n    return \"Enter task name...\";\r\n  }\r\n\r\n  static get SAVE_NEW_TASK_BUTTON_TEXT() {\r\n    return \"Save new task\";\r\n  }\r\n\r\n  static get NO_TASK_TEXT() {\r\n    return \"No task\";\r\n  }\r\n\r\n  static get GO_ON_A_BREAT_BUTTON_TEXT() {\r\n    return \"Go on a break\";\r\n  }\r\n\r\n  static get RETURN_TO_WORK_BUTTON_TEXT() {\r\n    return \"Return to work\";\r\n  }\r\n\r\n  static get START_WORKING_BUTTON_TEXT() {\r\n    return \"Start\";\r\n  }\r\n\r\n  static get HOLD_WORK_BUTTON_TEXT() {\r\n    return \"Hold\";\r\n  }\r\n\r\n  static get RESUME_WORK_BUTTON_TEXT() {\r\n    return \"Resume\";\r\n  }\r\n\r\n  static get CONTINOUS_WORK_TEXT() {\r\n    return \"Continous work\";\r\n  }\r\n\r\n  static get START_TIMERS_AUTOMATICALLY_TEXT() {\r\n    return \"Start new timers automatically\";\r\n  }\r\n\r\n  static get RESET_CONFIRMATION_TEXT() {\r\n    return \"Do you want to reset timer values? (tasks, events, settings etc. will be kept)\";\r\n  }\r\n\r\n  static get RESET_BUTTON_TEXT() {\r\n    return \"Reset\";\r\n  }\r\n\r\n  static get CONFIRM_HOLD_TIMER_BUTTON_TEXT() {\r\n    return \"Yes, hold timer\";\r\n  }\r\n\r\n  static get CONFIRM_HOLD_TIMER_MODAL_HEADER() {\r\n    return \"Warning!\";\r\n  }\r\n\r\n  static get CONFIRM_HOLD_TIMER_MODAL_TEXT() {\r\n    return 'This option should only be used if you\\'re stopping work for a significant amount of time. It should not be used for normal mid-work breaks - instead, please wait for the \"Go on a break\" button to become available.\\n\\nAre sure you want to hold the timer anyway?';\r\n  }\r\n\r\n  static get WORK_LABEL_TEXT() {\r\n    return \"Work\";\r\n  }\r\n\r\n  static get BREAK_LABEL_TEXT() {\r\n    return \"Break\";\r\n  }\r\n\r\n  static get BREAK_WILL_BECOME_AVAILABLE_TEXT() {\r\n    return \"A break will be available when the current work timer finishes.\";\r\n  }\r\n\r\n  static get REMOVE_TASK_BUTTON_TEXT() {\r\n    return \"Remove task\";\r\n  }\r\n\r\n  static getRemoveTaskConfirmationText(taskName) {\r\n    return `Are sure you want to remove the task \"${taskName}\"?`;\r\n  }\r\n\r\n  static get ALWAYS_START_FULL_WORK_TEXT() {\r\n    return \"Always start full work timer\";\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Constants from \"./Constants\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\r\nimport Tooltip from \"react-bootstrap/Tooltip\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\n\r\nclass Timer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.interval = setInterval(this.tick, 1000);\r\n    this.tick();\r\n    this.state = {\r\n      showHoldModal: false,\r\n    };\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  formatSecondsAsTimer() {\r\n    let minutesPart = this.getTimerMinutes();\r\n    let secondsPart = this.getTimerSeconds();\r\n    return minutesPart + \":\" + secondsPart;\r\n  }\r\n\r\n  getTimerSeconds() {\r\n    return String(this.props.timerSeconds % 60).padStart(2, \"0\");\r\n  }\r\n\r\n  getTimerMinutes() {\r\n    return String(Math.floor(this.props.timerSeconds / 60)).padStart(2, \"0\");\r\n  }\r\n\r\n  formatSecondsAsText(seconds) {\r\n    seconds = Math.round(seconds);\r\n    let hoursPart = Math.floor(seconds / 3600) + \"\";\r\n    let hoursLabel = hoursPart === \"1\" ? \"hour\" : \"hours\";\r\n    seconds = seconds % 3600;\r\n    let minutesPart = Math.floor(seconds / 60) + \"\";\r\n    let minutesLabel = minutesPart === \"1\" ? \"minute\" : \"minutes\";\r\n    seconds = seconds % 60;\r\n    let secondsPart = (seconds % 60) + \"\";\r\n    let secondsLabel = secondsPart === \"1\" ? \"second\" : \"seconds\";\r\n    const formattedTime = (\r\n      (hoursPart !== \"0\" ? hoursPart + \" \" + hoursLabel + \" \" : \"\") +\r\n      (minutesPart !== \"0\" ? minutesPart + \" \" + minutesLabel + \" \" : \"\") +\r\n      (secondsPart !== \"0\" ? secondsPart + \" \" + secondsLabel : \"\")\r\n    ).trim();\r\n    return formattedTime || \"0 minutes\";\r\n  }\r\n\r\n  onClickStartWorking = () => {\r\n    this.setStateAndStorage({\r\n      isWork: true,\r\n      timerRunning: true,\r\n    });\r\n    this.markTimerStart(this.props.timerSeconds, Date.now());\r\n  };\r\n\r\n  onClickReturnToWork = () => {\r\n    const lastTimerSeconds = this.props.timerSeconds;\r\n    const newTimerSeconds =\r\n      (!this.props.alwaysStartFullWork && this.props.lastWorkTimerSeconds) ||\r\n      this.props.workMinutes * 60;\r\n    this.setStateAndStorage({\r\n      isWork: true,\r\n      timerSeconds: newTimerSeconds,\r\n    });\r\n    this.notifyCycleChange(false, lastTimerSeconds, newTimerSeconds);\r\n  };\r\n\r\n  onClickGoOnABreak = () => {\r\n    let availableBreakSeconds = Math.round(this.props.availableBreakSeconds);\r\n    const lastTimerSeconds = this.props.timerSeconds;\r\n    this.setStateAndStorage({\r\n      isWork: false,\r\n      timerSeconds: availableBreakSeconds,\r\n      availableBreakSeconds: availableBreakSeconds,\r\n    });\r\n    this.notifyCycleChange(true, lastTimerSeconds, availableBreakSeconds);\r\n  };\r\n\r\n  tick = () => {\r\n    if (!this.props.timerRunning) {\r\n      this.setStateAndStorage({\r\n        timerLastUpdatedAt: Date.now(),\r\n      });\r\n      return;\r\n    }\r\n\r\n    let now = Date.now();\r\n    let secondsDiff = Math.round((now - this.props.timerLastUpdatedAt) / 1000);\r\n    let newState = this.calculateNewState(secondsDiff, now);\r\n\r\n    this.setStateAndStorage(newState);\r\n  };\r\n\r\n  notifyCycleChange = (wasWork, oldTimerSeconds, newTimerSeconds) => {\r\n    const timerEndAt =\r\n      this.props.timerStartedAt +\r\n      (this.props.timerStartedWithSeconds - oldTimerSeconds) * 1000;\r\n    const event = {\r\n      wasWork: wasWork,\r\n      start: this.props.timerStartedAt,\r\n      end: timerEndAt,\r\n    };\r\n    this.props.onTimerFinish(event);\r\n    this.markTimerStart(newTimerSeconds, timerEndAt);\r\n  };\r\n\r\n  markTimerStart = (timerSeconds, timerStartedAt) => {\r\n    const newState = {\r\n      timerStartedAt: timerStartedAt,\r\n      timerStartedWithSeconds: timerSeconds,\r\n    };\r\n    this.props.setStateAndStorage(newState);\r\n  };\r\n\r\n  onClickHoldWork = () => {\r\n    this.setStateAndStorage({\r\n      timerRunning: false,\r\n    });\r\n    this.notifyCycleChange(\r\n      this.props.isWork,\r\n      this.props.timerSeconds,\r\n      this.props.timerSeconds\r\n    );\r\n    this.handleClose();\r\n  };\r\n\r\n  onClickResumeWork = () => {\r\n    this.setStateAndStorage({\r\n      timerRunning: true,\r\n    });\r\n    this.markTimerStart(this.props.timerSeconds, Date.now());\r\n  };\r\n\r\n  onChangeContinousWork = (event) => {\r\n    this.setStateAndStorage({\r\n      continousWork: event.target.checked,\r\n    });\r\n  };\r\n\r\n  onChangeAutoStartTimers = (event) => {\r\n    this.setStateAndStorage({\r\n      autoStartTimers: event.target.checked,\r\n    });\r\n  };\r\n\r\n  onChangeAlwaysStartFullWork = (event) => {\r\n    this.setStateAndStorage({\r\n      alwaysStartFullWork: event.target.checked,\r\n    });\r\n  };\r\n\r\n  setStateAndStorage = (newState) => {\r\n    this.props.setStateAndStorage(newState);\r\n  };\r\n\r\n  calculateNewState(secondsDiff, now) {\r\n    this.tempState = {\r\n      isWork: this.props.isWork,\r\n      totalWorkedSeconds: this.props.totalWorkedSeconds,\r\n      lastWorkTimerSeconds: this.props.lastWorkTimerSeconds,\r\n      availableBreakSeconds: this.props.availableBreakSeconds,\r\n      hiddenAvailableBreakSeconds: this.props.hiddenAvailableBreakSeconds,\r\n      timerLastUpdatedAt: this.props.timerLastUpdatedAt,\r\n      cycle: this.props.cycle,\r\n      continousWork: this.props.continousWork,\r\n      timerSeconds: this.props.timerSeconds,\r\n      totalCombinedTime: this.props.totalCombinedTime,\r\n    };\r\n\r\n    for (let secondsPassed = secondsDiff; secondsPassed > 0; secondsPassed--) {\r\n      this.tempState.timerSeconds--;\r\n      this.tempState.totalCombinedTime++;\r\n      if (this.tempState.isWork) {\r\n        this.tempState.totalWorkedSeconds++;\r\n        this.tempState.lastWorkTimerSeconds = this.tempState.timerSeconds;\r\n        let availableBreakSecondsIncrement =\r\n          (this.props.shortBreakMinutes * 1.0) / this.props.workMinutes;\r\n        if (\r\n          this.tempState.availableBreakSeconds >=\r\n          this.props.shortBreakMinutes * 60\r\n        ) {\r\n          this.tempState.availableBreakSeconds +=\r\n            availableBreakSecondsIncrement;\r\n        } else {\r\n          this.tempState.hiddenAvailableBreakSeconds +=\r\n            availableBreakSecondsIncrement;\r\n        }\r\n      } else {\r\n        this.tempState.availableBreakSeconds--;\r\n      }\r\n      this.tempState.timerLastUpdatedAt = now;\r\n      if (this.tempState.timerSeconds === 0) {\r\n        let isWork = this.tempState.isWork;\r\n        let stateChange = {};\r\n        if (isWork) {\r\n          let newCycle = this.tempState.cycle + 1;\r\n          let newAvailableBreakSeconds = this.tempState.availableBreakSeconds;\r\n          if (newCycle === this.props.longBreakFreq) {\r\n            newCycle = 0;\r\n            newAvailableBreakSeconds +=\r\n              this.props.longBreakMinutes * 60 -\r\n              this.props.shortBreakMinutes * 60;\r\n          }\r\n          newAvailableBreakSeconds +=\r\n            this.tempState.hiddenAvailableBreakSeconds;\r\n          newAvailableBreakSeconds = Math.round(newAvailableBreakSeconds);\r\n\r\n          let newTimerSeconds;\r\n          let newIsWork;\r\n\r\n          if (this.tempState.continousWork) {\r\n            newTimerSeconds = this.props.workMinutes * 60;\r\n            newIsWork = true;\r\n          } else {\r\n            newTimerSeconds = newAvailableBreakSeconds;\r\n            newIsWork = false;\r\n          }\r\n\r\n          stateChange = {\r\n            timerSeconds: newTimerSeconds,\r\n            availableBreakSeconds: newAvailableBreakSeconds,\r\n            hiddenAvailableBreakSeconds: 0,\r\n            isWork: newIsWork,\r\n            cycle: newCycle,\r\n          };\r\n        } else {\r\n          stateChange = {\r\n            timerSeconds:\r\n              (!this.props.alwaysStartFullWork &&\r\n                this.props.lastWorkTimerSeconds) ||\r\n              this.props.workMinutes * 60,\r\n            isWork: true,\r\n          };\r\n        }\r\n\r\n        stateChange.timerRunning = this.props.autoStartTimers;\r\n\r\n        const lastTimerSeconds = this.tempState.timerSeconds;\r\n        this.tempState = Object.assign(this.tempState, stateChange);\r\n\r\n        this.props.showNotification(\r\n          isWork ? \"Work finished\" : \"Break finished\"\r\n        );\r\n        this.notifyCycleChange(\r\n          isWork,\r\n          lastTimerSeconds,\r\n          this.tempState.timerSeconds\r\n        );\r\n      }\r\n    }\r\n\r\n    return this.tempState;\r\n  }\r\n\r\n  get cyclesUntilLongBreak() {\r\n    return this.props.longBreakFreq - this.props.cycle;\r\n  }\r\n\r\n  handleShow = () => {\r\n    this.setState({\r\n      showHoldModal: true,\r\n    });\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({\r\n      showHoldModal: false,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Modal show={this.state.showHoldModal} onHide={this.handleClose}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>\r\n              {Constants.CONFIRM_HOLD_TIMER_MODAL_HEADER}\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>{Constants.CONFIRM_HOLD_TIMER_MODAL_TEXT}</Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={this.handleClose}>\r\n              No\r\n            </Button>\r\n            <Button variant=\"primary\" onClick={this.onClickHoldWork}>\r\n              {Constants.CONFIRM_HOLD_TIMER_BUTTON_TEXT}\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n        <Row className=\"mt-3\">\r\n          <Col>\r\n            <ButtonGroup>\r\n              {this.props.timerRunning === true && (\r\n                <Button variant=\"outline-warning\" onClick={this.handleShow}>\r\n                  {Constants.HOLD_WORK_BUTTON_TEXT}\r\n                </Button>\r\n              )}\r\n              {this.props.timerRunning === false && (\r\n                <Button\r\n                  variant=\"secondary\"\r\n                  onClick={this.onClickResumeWork}\r\n                  data-testid=\"resume-work-btn\"\r\n                >\r\n                  {Constants.RESUME_WORK_BUTTON_TEXT}\r\n                </Button>\r\n              )}\r\n              {this.props.isWork === null && (\r\n                <Button\r\n                  variant=\"success\"\r\n                  onClick={this.onClickStartWorking}\r\n                  data-testid=\"start-working-btn\"\r\n                >\r\n                  {Constants.START_WORKING_BUTTON_TEXT}\r\n                </Button>\r\n              )}\r\n              {this.props.isWork !== null && (\r\n                <Button\r\n                  variant=\"outline-dark\"\r\n                  onClick={this.props.onClickReset}\r\n                  data-testid=\"reset-btn\"\r\n                >\r\n                  {Constants.RESET_BUTTON_TEXT}\r\n                </Button>\r\n              )}\r\n            </ButtonGroup>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <h3 className=\"mt-3\">\r\n              {this.props.isWork === true\r\n                ? Constants.WORK_LABEL_TEXT\r\n                : this.props.isWork === false\r\n                ? Constants.BREAK_LABEL_TEXT\r\n                : \"\"}\r\n            </h3>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <h1 data-testid=\"timer\">\r\n              {this.getTimerMinutes() + \":\" + this.getTimerSeconds()}\r\n            </h1>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            {this.props.isWork === true ? (\r\n              <>\r\n                {!this.props.availableBreakSeconds ? (\r\n                  <>\r\n                    <OverlayTrigger\r\n                      overlay={\r\n                        <Tooltip id=\"tooltip-disabled\">\r\n                          {Constants.BREAK_WILL_BECOME_AVAILABLE_TEXT}\r\n                        </Tooltip>\r\n                      }\r\n                    >\r\n                      <span className=\"d-inline-block\">\r\n                        <Button\r\n                          disabled\r\n                          variant=\"success\"\r\n                          style={{ pointerEvents: \"none\" }}\r\n                        >\r\n                          {Constants.GO_ON_A_BREAT_BUTTON_TEXT}\r\n                        </Button>\r\n                      </span>\r\n                    </OverlayTrigger>\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <Button variant=\"success\" onClick={this.onClickGoOnABreak}>\r\n                      {Constants.GO_ON_A_BREAT_BUTTON_TEXT}\r\n                    </Button>\r\n                  </>\r\n                )}\r\n              </>\r\n            ) : null}\r\n            {this.props.isWork === false ? (\r\n              <>\r\n                <Button variant=\"secondary\" onClick={this.onClickReturnToWork}>\r\n                  {Constants.RETURN_TO_WORK_BUTTON_TEXT}\r\n                </Button>\r\n              </>\r\n            ) : null}\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col sm={6} className=\"font-weight-light text-md-right\">\r\n            Total time worked:\r\n          </Col>\r\n          <Col sm={6} className=\"text-md-left\" data-testid=\"totalWorkedTime\">\r\n            {this.formatSecondsAsText(this.props.totalWorkedSeconds)}\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col sm={6} className=\"font-weight-light text-md-right\">\r\n            Available break time:\r\n          </Col>\r\n          <Col sm={6} className=\"text-md-left\" data-testid=\"availableBreakTime\">\r\n            {this.formatSecondsAsText(this.props.availableBreakSeconds)}\r\n          </Col>\r\n        </Row>\r\n        {this.props.isWork &&\r\n          this.props.availableBreakSeconds <\r\n            this.props.shortBreakMinutes * 60 && (\r\n            <Row>\r\n              <Col\r\n                xs={12}\r\n                sm={{ span: 6, offset: 6 }}\r\n                className=\"text-md-left text-muted font-weight-light small\"\r\n              >\r\n                +{\" \"}\r\n                <span data-testid=\"futureAdditionBreakTime\">\r\n                  {this.getFutureAdditionBreakTime()}\r\n                </span>{\" \"}\r\n                after work timer finishes\r\n              </Col>\r\n            </Row>\r\n          )}\r\n        <Row>\r\n          <Col sm={6} className=\"font-weight-light text-md-right\">\r\n            Cycles until long break ({this.props.longBreakMinutes} minutes):\r\n          </Col>\r\n          <Col sm={6} className=\"text-md-left\" data-testid=\"longBreakInfo\">\r\n            {this.cyclesUntilLongBreak}\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col sm={6} className=\"font-weight-light text-md-right\">\r\n            Total time (work + break):\r\n          </Col>\r\n          <Col sm={6} className=\"text-md-left\" data-testid=\"totalCombinedTime\">\r\n            {this.formatSecondsAsText(this.props.totalCombinedTime)}\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <Form.Check\r\n              type=\"checkbox\"\r\n              label={Constants.CONTINOUS_WORK_TEXT}\r\n              checked={this.props.continousWork}\r\n              id=\"cont-work-check\"\r\n              data-testid=\"cont-work\"\r\n              onChange={this.onChangeContinousWork}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <Form.Check\r\n              type=\"checkbox\"\r\n              label={Constants.START_TIMERS_AUTOMATICALLY_TEXT}\r\n              checked={this.props.autoStartTimers}\r\n              id=\"auto-start-timers-check\"\r\n              data-testid=\"auto-start-timers\"\r\n              onChange={this.onChangeAutoStartTimers}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <Form.Check\r\n              type=\"checkbox\"\r\n              label={Constants.ALWAYS_START_FULL_WORK_TEXT}\r\n              checked={this.props.alwaysStartFullWork}\r\n              id=\"full-work-check\"\r\n              data-testid=\"full-work\"\r\n              onChange={this.onChangeAlwaysStartFullWork}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </>\r\n    );\r\n  }\r\n\r\n  getFutureAdditionBreakTime() {\r\n    let additionalBreakTime = Math.round(\r\n      this.props.hiddenAvailableBreakSeconds +\r\n        ((this.props.timerSeconds * 1.0) / (this.props.workMinutes * 60.0)) *\r\n          this.props.shortBreakMinutes *\r\n          60\r\n    );\r\n    if (this.props.cycle === this.props.longBreakFreq - 1) {\r\n      additionalBreakTime +=\r\n        (this.props.longBreakMinutes - this.props.shortBreakMinutes) * 60;\r\n    }\r\n    return this.formatSecondsAsText(additionalBreakTime);\r\n  }\r\n}\r\n\r\nexport default Timer;\r\n","import React from \"react\";\r\nimport Constants from \"./Constants\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport ToggleButtonGroup from \"react-bootstrap/ToggleButtonGroup\";\r\nimport ToggleButton from \"react-bootstrap/ToggleButton\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nclass SimpleTaskManager extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      taskInput: \"\",\r\n      selectedTask: props.selectedTask || \"\",\r\n      visibleTasks: props.tasks,\r\n      createButtonVisible: false,\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (\r\n      this.props.eventsTimestamp !== prevProps.eventsTimestamp ||\r\n      this.props.selectedTask !== prevProps.selectedTask ||\r\n      !!this.props.tasks !== !!prevProps.tasks ||\r\n      (this.props.tasks &&\r\n        prevProps.tasks &&\r\n        this.props.tasks.length !== prevProps.tasks.length)\r\n    ) {\r\n      this.setState({\r\n        selectedTask: this.props.selectedTask || \"\",\r\n        visibleTasks: this.getVisibleTasks(this.state.taskInput),\r\n      });\r\n    }\r\n  }\r\n\r\n  handleTextInputChange = (event) => {\r\n    const value = event.target.value;\r\n    this.setState({\r\n      taskInput: value,\r\n      createButtonVisible:\r\n        value &&\r\n        value.trim() !== \"\" &&\r\n        (!this.props.tasks ||\r\n          !this.props.tasks.some(\r\n            (task) => task.toUpperCase() === value.toUpperCase()\r\n          )),\r\n      visibleTasks: this.getVisibleTasks(value),\r\n    });\r\n  };\r\n\r\n  handleSaveClick = () => {\r\n    this.props.onTaskCreate(this.state.taskInput.trim());\r\n    this.setState({\r\n      taskInput: \"\",\r\n      visibleTasks: this.getVisibleTasks(\"\"),\r\n      createButtonVisible: false,\r\n    });\r\n  };\r\n\r\n  handleTaskSelected = (value) => {\r\n    if (value === \"\") {\r\n      value = null;\r\n    }\r\n    this.props.onTaskSelected(value);\r\n  };\r\n\r\n  getVisibleTasks(searchText) {\r\n    return this.props.tasks\r\n      ? this.props.tasks.filter((x) =>\r\n          x.toUpperCase().includes(searchText.toUpperCase())\r\n        )\r\n      : [];\r\n  }\r\n\r\n  handleRemoveClick = () => {\r\n    if (\r\n      window.confirm(\r\n        Constants.getRemoveTaskConfirmationText(this.state.selectedTask)\r\n      )\r\n    ) {\r\n      this.props.onTaskRemoved(this.state.selectedTask);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <Row>\r\n          <Col xs={9}>\r\n            <Form inline className=\"mb-2\">\r\n              <Form.Group controlId=\"taskInput\" className=\"mr-1\">\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  onChange={this.handleTextInputChange}\r\n                  placeholder={Constants.CREATE_TASK_PLACEHOLDER_TEXT}\r\n                  value={this.state.taskInput}\r\n                ></Form.Control>\r\n              </Form.Group>\r\n              {this.state.createButtonVisible ? (\r\n                <Button type=\"primary\" onClick={this.handleSaveClick}>\r\n                  {Constants.SAVE_NEW_TASK_BUTTON_TEXT} \"{this.state.taskInput}\"\r\n                </Button>\r\n              ) : null}\r\n            </Form>\r\n          </Col>\r\n          {this.state.selectedTask && (\r\n            <Col xs={2}>\r\n              <Button\r\n                variant=\"outline-danger\"\r\n                size=\"sm\"\r\n                onClick={this.handleRemoveClick}\r\n                className=\"mr-1\"\r\n              >\r\n                {Constants.REMOVE_TASK_BUTTON_TEXT}\r\n              </Button>\r\n            </Col>\r\n          )}\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <ToggleButtonGroup\r\n              type=\"radio\"\r\n              name=\"tasks\"\r\n              style={{ flexWrap: \"wrap\" }}\r\n              className=\"float-left\"\r\n              value={this.state.selectedTask}\r\n              onChange={this.handleTaskSelected}\r\n            >\r\n              <ToggleButton id=\"radio-null\" value=\"\">\r\n                {Constants.NO_TASK_TEXT}\r\n              </ToggleButton>\r\n              {this.state &&\r\n                this.state.visibleTasks &&\r\n                this.state.visibleTasks.map((task) => {\r\n                  return (\r\n                    <ToggleButton\r\n                      id={\"radio-\" + task}\r\n                      value={task}\r\n                      data-testid={\"button-\" + task}\r\n                      key={task}\r\n                    >\r\n                      {task}\r\n                    </ToggleButton>\r\n                  );\r\n                })}\r\n            </ToggleButtonGroup>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SimpleTaskManager;\r\n","import React from \"react\";\r\nimport { isToday, isYesterday, isThisWeek, isThisMonth } from \"date-fns\";\r\nimport Constants from \"./Constants\";\r\nimport Table from \"react-bootstrap/Table\";\r\n\r\nconst TOTALS_KEY = \"@@@TOTALS\";\r\n\r\nclass TaskTimes extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      timesMap: this.calculateTimes(),\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.eventsTimestamp !== prevProps.eventsTimestamp) {\r\n      this.setState({\r\n        timesMap: this.calculateTimes(),\r\n      });\r\n    }\r\n  }\r\n\r\n  formatSeconds = (seconds) => {\r\n    seconds /= 1000;\r\n    let hours = Math.floor(seconds / 3600);\r\n    let minutes = Math.floor((seconds % 3600) / 60);\r\n    return `${hours}h${minutes}m`;\r\n  };\r\n\r\n  calculateTimes() {\r\n    const timesMap = {};\r\n    let totalToday = 0,\r\n      totalYesterday = 0,\r\n      totalThisWeek = 0,\r\n      totalThisMonth = 0;\r\n    this.props.events.forEach((event) => {\r\n      if (!event.isWork) {\r\n        return;\r\n      }\r\n      let isForToday = isToday(event.start);\r\n      let isForYesterday = isYesterday(event.start);\r\n      let isForThisWeek = isThisWeek(event.start);\r\n      let isForThisMonth = isThisMonth(event.start);\r\n      if (!isForToday && !isForYesterday && !isForThisWeek && !isForThisMonth) {\r\n        return;\r\n      }\r\n      let taskName = event.task;\r\n      if (\r\n        taskName === null ||\r\n        taskName === undefined ||\r\n        taskName === \"\" ||\r\n        taskName === \"null\"\r\n      ) {\r\n        taskName = Constants.NO_TASK_TEXT;\r\n      }\r\n      if (!(taskName in timesMap)) {\r\n        timesMap[taskName] = {\r\n          today: 0,\r\n          yesterday: 0,\r\n          week: 0,\r\n          month: 0,\r\n        };\r\n      }\r\n      if (event.end !== undefined) {\r\n        let len = event.end.getTime() - event.start.getTime();\r\n        if (isForToday) {\r\n          timesMap[taskName].today += len;\r\n          totalToday += len;\r\n        } else if (isForYesterday) {\r\n          timesMap[taskName].yesterday += len;\r\n          totalYesterday += len;\r\n        }\r\n        if (isForThisWeek) {\r\n          timesMap[taskName].week += len;\r\n          totalThisWeek += len;\r\n        }\r\n        if (isForThisMonth) {\r\n          timesMap[taskName].month += len;\r\n          totalThisMonth += len;\r\n        }\r\n      }\r\n    });\r\n    Object.entries(timesMap).forEach((entry) => {\r\n      entry[1].todayPercentage = this.getPercentage(entry[1].today, totalToday);\r\n      entry[1].yesterdayPercentage = this.getPercentage(\r\n        entry[1].yesterday,\r\n        totalYesterday\r\n      );\r\n      entry[1].weekPercentage = this.getPercentage(\r\n        entry[1].week,\r\n        totalThisWeek\r\n      );\r\n      entry[1].monthPercentage = this.getPercentage(\r\n        entry[1].month,\r\n        totalThisMonth\r\n      );\r\n    });\r\n    timesMap[TOTALS_KEY] = {\r\n      today: totalToday,\r\n      yesterday: totalYesterday,\r\n      week: totalThisWeek,\r\n      month: totalThisMonth,\r\n    };\r\n    return timesMap;\r\n  }\r\n\r\n  getPercentage(today, totalToday) {\r\n    const percent = Math.round((today / totalToday) * 100);\r\n    return !isNaN(percent) ? percent + \"%\" : \"-\";\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Table size=\"sm\" responsive>\r\n        <thead>\r\n          <tr>\r\n            <th>Task</th>\r\n            <th>Today</th>\r\n            <th>%</th>\r\n            <th>Yesterday</th>\r\n            <th>%</th>\r\n            <th>Week</th>\r\n            <th>%</th>\r\n            <th>Month</th>\r\n            <th>%</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {Object.entries(this.state.timesMap)\r\n            .filter((entry) => entry[0] !== TOTALS_KEY)\r\n            .map((entry) => (\r\n              <tr key={entry[0]}>\r\n                <td>{entry[0]}</td>\r\n                <td\r\n                  data-testid={\"today-\" + entry[0].charAt(0) + entry[0].length}\r\n                >\r\n                  {this.formatSeconds(entry[1].today)}\r\n                </td>\r\n                <td\r\n                  data-testid={\"todayp-\" + entry[0].charAt(0) + entry[0].length}\r\n                >\r\n                  {entry[1].todayPercentage}\r\n                </td>\r\n                <td\r\n                  data-testid={\r\n                    \"yesterday-\" + entry[0].charAt(0) + entry[0].length\r\n                  }\r\n                >\r\n                  {this.formatSeconds(entry[1].yesterday)}\r\n                </td>\r\n                <td\r\n                  data-testid={\r\n                    \"yesterdayp-\" + entry[0].charAt(0) + entry[0].length\r\n                  }\r\n                >\r\n                  {entry[1].yesterdayPercentage}\r\n                </td>\r\n                <td\r\n                  data-testid={\"week-\" + entry[0].charAt(0) + entry[0].length}\r\n                >\r\n                  {this.formatSeconds(entry[1].week)}\r\n                </td>\r\n                <td\r\n                  data-testid={\"weekp-\" + entry[0].charAt(0) + entry[0].length}\r\n                >\r\n                  {entry[1].weekPercentage}\r\n                </td>\r\n                <td\r\n                  data-testid={\"month-\" + entry[0].charAt(0) + entry[0].length}\r\n                >\r\n                  {this.formatSeconds(entry[1].month)}\r\n                </td>\r\n                <td\r\n                  data-testid={\"monthp-\" + entry[0].charAt(0) + entry[0].length}\r\n                >\r\n                  {entry[1].monthPercentage}\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          <tr>\r\n            <td>Total</td>\r\n            <td data-testid={\"today-total\"}>\r\n              {this.formatSeconds(this.state.timesMap[TOTALS_KEY].today)}\r\n            </td>\r\n            <td data-testid={\"todayp-total\"}>100%</td>\r\n            <td data-testid={\"yesterday-total\"}>\r\n              {this.formatSeconds(this.state.timesMap[TOTALS_KEY].yesterday)}\r\n            </td>\r\n            <td data-testid={\"yesterdayp-total\"}>100%</td>\r\n            <td data-testid={\"week-total\"}>\r\n              {this.formatSeconds(this.state.timesMap[TOTALS_KEY].week)}\r\n            </td>\r\n            <td data-testid={\"weekp-total\"}>100%</td>\r\n            <td data-testid={\"month-total\"}>\r\n              {this.formatSeconds(this.state.timesMap[TOTALS_KEY].month)}\r\n            </td>\r\n            <td data-testid={\"monthp-total\"}>100%</td>\r\n          </tr>\r\n        </tbody>\r\n      </Table>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TaskTimes;\r\n","import React from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport \"./App.css\";\r\nimport UserSettings from \"./UserSettings\";\r\nimport Timer from \"./Timer\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\r\nimport dayGridMonth from \"@fullcalendar/daygrid\";\r\nimport listPlugin from \"@fullcalendar/list\";\r\nimport SimpleTaskManager from \"./SimpleTaskManager\";\r\nimport TaskTimes from \"./TaskTimes\";\r\nimport Constants from \"./Constants\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Collapse from \"react-bootstrap/Collapse\";\r\nimport CloseButton from \"react-bootstrap/CloseButton\";\r\nimport isEqual from \"lodash/isEqual\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.defaultSettings = props.defaultSettings;\r\n    this.storage = props.storage;\r\n    this.state = this.getDefaultState();\r\n    if (this.storage && this.storage.state) {\r\n      this.state = Object.assign(this.state, this.storage.state);\r\n      this.state.events.forEach((e) => {\r\n        e.start = new Date(Date.parse(e.start));\r\n        e.end = new Date(Date.parse(e.end));\r\n      });\r\n    }\r\n    if (props.notifications) {\r\n      this.notifications = props.notifications;\r\n      this.notifications.requestPermission().then((result) => {\r\n        if (result === \"granted\") {\r\n          this.notificationsGranted = true;\r\n        }\r\n      });\r\n    }\r\n    this.plugins = [timeGridPlugin];\r\n  }\r\n\r\n  onClickReset = () => {\r\n    if (window.confirm(Constants.RESET_CONFIRMATION_TEXT)) {\r\n      this.setStateAndStorage(this.getStateForReset());\r\n    }\r\n  };\r\n\r\n  onClickSettings = () => {\r\n    this.setState({\r\n      settingsVisible: !this.state.settingsVisible,\r\n    });\r\n  };\r\n\r\n  onClickToggleCalendar = () => {\r\n    this.setState({\r\n      calendarVisible: !this.state.calendarVisible,\r\n    });\r\n  };\r\n\r\n  setStateAndStorage = (state) => {\r\n    this.setState(state);\r\n    if (this.storage && !isEqual(this.storage.state, state)) {\r\n      this.storage.state = Object.assign(this.state, state);\r\n    }\r\n  };\r\n\r\n  onChangeSettings = (settings) => {\r\n    this.setStateAndStorage(settings);\r\n  };\r\n\r\n  getDefaultState = () => {\r\n    return Object.assign({}, this.defaultSettings.defaultState);\r\n  };\r\n\r\n  getStateForReset = () => {\r\n    const stateForReset = this.getDefaultState();\r\n    stateForReset.continousWork = this.state.continousWork;\r\n    stateForReset.autoStartTimers = this.state.autoStartTimers;\r\n    stateForReset.workMinutes = this.state.workMinutes;\r\n    stateForReset.shortBreakMinutes = this.state.shortBreakMinutes;\r\n    stateForReset.longBreakMinutes = this.state.longBreakMinutes;\r\n    stateForReset.longBreakFreq = this.state.longBreakFreq;\r\n    stateForReset.timerSeconds = this.state.workMinutes * 60;\r\n    stateForReset.events = this.state.events;\r\n    stateForReset.tasks = this.state.tasks;\r\n    return stateForReset;\r\n  };\r\n\r\n  handleTimerStateChange = (timerState) => {\r\n    this.setStateAndStorage(timerState);\r\n  };\r\n\r\n  handleShowNotification = (notificationTitle) => {\r\n    if (this.notifications && this.notificationsGranted) {\r\n      if (!this.notificationQueued) {\r\n        // makes sure that notifications are sent not more frequently than 10 seconds apart\r\n        this.notificationQueued = true;\r\n        setTimeout(this.clearNotificationQueue, 10000);\r\n        this.notifications.createNotification(notificationTitle);\r\n      }\r\n    }\r\n  };\r\n\r\n  clearNotificationQueue = () => {\r\n    this.notificationQueued = null;\r\n  };\r\n\r\n  handleEventCreated = (event) => {\r\n    let eventTitle = event.wasWork ? \"Work\" : \"Break\";\r\n    if (this.state.selectedTask && event.wasWork) {\r\n      eventTitle += \" (\" + this.state.selectedTask + \")\";\r\n    }\r\n    const newEvent = {\r\n      title: eventTitle,\r\n      isWork: event.wasWork,\r\n      start: new Date(event.start),\r\n      end: new Date(event.end),\r\n      color: event.wasWork ? \"#3788d8\" : \"orange\",\r\n      task: this.state.selectedTask,\r\n    };\r\n    if (newEvent.start.getTime() === newEvent.end.getTime()) {\r\n      return;\r\n    }\r\n    let newEvents = [...this.state.events, newEvent];\r\n    if (\r\n      newEvents.length > 1 &&\r\n      newEvents[newEvents.length - 1].isWork ===\r\n        newEvents[newEvents.length - 2].isWork &&\r\n      newEvents[newEvents.length - 2].end.getTime() ===\r\n        newEvents[newEvents.length - 1].start.getTime() &&\r\n      newEvents[newEvents.length - 1].task ===\r\n        newEvents[newEvents.length - 2].task\r\n    ) {\r\n      newEvents = newEvents.slice(0, newEvents.length - 1);\r\n      newEvents[newEvents.length - 1].end = new Date(event.end);\r\n    }\r\n    this.setStateAndStorage({\r\n      events: newEvents,\r\n    });\r\n    this.setEventsTimestamp();\r\n  };\r\n\r\n  handleTaskCreated = (task) => {\r\n    let newTasks = this.state.tasks;\r\n    newTasks.push(task);\r\n    this.setStateAndStorage({\r\n      tasks: newTasks,\r\n    });\r\n    this.setEventsTimestamp();\r\n  };\r\n\r\n  handleTaskSelected = (task) => {\r\n    const end =\r\n      this.state.timerStartedAt +\r\n      (this.state.timerStartedWithSeconds - this.state.timerSeconds) * 1000;\r\n    this.handleEventCreated({\r\n      wasWork: this.state.isWork,\r\n      start: this.state.timerStartedAt,\r\n      end: end,\r\n    });\r\n\r\n    let newTasks = this.state.tasks;\r\n    if (task) {\r\n      newTasks.splice(this.state.tasks.indexOf(task), 1);\r\n      newTasks.splice(0, 0, task);\r\n    }\r\n\r\n    this.setStateAndStorage({\r\n      timerStartedAt: end,\r\n      timerStartedWithSeconds: this.state.timerSeconds,\r\n      selectedTask: task,\r\n      tasks: newTasks,\r\n    });\r\n  };\r\n\r\n  handleTaskRemoved = (task) => {\r\n    let newTasks = this.state.tasks;\r\n    newTasks.splice(newTasks.indexOf(task), 1);\r\n    let newEvents = this.state.events.filter((e) => e.task !== task);\r\n    this.setState({\r\n      tasks: newTasks,\r\n      events: newEvents,\r\n      eventsTimestamp: Date.now(),\r\n      selectedTask:\r\n        this.state.selectedTask === task ? null : this.state.selectedTask,\r\n    });\r\n  };\r\n\r\n  setEventsTimestamp = () => {\r\n    this.setState({\r\n      eventsTimestamp: Date.now(),\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Helmet defer={false}>\r\n          <title>\r\n            {String(Math.floor(this.state.timerSeconds / 60)).padStart(2, \"0\") +\r\n              \":\" +\r\n              String(this.state.timerSeconds % 60).padStart(2, \"0\")}{\" \"}\r\n            {this.state.isWork === true\r\n              ? \"Work\"\r\n              : this.state.isWork === false\r\n              ? \"Break\"\r\n              : \"\"}\r\n            {this.state.isWork && this.state.selectedTask\r\n              ? \" (\" + this.state.selectedTask + \")\"\r\n              : \"\"}\r\n          </title>\r\n        </Helmet>\r\n        <Container>\r\n          <Timer\r\n            timerSeconds={this.state.timerSeconds}\r\n            lastWorkTimerSeconds={this.state.lastWorkTimerSeconds}\r\n            totalWorkedSeconds={this.state.totalWorkedSeconds}\r\n            isWork={this.state.isWork}\r\n            availableBreakSeconds={this.state.availableBreakSeconds}\r\n            hiddenAvailableBreakSeconds={this.state.hiddenAvailableBreakSeconds}\r\n            totalCombinedTime={this.state.totalCombinedTime}\r\n            cycle={this.state.cycle}\r\n            timerRunning={this.state.timerRunning}\r\n            continousWork={this.state.continousWork}\r\n            timerLastUpdatedAt={this.state.timerLastUpdatedAt}\r\n            autoStartTimers={this.state.autoStartTimers}\r\n            alwaysStartFullWork={this.state.alwaysStartFullWork}\r\n            workMinutes={this.state.workMinutes}\r\n            shortBreakMinutes={this.state.shortBreakMinutes}\r\n            longBreakMinutes={this.state.longBreakMinutes}\r\n            longBreakFreq={this.state.longBreakFreq}\r\n            timerStartedAt={this.state.timerStartedAt}\r\n            timerStartedWithSeconds={this.state.timerStartedWithSeconds}\r\n            setStateAndStorage={this.handleTimerStateChange}\r\n            showNotification={this.handleShowNotification}\r\n            onTimerFinish={this.handleEventCreated}\r\n            onClickReset={this.onClickReset}\r\n          />\r\n          <Row className=\"mt-2 mb-2\">\r\n            <Col>\r\n              <Button variant=\"outline-dark\" onClick={this.onClickSettings}>\r\n                Settings\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"mb-3\">\r\n            <Col>\r\n              <Collapse in={this.state.settingsVisible}>\r\n                <div>\r\n                  <Card>\r\n                    <Card.Header>\r\n                      <CloseButton onClick={this.onClickSettings} />\r\n                    </Card.Header>\r\n                    <Card.Body>\r\n                      <UserSettings\r\n                        workMinutes={this.state.workMinutes}\r\n                        shortBreakMinutes={this.state.shortBreakMinutes}\r\n                        longBreakMinutes={this.state.longBreakMinutes}\r\n                        longBreakFreq={this.state.longBreakFreq}\r\n                        onchange={this.onChangeSettings}\r\n                      />\r\n                    </Card.Body>\r\n                  </Card>\r\n                </div>\r\n              </Collapse>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"mb-3\">\r\n            <Col>\r\n              <SimpleTaskManager\r\n                onTaskCreate={this.handleTaskCreated}\r\n                onTaskSelected={this.handleTaskSelected}\r\n                tasks={this.state.tasks}\r\n                selectedTask={this.state.selectedTask}\r\n                onTaskRemoved={this.handleTaskRemoved}\r\n                eventsTimestamp={this.state.eventsTimestamp}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"mb-3\">\r\n            <Col>\r\n              <TaskTimes\r\n                events={this.state.events}\r\n                eventsTimestamp={this.state.eventsTimestamp}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"mb-2\">\r\n            <Col>\r\n              <Button\r\n                variant=\"outline-dark\"\r\n                onClick={this.onClickToggleCalendar}\r\n              >\r\n                {this.state.calendarVisible ? \"Hide calendar\" : \"Show calendar\"}\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Collapse in={this.state.calendarVisible}>\r\n                <Card>\r\n                  <Card.Body>\r\n                    <FullCalendar\r\n                      events={this.state.events}\r\n                      plugins={[timeGridPlugin, dayGridMonth, listPlugin]}\r\n                      initialView=\"timeGridWeek\"\r\n                      headerToolbar={{\r\n                        right:\r\n                          \"today prev,next dayGridMonth,timeGridWeek,timeGridDay listWeek\",\r\n                      }}\r\n                      slotDuration=\"00:10:00\"\r\n                      height={650}\r\n                      eventDidMount={function (event) {\r\n                        event.el.title = event.event.title;\r\n                      }}\r\n                    />\r\n                  </Card.Body>\r\n                </Card>\r\n              </Collapse>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import Settings from \"./Settings\";\r\n\r\nclass DefaultSettings extends Settings {\r\n  constructor() {\r\n    const workMinutes = 25;\r\n    const shortBreakMinutes = 5;\r\n    const longBreakMinutes = 10;\r\n    const longBreakFreq = 4;\r\n    const continousWork = true;\r\n\r\n    super(\r\n      workMinutes,\r\n      shortBreakMinutes,\r\n      longBreakMinutes,\r\n      longBreakFreq,\r\n      continousWork,\r\n      {\r\n        timerSeconds: workMinutes * 60,\r\n        lastWorkTimerSeconds: workMinutes * 60,\r\n        totalWorkedSeconds: 0,\r\n        isWork: null,\r\n        availableBreakSeconds: 0,\r\n        hiddenAvailableBreakSeconds: 0,\r\n        totalCombinedTime: 0,\r\n        cycle: 0,\r\n        notificationsGranted: false,\r\n        timerRunning: null,\r\n        continousWork: continousWork,\r\n        timerLastUpdatedAt: Date.now(),\r\n        autoStartTimers: true,\r\n        alwaysStartFullWork: true,\r\n        workMinutes: workMinutes,\r\n        shortBreakMinutes: shortBreakMinutes,\r\n        longBreakMinutes: longBreakMinutes,\r\n        longBreakFreq: longBreakFreq,\r\n        settingsVisible: false,\r\n        calendarVisible: false,\r\n        events: [],\r\n        timerStartedAt: null,\r\n        timerStartedWithSeconds: null,\r\n        tasks: [],\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nexport default DefaultSettings;\r\n","class Settings {\r\n  constructor(\r\n    workMinutes,\r\n    shortBreakMinutes,\r\n    longBreakMinutes,\r\n    longBreakFreq,\r\n    continousWork,\r\n    defaultState\r\n  ) {\r\n    this._workMinutes = workMinutes;\r\n    this._shortBreakMinutes = shortBreakMinutes;\r\n    this._longBreakMinutes = longBreakMinutes;\r\n    this._longBreakFreq = longBreakFreq;\r\n    this._continousWork = continousWork;\r\n    this._defaultState = defaultState;\r\n  }\r\n\r\n  get workMinutes() {\r\n    return this._workMinutes;\r\n  }\r\n\r\n  get shortBreakMinutes() {\r\n    return this._shortBreakMinutes;\r\n  }\r\n\r\n  get longBreakMinutes() {\r\n    return this._longBreakMinutes;\r\n  }\r\n\r\n  get longBreakFreq() {\r\n    return this._longBreakFreq;\r\n  }\r\n\r\n  get continousWork() {\r\n    return this._continousWork;\r\n  }\r\n\r\n  get defaultState() {\r\n    return this._defaultState;\r\n  }\r\n}\r\n\r\nexport default Settings;\r\n","class BrowserNotifications {\r\n  requestPermission() {\r\n    return Notification.requestPermission();\r\n  }\r\n\r\n  createNotification(title, params) {\r\n    new Notification(title, params);\r\n  }\r\n}\r\n\r\nexport default BrowserNotifications;\r\n","class LocalStorage {\r\n  get state() {\r\n    return JSON.parse(localStorage.getItem(\"timer_state\"));\r\n  }\r\n\r\n  set state(state) {\r\n    localStorage.setItem(\"timer_state\", JSON.stringify(state));\r\n  }\r\n}\r\n\r\nexport default LocalStorage;\r\n","import \"./custom.scss\";\r\nimport \"@fontsource/signika\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport DefaultSettings from \"./DefaultSettings\";\r\nimport BrowserNotifications from \"./BrowserNotifications\";\r\nimport LocalStorage from \"./LocalStorage\";\r\n\r\nReactDOM.render(\r\n  <App\r\n    basename={process.env.PUBLIC_URL}\r\n    defaultSettings={new DefaultSettings()}\r\n    notifications={new BrowserNotifications()}\r\n    storage={new LocalStorage()}\r\n  />,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals(console.log);\r\n"],"sourceRoot":""}