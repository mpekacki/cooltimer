{"version":3,"sources":["UserSettings.js","Timer.js","Constants.js","SimpleTaskManager.js","TaskTimes.js","App.js","serviceWorker.js","DefaultSettings.js","Settings.js","BrowserNotifications.js","LocalStorage.js","index.js"],"names":["UserSettings","onChangeWorkMinutes","event","props","onchange","workMinutes","target","value","onChangeShortBreakMinutes","shortBreakMinutes","onChangeLongBreakMinutes","longBreakMinutes","onChangeLongBreakFreq","longBreakFreq","class","htmlFor","type","this","onChange","id","React","Component","Timer","onClickStartWorking","setStateAndStorage","isWork","timerRunning","markTimerStart","timerSeconds","Date","now","onClickReturnToWork","lastTimerSeconds","newTimerSeconds","notifyCycleChange","onClickGoOnABreak","availableBreakSeconds","Math","round","tick","secondsDiff","timerLastUpdatedAt","tempState","totalWorkedSeconds","hiddenAvailableBreakSeconds","cycle","continousWork","secondsPassed","availableBreakSecondsIncrement","onTimerFinish","stateChange","newIsWork","newCycle","newAvailableBreakSeconds","autoStartTimers","Object","assign","showNotification","wasWork","oldTimerSeconds","timerEndAt","timerStartedAt","timerStartedWithSeconds","start","end","newState","onClickHoldWork","onClickResumeWork","onChangeContinousWork","checked","onChangeAutoStartTimers","setInterval","seconds","String","floor","padStart","hoursPart","hoursLabel","minutesPart","secondsPart","className","onClick","data-testid","formatSecondsAsTimer","formatSecondsAsText","cyclesUntilLongBreak","Constants","SimpleTaskManager","handleTextInputChange","setState","taskInput","createButtonVisible","tasks","some","task","toUpperCase","visibleTasks","getVisibleTasks","handleSaveClick","onTaskCreate","state","handleTaskSelected","selectedTask","onTaskSelected","prevProps","length","searchText","filter","x","includes","placeholder","CREATE_TASK_PLACEHOLDER_TEXT","SAVE_NEW_TASK_BUTTON_TEXT","data-toggle","style","NO_TASK_TEXT","name","autocomplete","map","TOTALS_KEY","TaskTimes","formatSeconds","hours","minutes","timesMap","calculateTimes","eventsTimestamp","totalToday","totalYesterday","totalThisWeek","events","forEach","isForToday","isToday","isForYesterday","isYesterday","isForThisWeek","isThisWeek","taskName","undefined","today","yesterday","week","len","getTime","entries","entry","todayPercentage","yesterdayPercentage","weekPercentage","charAt","App","onClickReset","window","confirm","getStateForReset","onClickSettings","settingsVisible","storage","onChangeSettings","settings","getDefaultState","defaultSettings","notificationsGranted","stateForReset","handleTimerStateChange","timerState","handleShowNotification","notificationTitle","notifications","createNotification","handleEventCreated","eventTitle","newEvent","title","color","newEvents","slice","setEventsTimestamp","handleTaskCreated","newTasks","push","e","parse","requestPermission","then","result","plugins","timeGridPlugin","Helmet","rel","href","integrity","crossorigin","src","crossOrigin","dayGridMonth","listPlugin","initialView","headerToolbar","right","slotDuration","eventDidMount","el","Boolean","location","hostname","match","DefaultSettings","_workMinutes","_shortBreakMinutes","_longBreakMinutes","_longBreakFreq","BrowserNotifications","Notification","params","LocalStorage","JSON","localStorage","getItem","setItem","stringify","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2b55ff79.chunk.js","sourcesContent":["import React from 'react';\n\nclass UserSettings extends React.Component {\n    onChangeWorkMinutes = (event) => {\n        this.props.onchange({\n            workMinutes: event.target.value\n        });\n    }\n\n    onChangeShortBreakMinutes = (event) => {\n        this.props.onchange({\n            shortBreakMinutes: event.target.value\n        });\n    }\n\n    onChangeLongBreakMinutes = (event) => {\n        this.props.onchange({\n            longBreakMinutes: event.target.value\n        });\n    }\n\n    onChangeLongBreakFreq = (event) => {\n        this.props.onchange({\n            longBreakFreq: event.target.value\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <div class=\"d-flex flex-row form-group\">\n                    <label htmlFor=\"work-minutes\" class=\"p-2 col-form-label\">Work cycle minutes</label>\n                    <div class=\"p-2\">\n                        <input class=\"form-control\" type=\"number\" value={this.props.workMinutes} onChange={this.onChangeWorkMinutes} id=\"work-minutes\" />\n                    </div>\n                </div>\n                <div class=\"d-flex flex-row form-group\">\n                    <label htmlFor=\"short-break-minutes\" class=\"p-2 col-form-label\">Short break minutes</label>\n                    <div class=\"p-2\">\n                        <input class=\"form-control\" type=\"number\" value={this.props.shortBreakMinutes} onChange={this.onChangeShortBreakMinutes} id=\"short-break-minutes\" />\n                    </div>\n                </div>\n                <div class=\"d-flex flex-row form-group\">\n                    <label htmlFor=\"long-break-minutes\" class=\"p-2 col-form-label\">Long break minutes</label>\n                    <div class=\"p-2\">\n                        <input class=\"form-control\" type=\"number\" value={this.props.longBreakMinutes} onChange={this.onChangeLongBreakMinutes} id=\"long-break-minutes\" />\n                    </div>\n                </div>\n                <div class=\"d-flex flex-row form-group\">\n                    <label htmlFor=\"long-break-freq\" class=\"p-2 col-form-label\">Long break after n cycles</label>\n                    <div class=\"p-2\">\n                        <input class=\"form-control\" type=\"number\" value={this.props.longBreakFreq} onChange={this.onChangeLongBreakFreq} id=\"long-break-freq\" />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default UserSettings;","import React from 'react';\n\nclass Timer extends React.Component {\n    constructor(props) {\n        super(props);\n        setInterval(this.tick, 1000);\n        this.tick();\n    }\n\n    formatSecondsAsTimer(seconds) {\n        let minutesPart = String(Math.floor(seconds / 60)).padStart(2, '0');\n        let secondsPart = String(seconds % 60).padStart(2, '0');\n        return minutesPart + ':' + secondsPart;\n    }\n\n    formatSecondsAsText(seconds) {\n        seconds = Math.round(seconds);\n        let hoursPart = Math.floor(seconds / 3600) + '';\n        let hoursLabel = hoursPart === '1' ? 'hour' : 'hours';\n        seconds = seconds % 3600;\n        let minutesPart = Math.floor(seconds / 60) + '';\n        let minutesLabel = minutesPart === '1' ? 'minute' : 'minutes';\n        seconds = seconds % 60;\n        let secondsPart = (seconds % 60) + '';\n        let secondsLabel = secondsPart === '1' ? 'second' : 'seconds';\n        return hoursPart + ' ' + hoursLabel + ' ' + minutesPart + ' ' + minutesLabel + ' ' + secondsPart + ' ' + secondsLabel;\n    }\n\n    onClickStartWorking = () => {\n        this.setStateAndStorage({\n            isWork: true,\n            timerRunning: true\n        });\n        this.markTimerStart(this.props.timerSeconds, Date.now());\n    }\n\n    onClickReturnToWork = () => {\n        const lastTimerSeconds = this.props.timerSeconds;\n        const newTimerSeconds = this.props.workMinutes * 60;\n        this.setStateAndStorage({\n            isWork: true,\n            timerSeconds: newTimerSeconds\n        });\n        this.notifyCycleChange(false, lastTimerSeconds, newTimerSeconds);\n    }\n\n    onClickGoOnABreak = () => {\n        let availableBreakSeconds = Math.round(this.props.availableBreakSeconds);\n        const lastTimerSeconds = this.props.timerSeconds;\n        this.setStateAndStorage({\n            isWork: false,\n            timerSeconds: availableBreakSeconds,\n            availableBreakSeconds: availableBreakSeconds\n        });\n        this.notifyCycleChange(true, lastTimerSeconds, availableBreakSeconds);\n    }\n\n    tick = () => {\n        if (!this.props.timerRunning) {\n            this.setStateAndStorage({\n                timerLastUpdatedAt: Date.now()\n            });\n            return;\n        }\n\n        let now = Date.now();\n        let secondsDiff = Math.round((now - this.props.timerLastUpdatedAt) / 1000);\n        this.tempState = {\n            isWork: this.props.isWork,\n            totalWorkedSeconds: this.props.totalWorkedSeconds,\n            availableBreakSeconds: this.props.availableBreakSeconds,\n            hiddenAvailableBreakSeconds: this.props.hiddenAvailableBreakSeconds,\n            timerLastUpdatedAt: this.props.timerLastUpdatedAt,\n            cycle: this.props.cycle,\n            continousWork: this.props.continousWork,\n            timerSeconds: this.props.timerSeconds\n        };\n\n        for (let secondsPassed = secondsDiff; secondsPassed > 0; secondsPassed--) {\n            this.tempState.timerSeconds--;\n            if (this.tempState.isWork) {\n                this.tempState.totalWorkedSeconds++;\n                let availableBreakSecondsIncrement = this.props.shortBreakMinutes * 1.0 / this.props.workMinutes;\n                if (this.tempState.availableBreakSeconds >= this.props.shortBreakMinutes * 60) {\n                    this.tempState.availableBreakSeconds += availableBreakSecondsIncrement;\n                } else {\n                    this.tempState.hiddenAvailableBreakSeconds += availableBreakSecondsIncrement;\n                }\n            } else {\n                this.tempState.availableBreakSeconds--;\n            }\n            this.tempState.timerLastUpdatedAt = now;\n            if (this.tempState.timerSeconds === 0) {\n                this.onTimerFinish();\n            }\n        }\n\n        this.setStateAndStorage(this.tempState);\n    }\n\n    onTimerFinish = () => {\n        let isWork = this.tempState.isWork;\n        let stateChange = {};\n        if (isWork) {\n            let newCycle = this.tempState.cycle + 1;\n            let newAvailableBreakSeconds = this.tempState.availableBreakSeconds;\n            if (newCycle === this.props.longBreakFreq) {\n                newCycle = 0;\n                newAvailableBreakSeconds += this.props.longBreakMinutes * 60 - this.props.shortBreakMinutes * 60;\n            }\n            newAvailableBreakSeconds += this.tempState.hiddenAvailableBreakSeconds;\n            newAvailableBreakSeconds = Math.round(newAvailableBreakSeconds);\n\n            let newTimerSeconds;\n            let newIsWork;\n\n            if (this.tempState.continousWork) {\n                newTimerSeconds = this.props.workMinutes * 60;\n                newIsWork = true;\n            } else {\n                newTimerSeconds = newAvailableBreakSeconds;\n                newIsWork = false;\n            }\n\n            stateChange = {\n                timerSeconds: newTimerSeconds,\n                availableBreakSeconds: newAvailableBreakSeconds,\n                hiddenAvailableBreakSeconds: 0,\n                isWork: newIsWork,\n                cycle: newCycle\n            };\n        } else {\n            stateChange = {\n                timerSeconds: this.props.workMinutes * 60,\n                isWork: true\n            };\n        }\n\n        stateChange.timerRunning = this.props.autoStartTimers;\n\n        const lastTimerSeconds = this.tempState.timerSeconds;\n        this.tempState = Object.assign(this.tempState, stateChange);\n\n        this.props.showNotification(isWork ? 'Work finished' : 'Break finished');\n        this.notifyCycleChange(isWork, lastTimerSeconds, this.tempState.timerSeconds);\n    }\n\n    notifyCycleChange = (wasWork, oldTimerSeconds, newTimerSeconds) => {\n        const timerEndAt = this.props.timerStartedAt + (this.props.timerStartedWithSeconds - oldTimerSeconds) * 1000;\n        const event = {\n            wasWork: wasWork,\n            start: this.props.timerStartedAt,\n            end: timerEndAt\n        };\n        this.props.onTimerFinish(event);\n        this.markTimerStart(newTimerSeconds, timerEndAt);\n    }\n\n    markTimerStart = (timerSeconds, timerStartedAt) => {\n        const newState = {\n            timerStartedAt: timerStartedAt,\n            timerStartedWithSeconds: timerSeconds\n        };\n        this.props.setStateAndStorage(newState);\n    }\n\n    onClickHoldWork = () => {\n        this.setStateAndStorage({\n            timerRunning: false\n        });\n        this.notifyCycleChange(this.props.isWork, this.props.timerSeconds, this.props.timerSeconds);\n    }\n\n    onClickResumeWork = () => {\n        this.setStateAndStorage({\n            timerRunning: true\n        });\n        this.markTimerStart(this.props.timerSeconds, Date.now());\n    }\n\n    onChangeContinousWork = (event) => {\n        this.setStateAndStorage({\n            continousWork: event.target.checked\n        });\n    }\n\n    onChangeAutoStartTimers = (event) => {\n        this.setStateAndStorage({\n            autoStartTimers: event.target.checked\n        });\n    }\n\n    setStateAndStorage = (newState) => {\n        this.props.setStateAndStorage(newState);\n    }\n\n    get cyclesUntilLongBreak() {\n        return this.props.longBreakFreq - this.props.cycle;\n    }\n\n    render() {\n        return (\n            <div>\n                <div class=\"row\">\n                    <div class=\"col-sm\">\n                        {this.props.timerRunning === true &&\n                            <button className=\"btn btn-warning\" onClick={this.onClickHoldWork}>Hold work</button>\n                        }\n                        {this.props.timerRunning === false &&\n                            <button className=\"btn btn-secondary\" onClick={this.onClickResumeWork} data-testid=\"resume-work-btn\">Resume work</button>\n                        }\n                        {this.props.isWork === null &&\n                            <button className=\"btn btn-success\" onClick={this.onClickStartWorking} data-testid=\"start-working-btn\">Start working</button>\n                        }\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-sm\">\n                        <h1 data-testid=\"timer\">{this.formatSecondsAsTimer(this.props.timerSeconds)}</h1>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-sm\">\n                        {(this.props.isWork === true && this.props.availableBreakSeconds) ?\n                            <>\n                                <button className=\"btn btn-success\" onClick={this.onClickGoOnABreak}>Go on a break</button>\n                            </> : null\n                        }\n                        {this.props.isWork === false ?\n                            <>\n                                <button className=\"btn btn-secondary\" onClick={this.onClickReturnToWork}>Return to work</button>\n                            </> : null\n                        }\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-sm font-weight-light text-md-right\">\n                        Total time worked:\n            </div>\n                    <div class=\"col-sm text-md-left\" data-testid=\"totalWorkedTime\">\n                        {this.formatSecondsAsText(this.props.totalWorkedSeconds)}\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-sm font-weight-light text-md-right\">\n                        Available break time:\n            </div>\n                    <div class=\"col-sm text-md-left\" data-testid=\"availableBreakTime\">\n                        {this.formatSecondsAsText(this.props.availableBreakSeconds)}\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-sm font-weight-light text-md-right\">\n                        Cycles until long break ({this.props.longBreakMinutes} minutes):\n            </div>\n                    <div class=\"col-sm text-md-left\" data-testid=\"longBreakInfo\">\n                        {this.cyclesUntilLongBreak}\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-sm\">\n                        <div class=\"form-check\">\n                            <input class=\"form-check-input\" type=\"checkbox\" value=\"\" onChange={this.onChangeContinousWork}\n                                checked={this.props.continousWork} data-testid=\"cont-work\" id=\"cont-work-check\" />\n                            <label class=\"form-check-label\" htmlFor=\"cont-work-check\">\n                                Continuous work\n                </label>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-sm\">\n                        <div class=\"form-check\">\n                            <input class=\"form-check-input\" type=\"checkbox\" value=\"\" onChange={this.onChangeAutoStartTimers}\n                                checked={this.props.autoStartTimers} data-testid=\"auto-start-timers\" id=\"auto-start-timers-check\" />\n                            <label class=\"form-check-label\" htmlFor=\"auto-start-timers-check\">\n                                Start timers automatically\n                </label>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Timer;","export default class Constants {\n    static get CREATE_TASK_PLACEHOLDER_TEXT() {\n        return 'Enter task name...';\n    }\n\n    static get SAVE_NEW_TASK_BUTTON_TEXT() {\n        return 'Save new task';\n    }\n\n    static get NO_TASK_TEXT() {\n        return 'No task';\n    }\n}","import React from 'react';\nimport Constants from './Constants';\n\nclass SimpleTaskManager extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      taskInput: '',\n      selectedTask: props.selectedTask,\n      visibleTasks: props.tasks,\n      createButtonVisible: false\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.selectedTask !== prevProps.selectedTask || !!this.props.tasks !== !!prevProps.tasks || (this.props.tasks && prevProps.tasks && this.props.tasks.length !== prevProps.tasks.length)) {\n      this.setState({\n        selectedTask: this.props.selectedTask,\n        visibleTasks: this.getVisibleTasks(this.state.taskInput)\n      });\n    }\n  }\n\n  handleTextInputChange = (event) => {\n    this.setState({\n      taskInput: event.target.value,\n      createButtonVisible: event.target.value && (!this.props.tasks || !this.props.tasks.some(task => task.toUpperCase() === event.target.value.toUpperCase())),\n      visibleTasks: this.getVisibleTasks(event.target.value)\n    });\n  }\n\n  handleSaveClick = () => {\n    this.props.onTaskCreate(this.state.taskInput);\n    this.setState({\n      taskInput: '',\n      visibleTasks: this.getVisibleTasks('')\n    });\n  }\n\n  handleTaskSelected = (event) => {\n    let value = event.target.value;\n    if (value === \"\") {\n      value = null;\n    }\n    this.setState({\n      selectedTask: value\n    })\n    this.props.onTaskSelected(value);\n  }\n\n  getVisibleTasks(searchText) {\n    return this.props.tasks ? this.props.tasks.filter(x => x.toUpperCase().includes(searchText.toUpperCase())) : [];\n  }\n\n  render() {\n    return (\n      <div>\n        <div class=\"form-inline mb-2\">\n          <input type=\"text\" class=\"form-control\" onChange={this.handleTextInputChange} placeholder={Constants.CREATE_TASK_PLACEHOLDER_TEXT} value={this.state.taskInput} />\n          {(this.state.createButtonVisible ? <button class=\"btn btn-primary\" onClick={this.handleSaveClick}>{Constants.SAVE_NEW_TASK_BUTTON_TEXT}</button> : null)}\n        </div>\n        <div className=\"btn-group btn-group-toggle\" data-toggle=\"buttons\" style={{ 'flex-wrap': 'wrap' }}>\n          <>\n            <label className={'btn btn-secondary' + (this.state.selectedTask == null ? ' active' : '')} htmlFor=\"no-task\">{Constants.NO_TASK_TEXT}\n              <input type=\"radio\" id=\"no-task\" name=\"task\" value=\"\" autocomplete=\"off\" onChange={this.handleTaskSelected} checked={this.state.selectedTask == null}></input>\n            </label>\n          </>\n          {this.state && this.state.visibleTasks && this.state.visibleTasks.map(\n            task => {\n              return (\n                <>\n                  <label className={'btn btn-secondary' + (task === this.state.selectedTask ? ' active' : '')} htmlFor={task} data-testid={'button-' + task}>{task}\n                    <input type=\"radio\" id={task} name=\"task\" value={task} autocomplete=\"off\" onChange={this.handleTaskSelected} checked={task === this.state.selectedTask}></input>\n                  </label>\n                </>\n              )\n            }\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SimpleTaskManager;","import React from 'react';\r\nimport { isToday, isYesterday, isThisWeek } from 'date-fns';\r\nimport Constants from './Constants';\r\n\r\nconst TOTALS_KEY = '@@@TOTALS';\r\n\r\nclass TaskTimes extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            timesMap: this.calculateTimes()\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.eventsTimestamp !== prevProps.eventsTimestamp) {\r\n            this.setState({\r\n                timesMap: this.calculateTimes()\r\n            });\r\n        }\r\n    }\r\n\r\n    formatSeconds = (seconds) => {\r\n        seconds /= 1000;\r\n        let hours = Math.floor(seconds / 3600);\r\n        let minutes = Math.floor((seconds % 3600) / 60);\r\n        return `${hours}h${minutes}m`;\r\n    }\r\n\r\n    calculateTimes() {\r\n        const timesMap = {};\r\n        let totalToday = 0, totalYesterday = 0, totalThisWeek = 0;\r\n        this.props.events.forEach(event => {\r\n            if (!event.isWork) {\r\n                return;\r\n            }\r\n            let isForToday = isToday(event.start);;\r\n            let isForYesterday = isYesterday(event.start);\r\n            let isForThisWeek = isThisWeek(event.start);\r\n            if (!isForToday && !isForYesterday && !isForThisWeek) {\r\n                return;\r\n            }\r\n            let taskName = event.task;\r\n            if (taskName === null || taskName === undefined || taskName === '' || taskName === 'null') {\r\n                taskName = Constants.NO_TASK_TEXT;\r\n            }\r\n            if (!(taskName in timesMap)) {\r\n                timesMap[taskName] = {\r\n                    today: 0,\r\n                    yesterday: 0,\r\n                    week: 0\r\n                };\r\n            }\r\n            if (event.end !== undefined) {\r\n                let len = event.end.getTime() - event.start.getTime();\r\n                if (isForToday) {\r\n                    timesMap[taskName].today += len;\r\n                    totalToday += len;\r\n                } else if (isForYesterday) {\r\n                    timesMap[taskName].yesterday += len;\r\n                    totalYesterday += len;\r\n                }\r\n                if (isForThisWeek) {\r\n                    timesMap[taskName].week += len;\r\n                    totalThisWeek += len;\r\n                }\r\n            }\r\n        });\r\n        Object.entries(timesMap).forEach((entry) => {\r\n            entry[1].todayPercentage = Math.round(entry[1].today / totalToday * 100) + '%';\r\n            entry[1].yesterdayPercentage = Math.round(entry[1].yesterday / totalYesterday * 100) + '%';\r\n            entry[1].weekPercentage = Math.round(entry[1].week / totalThisWeek * 100) + '%';\r\n        });\r\n        timesMap[TOTALS_KEY] = {\r\n            today: totalToday,\r\n            yesterday: totalYesterday,\r\n            week: totalThisWeek\r\n        }\r\n        return timesMap;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <table class=\"table-sm\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Task</th>\r\n                        <th>Today</th>\r\n                        <th>%</th>\r\n                        <th>Yesterday</th>\r\n                        <th>%</th>\r\n                        <th>Week</th>\r\n                        <th>%</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {Object.entries(this.state.timesMap).filter(entry => entry[0] !== TOTALS_KEY).map(entry => (\r\n                        <tr key={entry[0]}>\r\n                            <td>{entry[0]}</td>\r\n                            <td data-testid={'today-' + entry[0].charAt(0) + entry[0].length}>{this.formatSeconds(entry[1].today)}</td>\r\n                            <td data-testid={'todayp-' + entry[0].charAt(0) + entry[0].length}>{entry[1].todayPercentage}</td>\r\n                            <td data-testid={'yesterday-' + entry[0].charAt(0) + entry[0].length}>{this.formatSeconds(entry[1].yesterday)}</td>\r\n                            <td data-testid={'yesterdayp-' + entry[0].charAt(0) + entry[0].length}>{entry[1].yesterdayPercentage}</td>\r\n                            <td data-testid={'week-' + entry[0].charAt(0) + entry[0].length}>{this.formatSeconds(entry[1].week)}</td>\r\n                            <td data-testid={'weekp-' + entry[0].charAt(0) + entry[0].length}>{entry[1].weekPercentage}</td>\r\n                        </tr>\r\n                    ))}\r\n                    <tr>\r\n                        <td>Total</td>\r\n                        <td data-testid={'today-total'}>{this.formatSeconds(this.state.timesMap[TOTALS_KEY].today)}</td>\r\n                        <td data-testid={'todayp-total'}>100%</td>\r\n                        <td data-testid={'yesterday-total'}>{this.formatSeconds(this.state.timesMap[TOTALS_KEY].yesterday)}</td>\r\n                        <td data-testid={'yesterdayp-total'}>100%</td>\r\n                        <td data-testid={'week-total'}>{this.formatSeconds(this.state.timesMap[TOTALS_KEY].week)}</td>\r\n                        <td data-testid={'weekp-total'}>100%</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TaskTimes;","import React from 'react';\nimport { Helmet } from 'react-helmet';\nimport './App.css';\nimport UserSettings from './UserSettings';\nimport Timer from './Timer';\nimport FullCalendar from '@fullcalendar/react';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport dayGridMonth from '@fullcalendar/daygrid';\nimport listPlugin from '@fullcalendar/list';\nimport SimpleTaskManager from './SimpleTaskManager';\nimport TaskTimes from './TaskTimes';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.defaultSettings = props.defaultSettings;\n    this.storage = props.storage;\n    this.state = this.getDefaultState();\n    if (this.storage && this.storage.state) {\n      this.state = Object.assign(this.state, this.storage.state);\n      this.state.events.forEach(e => {\n        e.start = new Date(Date.parse(e.start));\n        e.end = new Date(Date.parse(e.end));\n      });\n    }\n    if (props.notifications) {\n      this.notifications = props.notifications;\n      this.notifications.requestPermission().then((result) => {\n        if (result === 'granted') {\n          this.notificationsGranted = true;\n        }\n      });\n    }\n    this.plugins = [timeGridPlugin];\n  }\n\n  onClickReset = () => {\n    if (window.confirm(\"Are you sure you want to reset everything to inital state?\")) {\n      this.setStateAndStorage(this.getStateForReset());\n    }\n  }\n\n  onClickSettings = () => {\n    this.setState({\n      settingsVisible: !this.state.settingsVisible\n    });\n  }\n\n  setStateAndStorage = (state) => {\n    this.setState(state);\n    if (this.storage) {\n      this.storage.state = Object.assign(this.state, state);\n    }\n  }\n\n  onChangeSettings = (settings) => {\n    this.setStateAndStorage(settings);\n  }\n\n  getDefaultState = () => {\n    return {\n      timerSeconds: this.defaultSettings.workMinutes * 60,\n      totalWorkedSeconds: 0,\n      isWork: null,\n      availableBreakSeconds: 0,\n      hiddenAvailableBreakSeconds: 0,\n      cycle: 0,\n      notificationsGranted: false,\n      timerRunning: null,\n      continousWork: false,\n      timerLastUpdatedAt: Date.now(),\n      autoStartTimers: true,\n      workMinutes: this.defaultSettings.workMinutes,\n      shortBreakMinutes: this.defaultSettings.shortBreakMinutes,\n      longBreakMinutes: this.defaultSettings.longBreakMinutes,\n      longBreakFreq: this.defaultSettings.longBreakFreq,\n      settingsVisible: false,\n      events: [],\n      timerStartedAt: null,\n      timerStartedWithSeconds: null,\n      tasks: []\n    };\n  }\n\n  getStateForReset = () => {\n    const stateForReset = this.getDefaultState();\n    stateForReset.continousWork = this.state.continousWork;\n    stateForReset.autoStartTimers = this.state.autoStartTimers;\n    stateForReset.workMinutes = this.state.workMinutes;\n    stateForReset.shortBreakMinutes = this.state.shortBreakMinutes;\n    stateForReset.longBreakMinutes = this.state.longBreakMinutes;\n    stateForReset.longBreakFreq = this.state.longBreakFreq;\n    stateForReset.timerSeconds = this.state.workMinutes * 60;\n    stateForReset.events = this.state.events;\n    stateForReset.tasks = this.state.tasks;\n    return stateForReset;\n  }\n\n  handleTimerStateChange = (timerState) => {\n    // if (timerState.timerStartedAt < this.state.timerStartedAt) {\n    //   timerState.timerStartedAt = this.state.timerStartedAt;\n    // }\n    this.setStateAndStorage(timerState);\n  }\n\n  handleShowNotification = (notificationTitle) => {\n    if (this.notifications && this.notificationsGranted) {\n      this.notifications.createNotification(notificationTitle);\n    }\n  }\n\n  handleEventCreated = (event) => {\n    let eventTitle = event.wasWork ? 'Work' : 'Break';\n    if (this.state.selectedTask !== undefined) {\n      eventTitle += ' (' + this.state.selectedTask + ')';\n    }\n    const newEvent = {\n      title: eventTitle,\n      isWork: event.wasWork,\n      start: new Date(event.start),\n      end: new Date(event.end),\n      color: event.wasWork ? '#3788d8' : 'orange',\n      task: this.state.selectedTask\n    };\n    if (newEvent.start.getTime() === newEvent.end.getTime()) {\n      return;\n    }\n    let newEvents = [...this.state.events, newEvent];\n    if (newEvents.length > 1 && newEvents[newEvents.length - 1].isWork === newEvents[newEvents.length - 2].isWork\n      && newEvents[newEvents.length - 2].end.getTime() === newEvents[newEvents.length - 1].start.getTime()\n      && newEvents[newEvents.length - 1].task === newEvents[newEvents.length - 2].task) {\n      newEvents = newEvents.slice(0, newEvents.length - 1);\n      newEvents[newEvents.length - 1].end = new Date(event.end);\n    }\n    this.setStateAndStorage({\n      events: newEvents\n    });\n    this.setEventsTimestamp();\n  }\n\n  handleTaskCreated = (task) => {\n    let newTasks = this.state.tasks;\n    newTasks.push(task);\n    this.setStateAndStorage({\n      tasks: newTasks\n    });\n    this.setEventsTimestamp();\n  }\n\n  handleTaskSelected = (task) => {\n    const end = this.state.timerStartedAt + (this.state.timerStartedWithSeconds - this.state.timerSeconds) * 1000;\n    this.handleEventCreated({\n      wasWork: this.state.isWork,\n      start: this.state.timerStartedAt,\n      end: end\n    });\n\n    this.setStateAndStorage({\n      timerStartedAt: end,\n      timerStartedWithSeconds: this.state.timerSeconds,\n      selectedTask: task\n    });\n  }\n\n  setEventsTimestamp() {\n    this.setState({\n      eventsTimestamp: Date.now()\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Helmet>\n          <title>Timer</title>\n        </Helmet>\n\n        <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\" integrity=\"sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z\" crossorigin=\"anonymous\"></link>\n\n        <script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossOrigin=\"anonymous\"></script>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\" integrity=\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\" crossOrigin=\"anonymous\"></script>\n        <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\" integrity=\"sha384-B4gt1jrGC7Jh4AgTPSdUtOBvfO8shuf57BaghqFfPlYxofvL8/KUEfYiJOMMV+rV\" crossorigin=\"anonymous\"></script>\n\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-sm offset-sm-11\">\n              <button className=\"btn\" onClick={this.onClickReset} data-testid=\"reset-btn\">Reset</button>\n            </div>\n          </div>\n          <Timer timerSeconds={this.state.timerSeconds}\n            totalWorkedSeconds={this.state.totalWorkedSeconds}\n            isWork={this.state.isWork}\n            availableBreakSeconds={this.state.availableBreakSeconds}\n            hiddenAvailableBreakSeconds={this.state.hiddenAvailableBreakSeconds}\n            cycle={this.state.cycle}\n            timerRunning={this.state.timerRunning}\n            continousWork={this.state.continousWork}\n            timerLastUpdatedAt={this.state.timerLastUpdatedAt}\n            autoStartTimers={this.state.autoStartTimers}\n            workMinutes={this.state.workMinutes}\n            shortBreakMinutes={this.state.shortBreakMinutes}\n            longBreakMinutes={this.state.longBreakMinutes}\n            longBreakFreq={this.state.longBreakFreq}\n            timerStartedAt={this.state.timerStartedAt}\n            timerStartedWithSeconds={this.state.timerStartedWithSeconds}\n            setStateAndStorage={this.handleTimerStateChange}\n            showNotification={this.handleShowNotification}\n            onTimerFinish={this.handleEventCreated} />\n          <button className=\"btn m-2\" type=\"button\" onClick={this.onClickSettings}>\n            Settings\n          </button>\n          <div className={this.state.settingsVisible ? 'collapse show' : 'collapse'}>\n            <div className=\"card card-body row\">\n              <UserSettings\n                workMinutes={this.state.workMinutes} shortBreakMinutes={this.state.shortBreakMinutes}\n                longBreakMinutes={this.state.longBreakMinutes} longBreakFreq={this.state.longBreakFreq}\n                onchange={this.onChangeSettings} />\n            </div>\n          </div>\n          <div className=\"row mb-3\">\n            <SimpleTaskManager onTaskCreate={this.handleTaskCreated} onTaskSelected={this.handleTaskSelected} tasks={this.state.tasks} selectedTask={this.state.selectedTask} />\n          </div>\n          <div className=\"row mb-3\">\n            <TaskTimes events={this.state.events} eventsTimestamp={this.state.eventsTimestamp} />\n          </div>\n          <div className=\"card card-body\">\n            <FullCalendar events={this.state.events} plugins={[timeGridPlugin, dayGridMonth, listPlugin]} initialView=\"timeGridWeek\" headerToolbar={\n              { right: 'today prev,next dayGridMonth,timeGridWeek,timeGridDay listWeek' }\n            } slotDuration='00:10:00' eventDidMount={function (event) {\n              event.el.title = event.event.title;\n            }} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import Settings from './Settings';\r\n\r\nclass DefaultSettings extends Settings {\r\n  constructor() {\r\n    super(25, 5, 10, 4, 480);\r\n  }\r\n}\r\n\r\nexport default DefaultSettings;","class Settings {\r\n    constructor(workMinutes, shortBreakMinutes, longBreakMinutes, longBreakFreq) {\r\n        this._workMinutes = workMinutes;\r\n        this._shortBreakMinutes = shortBreakMinutes;\r\n        this._longBreakMinutes = longBreakMinutes;\r\n        this._longBreakFreq = longBreakFreq;\r\n    }\r\n\r\n    get workMinutes() {\r\n        return this._workMinutes;\r\n    }\r\n\r\n    get shortBreakMinutes() {\r\n        return this._shortBreakMinutes;\r\n    }\r\n\r\n    get longBreakMinutes() {\r\n        return this._longBreakMinutes;\r\n    }\r\n\r\n    get longBreakFreq() {\r\n        return this._longBreakFreq;\r\n    }\r\n}\r\n\r\nexport default Settings;","class BrowserNotifications {\r\n    requestPermission() {\r\n        return Notification.requestPermission();\r\n    }\r\n\r\n    createNotification(title, params) {\r\n        new Notification(title, params);\r\n    }\r\n}\r\n\r\nexport default BrowserNotifications;","class LocalStorage {\r\n    get state() {\r\n        return JSON.parse(localStorage.getItem('timer_state'));\r\n    }\r\n\r\n    set state(state) {\r\n        localStorage.setItem('timer_state', JSON.stringify(state));\r\n    }\r\n}\r\n\r\nexport default LocalStorage;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport DefaultSettings from './DefaultSettings';\r\nimport BrowserNotifications from './BrowserNotifications';\r\nimport LocalStorage from './LocalStorage';\r\n\r\nReactDOM.render(<App basename={ process.env.PUBLIC_URL } defaultSettings={ new DefaultSettings() } notifications={ new BrowserNotifications() } storage={ new LocalStorage() }/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}