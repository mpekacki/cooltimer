{"version":3,"sources":["UserSettings.js","Constants.js","Timer.js","SimpleTaskManager.js","TaskTimes.js","App.js","serviceWorker.js","DefaultSettings.js","Settings.js","BrowserNotifications.js","LocalStorage.js","index.js"],"names":["UserSettings","onChangeWorkMinutes","event","props","onchange","workMinutes","target","value","onChangeShortBreakMinutes","shortBreakMinutes","onChangeLongBreakMinutes","longBreakMinutes","onChangeLongBreakFreq","longBreakFreq","className","htmlFor","type","this","onChange","id","React","Component","Constants","Timer","onClickStartWorking","setStateAndStorage","isWork","timerRunning","markTimerStart","timerSeconds","Date","now","onClickReturnToWork","lastTimerSeconds","newTimerSeconds","notifyCycleChange","onClickGoOnABreak","availableBreakSeconds","Math","round","tick","secondsDiff","timerLastUpdatedAt","newState","calculateNewState","onTimerFinish","tempState","stateChange","newIsWork","newCycle","cycle","newAvailableBreakSeconds","hiddenAvailableBreakSeconds","continousWork","autoStartTimers","Object","assign","showNotification","wasWork","oldTimerSeconds","timerEndAt","timerStartedAt","timerStartedWithSeconds","start","end","onClickHoldWork","handleClose","onClickResumeWork","onChangeContinousWork","checked","onChangeAutoStartTimers","handleShow","setState","showHoldModal","interval","setInterval","state","clearInterval","seconds","String","floor","padStart","hoursPart","hoursLabel","minutesPart","secondsPart","totalWorkedSeconds","totalCombinedTime","secondsPassed","availableBreakSecondsIncrement","Modal","show","onHide","Header","closeButton","Title","CONFIRM_HOLD_TIMER_MODAL_HEADER","Body","CONFIRM_HOLD_TIMER_MODAL_TEXT","Footer","Button","variant","onClick","CONFIRM_HOLD_TIMER_BUTTON_TEXT","Row","Col","HOLD_WORK_BUTTON_TEXT","data-testid","RESUME_WORK_BUTTON_TEXT","START_WORKING_BUTTON_TEXT","WORK_LABEL_TEXT","BREAK_LABEL_TEXT","formatSecondsAsTimer","GO_ON_A_BREAT_BUTTON_TEXT","RETURN_TO_WORK_BUTTON_TEXT","formatSecondsAsText","cyclesUntilLongBreak","CONTINOUS_WORK_TEXT","START_TIMERS_AUTOMATICALLY_TEXT","SimpleTaskManager","handleTextInputChange","taskInput","createButtonVisible","trim","tasks","some","task","toUpperCase","visibleTasks","getVisibleTasks","handleSaveClick","onTaskCreate","handleTaskSelected","selectedTask","onTaskSelected","prevProps","length","searchText","filter","x","includes","Container","Form","inline","Group","controlId","Control","placeholder","CREATE_TASK_PLACEHOLDER_TEXT","SAVE_NEW_TASK_BUTTON_TEXT","ToggleButtonGroup","name","style","NO_TASK_TEXT","autoComplete","map","TOTALS_KEY","TaskTimes","formatSeconds","hours","minutes","timesMap","calculateTimes","eventsTimestamp","totalToday","totalYesterday","totalThisWeek","totalThisMonth","events","forEach","isForToday","isToday","isForYesterday","isYesterday","isForThisWeek","isThisWeek","isForThisMonth","isThisMonth","taskName","undefined","today","yesterday","week","month","len","getTime","entries","entry","todayPercentage","getPercentage","yesterdayPercentage","weekPercentage","monthPercentage","percent","isNaN","Table","size","responsive","charAt","App","onClickReset","window","confirm","RESET_CONFIRMATION_TEXT","getStateForReset","onClickSettings","settingsVisible","storage","onChangeSettings","settings","getDefaultState","defaultSettings","notificationsGranted","stateForReset","handleTimerStateChange","timerState","handleShowNotification","notificationTitle","notifications","notificationQueued","setTimeout","clearNotificationQueue","createNotification","handleEventCreated","eventTitle","newEvent","title","color","newEvents","slice","setEventsTimestamp","handleTaskCreated","newTasks","push","splice","indexOf","e","parse","requestPermission","then","result","plugins","timeGridPlugin","Helmet","rel","href","integrity","crossOrigin","src","sm","offset","RESET_BUTTON_TEXT","Collapse","in","Card","dayGridMonth","listPlugin","initialView","headerToolbar","right","slotDuration","eventDidMount","el","Boolean","location","hostname","match","DefaultSettings","_workMinutes","_shortBreakMinutes","_longBreakMinutes","_longBreakFreq","_continousWork","BrowserNotifications","Notification","params","LocalStorage","JSON","localStorage","getItem","setItem","stringify","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ea2749ec.chunk.js","sourcesContent":["import React from 'react';\n\nclass UserSettings extends React.Component {\n    onChangeWorkMinutes = (event) => {\n        this.props.onchange({\n            workMinutes: event.target.value\n        });\n    }\n\n    onChangeShortBreakMinutes = (event) => {\n        this.props.onchange({\n            shortBreakMinutes: event.target.value\n        });\n    }\n\n    onChangeLongBreakMinutes = (event) => {\n        this.props.onchange({\n            longBreakMinutes: event.target.value\n        });\n    }\n\n    onChangeLongBreakFreq = (event) => {\n        this.props.onchange({\n            longBreakFreq: event.target.value\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"d-flex flex-row form-group\">\n                    <label htmlFor=\"work-minutes\" className=\"p-2 col-form-label\">Work cycle minutes</label>\n                    <div className=\"p-2\">\n                        <input className=\"form-control\" type=\"number\" value={this.props.workMinutes} onChange={this.onChangeWorkMinutes} id=\"work-minutes\" />\n                    </div>\n                </div>\n                <div className=\"d-flex flex-row form-group\">\n                    <label htmlFor=\"short-break-minutes\" className=\"p-2 col-form-label\">Short break minutes</label>\n                    <div className=\"p-2\">\n                        <input className=\"form-control\" type=\"number\" value={this.props.shortBreakMinutes} onChange={this.onChangeShortBreakMinutes} id=\"short-break-minutes\" />\n                    </div>\n                </div>\n                <div className=\"d-flex flex-row form-group\">\n                    <label htmlFor=\"long-break-minutes\" className=\"p-2 col-form-label\">Long break minutes</label>\n                    <div className=\"p-2\">\n                        <input className=\"form-control\" type=\"number\" value={this.props.longBreakMinutes} onChange={this.onChangeLongBreakMinutes} id=\"long-break-minutes\" />\n                    </div>\n                </div>\n                <div className=\"d-flex flex-row form-group\">\n                    <label htmlFor=\"long-break-freq\" className=\"p-2 col-form-label\">Long break after n cycles</label>\n                    <div className=\"p-2\">\n                        <input className=\"form-control\" type=\"number\" value={this.props.longBreakFreq} onChange={this.onChangeLongBreakFreq} id=\"long-break-freq\" />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default UserSettings;","export default class Constants {\n    static get CREATE_TASK_PLACEHOLDER_TEXT() {\n        return 'Enter task name...';\n    }\n\n    static get SAVE_NEW_TASK_BUTTON_TEXT() {\n        return 'Save new task';\n    }\n\n    static get NO_TASK_TEXT() {\n        return 'No task';\n    }\n\n    static get GO_ON_A_BREAT_BUTTON_TEXT() {\n        return 'Go on a break';\n    }\n\n    static get RETURN_TO_WORK_BUTTON_TEXT() {\n        return 'Return to work';\n    }\n\n    static get START_WORKING_BUTTON_TEXT() {\n        return 'Start timer';\n    }\n\n    static get HOLD_WORK_BUTTON_TEXT() {\n        return 'Hold timer';\n    }\n\n    static get RESUME_WORK_BUTTON_TEXT() {\n        return 'Resume timer';\n    }\n\n    static get CONTINOUS_WORK_TEXT() {\n        return 'Continous work';\n    }\n\n    static get START_TIMERS_AUTOMATICALLY_TEXT() {\n        return 'Start new timers automatically';\n    }\n\n    static get RESET_CONFIRMATION_TEXT() {\n        return 'Do you want to reset timer values? (tasks, events, settings etc. will be kept)';\n    }\n\n    static get RESET_BUTTON_TEXT() {\n        return 'Reset timer';\n    }\n\n    static get CONFIRM_HOLD_TIMER_BUTTON_TEXT() {\n        return 'Yes, hold timer';\n    }\n\n    static get CONFIRM_HOLD_TIMER_MODAL_HEADER() {\n        return 'Warning!';\n    }\n\n    static get CONFIRM_HOLD_TIMER_MODAL_TEXT() {\n        return 'This option should only be used if you\\'re stopping work for a significant amount of time. It should not be used for normal mid-work breaks - instead, please wait for the \"Go on a break\" button to become available.\\n\\nAre sure you want to hold the timer anyway?';\n    }\n\n    static get WORK_LABEL_TEXT() {\n        return 'Work';\n    }\n\n    static get BREAK_LABEL_TEXT() {\n        return 'Break';\n    }\n}","import React from 'react';\nimport Constants from './Constants';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nclass Timer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.interval = setInterval(this.tick, 1000);\n        this.tick();\n        this.state = {\n            showHoldModal: false\n        };\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    formatSecondsAsTimer(seconds) {\n        let minutesPart = String(Math.floor(seconds / 60)).padStart(2, '0');\n        let secondsPart = String(seconds % 60).padStart(2, '0');\n        return minutesPart + ':' + secondsPart;\n    }\n\n    formatSecondsAsText(seconds) {\n        seconds = Math.round(seconds);\n        let hoursPart = Math.floor(seconds / 3600) + '';\n        let hoursLabel = hoursPart === '1' ? 'hour' : 'hours';\n        seconds = seconds % 3600;\n        let minutesPart = Math.floor(seconds / 60) + '';\n        let minutesLabel = minutesPart === '1' ? 'minute' : 'minutes';\n        seconds = seconds % 60;\n        let secondsPart = (seconds % 60) + '';\n        let secondsLabel = secondsPart === '1' ? 'second' : 'seconds';\n        return hoursPart + ' ' + hoursLabel + ' ' + minutesPart + ' ' + minutesLabel + ' ' + secondsPart + ' ' + secondsLabel;\n    }\n\n    onClickStartWorking = () => {\n        this.setStateAndStorage({\n            isWork: true,\n            timerRunning: true\n        });\n        this.markTimerStart(this.props.timerSeconds, Date.now());\n    }\n\n    onClickReturnToWork = () => {\n        const lastTimerSeconds = this.props.timerSeconds;\n        const newTimerSeconds = this.props.workMinutes * 60;\n        this.setStateAndStorage({\n            isWork: true,\n            timerSeconds: newTimerSeconds\n        });\n        this.notifyCycleChange(false, lastTimerSeconds, newTimerSeconds);\n    }\n\n    onClickGoOnABreak = () => {\n        let availableBreakSeconds = Math.round(this.props.availableBreakSeconds);\n        const lastTimerSeconds = this.props.timerSeconds;\n        this.setStateAndStorage({\n            isWork: false,\n            timerSeconds: availableBreakSeconds,\n            availableBreakSeconds: availableBreakSeconds\n        });\n        this.notifyCycleChange(true, lastTimerSeconds, availableBreakSeconds);\n    }\n\n    tick = () => {\n        if (!this.props.timerRunning) {\n            this.setStateAndStorage({\n                timerLastUpdatedAt: Date.now()\n            });\n            return;\n        }\n\n        let now = Date.now();\n        let secondsDiff = Math.round((now - this.props.timerLastUpdatedAt) / 1000);\n        let newState = this.calculateNewState(secondsDiff, now);\n\n        this.setStateAndStorage(newState);\n    }\n\n    onTimerFinish = () => {\n        let isWork = this.tempState.isWork;\n        let stateChange = {};\n        if (isWork) {\n            let newCycle = this.tempState.cycle + 1;\n            let newAvailableBreakSeconds = this.tempState.availableBreakSeconds;\n            if (newCycle === this.props.longBreakFreq) {\n                newCycle = 0;\n                newAvailableBreakSeconds += this.props.longBreakMinutes * 60 - this.props.shortBreakMinutes * 60;\n            }\n            newAvailableBreakSeconds += this.tempState.hiddenAvailableBreakSeconds;\n            newAvailableBreakSeconds = Math.round(newAvailableBreakSeconds);\n\n            let newTimerSeconds;\n            let newIsWork;\n\n            if (this.tempState.continousWork) {\n                newTimerSeconds = this.props.workMinutes * 60;\n                newIsWork = true;\n            } else {\n                newTimerSeconds = newAvailableBreakSeconds;\n                newIsWork = false;\n            }\n\n            stateChange = {\n                timerSeconds: newTimerSeconds,\n                availableBreakSeconds: newAvailableBreakSeconds,\n                hiddenAvailableBreakSeconds: 0,\n                isWork: newIsWork,\n                cycle: newCycle\n            };\n        } else {\n            stateChange = {\n                timerSeconds: this.props.workMinutes * 60,\n                isWork: true\n            };\n        }\n\n        stateChange.timerRunning = this.props.autoStartTimers;\n\n        const lastTimerSeconds = this.tempState.timerSeconds;\n        this.tempState = Object.assign(this.tempState, stateChange);\n\n        this.props.showNotification(isWork ? 'Work finished' : 'Break finished');\n        this.notifyCycleChange(isWork, lastTimerSeconds, this.tempState.timerSeconds);\n    }\n\n    notifyCycleChange = (wasWork, oldTimerSeconds, newTimerSeconds) => {\n        const timerEndAt = this.props.timerStartedAt + (this.props.timerStartedWithSeconds - oldTimerSeconds) * 1000;\n        const event = {\n            wasWork: wasWork,\n            start: this.props.timerStartedAt,\n            end: timerEndAt\n        };\n        this.props.onTimerFinish(event);\n        this.markTimerStart(newTimerSeconds, timerEndAt);\n    }\n\n    markTimerStart = (timerSeconds, timerStartedAt) => {\n        const newState = {\n            timerStartedAt: timerStartedAt,\n            timerStartedWithSeconds: timerSeconds\n        };\n        this.props.setStateAndStorage(newState);\n    }\n\n    onClickHoldWork = () => {\n        this.setStateAndStorage({\n            timerRunning: false\n        });\n        this.notifyCycleChange(this.props.isWork, this.props.timerSeconds, this.props.timerSeconds);\n        this.handleClose();\n    }\n\n    onClickResumeWork = () => {\n        this.setStateAndStorage({\n            timerRunning: true\n        });\n        this.markTimerStart(this.props.timerSeconds, Date.now());\n    }\n\n    onChangeContinousWork = (event) => {\n        this.setStateAndStorage({\n            continousWork: event.target.checked\n        });\n    }\n\n    onChangeAutoStartTimers = (event) => {\n        this.setStateAndStorage({\n            autoStartTimers: event.target.checked\n        });\n    }\n\n    setStateAndStorage = (newState) => {\n        this.props.setStateAndStorage(newState);\n    }\n\n    calculateNewState(secondsDiff, now) {\n        this.tempState = {\n            isWork: this.props.isWork,\n            totalWorkedSeconds: this.props.totalWorkedSeconds,\n            availableBreakSeconds: this.props.availableBreakSeconds,\n            hiddenAvailableBreakSeconds: this.props.hiddenAvailableBreakSeconds,\n            timerLastUpdatedAt: this.props.timerLastUpdatedAt,\n            cycle: this.props.cycle,\n            continousWork: this.props.continousWork,\n            timerSeconds: this.props.timerSeconds,\n            totalCombinedTime: this.props.totalCombinedTime\n        };\n\n        for (let secondsPassed = secondsDiff; secondsPassed > 0; secondsPassed--) {\n            this.tempState.timerSeconds--;\n            this.tempState.totalCombinedTime++;\n            if (this.tempState.isWork) {\n                this.tempState.totalWorkedSeconds++;\n                let availableBreakSecondsIncrement = this.props.shortBreakMinutes * 1.0 / this.props.workMinutes;\n                if (this.tempState.availableBreakSeconds >= this.props.shortBreakMinutes * 60) {\n                    this.tempState.availableBreakSeconds += availableBreakSecondsIncrement;\n                } else {\n                    this.tempState.hiddenAvailableBreakSeconds += availableBreakSecondsIncrement;\n                }\n            } else {\n                this.tempState.availableBreakSeconds--;\n            }\n            this.tempState.timerLastUpdatedAt = now;\n            if (this.tempState.timerSeconds === 0) {\n                this.onTimerFinish();\n            }\n        }\n\n        return this.tempState;\n    }\n\n    get cyclesUntilLongBreak() {\n        return this.props.longBreakFreq - this.props.cycle;\n    }\n\n    handleShow = () => {\n        this.setState({\n            showHoldModal: true\n        });\n    }\n\n    handleClose = () => {\n        this.setState({\n            showHoldModal: false\n        });\n    }\n\n    render() {\n        return (\n            <>\n                <Modal show={this.state.showHoldModal} onHide={this.handleClose}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>{Constants.CONFIRM_HOLD_TIMER_MODAL_HEADER}</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>{Constants.CONFIRM_HOLD_TIMER_MODAL_TEXT}</Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={this.handleClose}>\n                            No\n                        </Button>\n                        <Button variant=\"primary\" onClick={this.onClickHoldWork}>\n                            {Constants.CONFIRM_HOLD_TIMER_BUTTON_TEXT}\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n                <Row>\n                    <Col>\n                        {this.props.timerRunning === true &&\n                            <button type=\"button\" className=\"btn btn-warning\" onClick={this.handleShow}>{Constants.HOLD_WORK_BUTTON_TEXT}</button>\n                        }\n                        {this.props.timerRunning === false &&\n                            <button className=\"btn btn-secondary\" onClick={this.onClickResumeWork} data-testid=\"resume-work-btn\">{Constants.RESUME_WORK_BUTTON_TEXT}</button>\n                        }\n                        {this.props.isWork === null &&\n                            <button className=\"btn btn-success\" onClick={this.onClickStartWorking} data-testid=\"start-working-btn\">{Constants.START_WORKING_BUTTON_TEXT}</button>\n                        }\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <h3>{this.props.isWork === true ? Constants.WORK_LABEL_TEXT : (this.props.isWork === false ? Constants.BREAK_LABEL_TEXT : '')}</h3>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <h1 data-testid=\"timer\">{this.formatSecondsAsTimer(this.props.timerSeconds)}</h1>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        {(this.props.isWork === true && this.props.availableBreakSeconds) ?\n                            <>\n                                <button className=\"btn btn-success\" onClick={this.onClickGoOnABreak}>{Constants.GO_ON_A_BREAT_BUTTON_TEXT}</button>\n                            </> : null\n                        }\n                        {this.props.isWork === false ?\n                            <>\n                                <button className=\"btn btn-secondary\" onClick={this.onClickReturnToWork}>{Constants.RETURN_TO_WORK_BUTTON_TEXT}</button>\n                            </> : null\n                        }\n                    </Col>\n                </Row>\n                <Row>\n                    <div className=\"col-sm font-weight-light text-md-right\">\n                        Total time worked:\n            </div>\n                    <div className=\"col-sm text-md-left\" data-testid=\"totalWorkedTime\">\n                        {this.formatSecondsAsText(this.props.totalWorkedSeconds)}\n                    </div>\n                </Row>\n                <Row>\n                    <div className=\"col-sm font-weight-light text-md-right\">\n                        Available break time:\n            </div>\n                    <div className=\"col-sm text-md-left\" data-testid=\"availableBreakTime\">\n                        {this.formatSecondsAsText(this.props.availableBreakSeconds)}\n                    </div>\n                </Row>\n                <Row>\n                    <div className=\"col-sm font-weight-light text-md-right\">\n                        Cycles until long break ({this.props.longBreakMinutes} minutes):\n            </div>\n                    <div className=\"col-sm text-md-left\" data-testid=\"longBreakInfo\">\n                        {this.cyclesUntilLongBreak}\n                    </div>\n                </Row>\n                <Row>\n                    <div className=\"col-sm font-weight-light text-md-right\">\n                        Total time (work + break):\n            </div>\n                    <div className=\"col-sm text-md-left\" data-testid=\"totalCombinedTime\">\n                        {this.formatSecondsAsText(this.props.totalCombinedTime)}\n                    </div>\n                </Row>\n                <Row>\n                    <div className=\"col-sm\">\n                        <div className=\"form-check\">\n                            <input className=\"form-check-input\" type=\"checkbox\" value=\"\" onChange={this.onChangeContinousWork}\n                                checked={this.props.continousWork} data-testid=\"cont-work\" id=\"cont-work-check\" />\n                            <label className=\"form-check-label\" htmlFor=\"cont-work-check\">\n                                {Constants.CONTINOUS_WORK_TEXT}\n                            </label>\n                        </div>\n                    </div>\n                </Row>\n                <Row>\n                    <div className=\"col-sm\">\n                        <div className=\"form-check\">\n                            <input className=\"form-check-input\" type=\"checkbox\" value=\"\" onChange={this.onChangeAutoStartTimers}\n                                checked={this.props.autoStartTimers} data-testid=\"auto-start-timers\" id=\"auto-start-timers-check\" />\n                            <label className=\"form-check-label\" htmlFor=\"auto-start-timers-check\">\n                                {Constants.START_TIMERS_AUTOMATICALLY_TEXT}\n                            </label>\n                        </div>\n                    </div>\n                </Row>\n            </>\n        );\n    }\n}\n\nexport default Timer;","import React from 'react';\nimport Constants from './Constants';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\nimport { Button } from 'react-bootstrap';\n\nclass SimpleTaskManager extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      taskInput: '',\n      selectedTask: props.selectedTask,\n      visibleTasks: props.tasks,\n      createButtonVisible: false\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.selectedTask !== prevProps.selectedTask || !!this.props.tasks !== !!prevProps.tasks || (this.props.tasks && prevProps.tasks && this.props.tasks.length !== prevProps.tasks.length)) {\n      this.setState({\n        selectedTask: this.props.selectedTask,\n        visibleTasks: this.getVisibleTasks(this.state.taskInput)\n      });\n    }\n  }\n\n  handleTextInputChange = (event) => {\n    const value = event.target.value;\n    this.setState({\n      taskInput: value,\n      createButtonVisible: value && value.trim() !== '' && (!this.props.tasks || !this.props.tasks.some(task => task.toUpperCase() === value.toUpperCase())),\n      visibleTasks: this.getVisibleTasks(value)\n    });\n  }\n\n  handleSaveClick = () => {\n    this.props.onTaskCreate(this.state.taskInput.trim());\n    this.setState({\n      taskInput: '',\n      visibleTasks: this.getVisibleTasks(''),\n      createButtonVisible: false\n    });\n  }\n\n  handleTaskSelected = (event) => {\n    let value = event.target.value;\n    if (value === \"\") {\n      value = null;\n    }\n    this.setState({\n      selectedTask: value\n    })\n    this.props.onTaskSelected(value);\n  }\n\n  getVisibleTasks(searchText) {\n    return this.props.tasks ? this.props.tasks.filter(x => x.toUpperCase().includes(searchText.toUpperCase())) : [];\n  }\n\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col>\n            <Form inline className=\"mb-2\">\n              <Form.Group controlId=\"taskInput\" className=\"mr-1\">\n                <Form.Control type=\"text\" onChange={this.handleTextInputChange} placeholder={Constants.CREATE_TASK_PLACEHOLDER_TEXT} value={this.state.taskInput}></Form.Control>\n              </Form.Group>\n              {/* <input type=\"text\" className=\"form-control\" onChange={this.handleTextInputChange} placeholder={Constants.CREATE_TASK_PLACEHOLDER_TEXT} value={this.state.taskInput} /> */}\n              {(this.state.createButtonVisible ?\n                <Button type=\"primary\" onClick={this.handleSaveClick}>\n                  {Constants.SAVE_NEW_TASK_BUTTON_TEXT} \"{this.state.taskInput}\"\n              </Button>\n                : null)}\n            </Form>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <ToggleButtonGroup name=\"tasks\" style={{ 'flex-wrap': 'wrap' }} className=\"float-left\">\n              <label className={'btn btn-info' + (this.state.selectedTask == null ? ' active' : '')} htmlFor=\"no-task\">{Constants.NO_TASK_TEXT}\n                <input type=\"radio\" id=\"no-task\" name=\"task\" value=\"\" autoComplete=\"off\" onChange={this.handleTaskSelected} checked={this.state.selectedTask == null}></input>\n              </label>\n              {this.state && this.state.visibleTasks && this.state.visibleTasks.map(\n                task => {\n                  return (\n                    <label key={task} className={'btn btn-info' + (task === this.state.selectedTask ? ' active' : '')} htmlFor={task} data-testid={'button-' + task}>{task}\n                      <input type=\"radio\" id={task} name=\"task\" value={task} autoComplete=\"off\" onChange={this.handleTaskSelected} checked={task === this.state.selectedTask}></input>\n                    </label>\n                  )\n                }\n              )}\n            </ToggleButtonGroup>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default SimpleTaskManager;","import React from 'react';\r\nimport { isToday, isYesterday, isThisWeek, isThisMonth } from 'date-fns';\r\nimport Constants from './Constants';\r\nimport Table from 'react-bootstrap/Table';\r\n\r\nconst TOTALS_KEY = '@@@TOTALS';\r\n\r\nclass TaskTimes extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            timesMap: this.calculateTimes()\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.eventsTimestamp !== prevProps.eventsTimestamp) {\r\n            this.setState({\r\n                timesMap: this.calculateTimes()\r\n            });\r\n        }\r\n    }\r\n\r\n    formatSeconds = (seconds) => {\r\n        seconds /= 1000;\r\n        let hours = Math.floor(seconds / 3600);\r\n        let minutes = Math.floor((seconds % 3600) / 60);\r\n        return `${hours}h${minutes}m`;\r\n    }\r\n\r\n    calculateTimes() {\r\n        const timesMap = {};\r\n        let totalToday = 0, totalYesterday = 0, totalThisWeek = 0, totalThisMonth = 0;\r\n        this.props.events.forEach(event => {\r\n            if (!event.isWork) {\r\n                return;\r\n            }\r\n            let isForToday = isToday(event.start);;\r\n            let isForYesterday = isYesterday(event.start);\r\n            let isForThisWeek = isThisWeek(event.start);\r\n            let isForThisMonth = isThisMonth(event.start);\r\n            if (!isForToday && !isForYesterday && !isForThisWeek && !isForThisMonth) {\r\n                return;\r\n            }\r\n            let taskName = event.task;\r\n            if (taskName === null || taskName === undefined || taskName === '' || taskName === 'null') {\r\n                taskName = Constants.NO_TASK_TEXT;\r\n            }\r\n            if (!(taskName in timesMap)) {\r\n                timesMap[taskName] = {\r\n                    today: 0,\r\n                    yesterday: 0,\r\n                    week: 0,\r\n                    month: 0\r\n                };\r\n            }\r\n            if (event.end !== undefined) {\r\n                let len = event.end.getTime() - event.start.getTime();\r\n                if (isForToday) {\r\n                    timesMap[taskName].today += len;\r\n                    totalToday += len;\r\n                } else if (isForYesterday) {\r\n                    timesMap[taskName].yesterday += len;\r\n                    totalYesterday += len;\r\n                }\r\n                if (isForThisWeek) {\r\n                    timesMap[taskName].week += len;\r\n                    totalThisWeek += len;\r\n                }\r\n                if (isForThisMonth) {\r\n                    timesMap[taskName].month += len;\r\n                    totalThisMonth += len;\r\n                }\r\n            }\r\n        });\r\n        Object.entries(timesMap).forEach((entry) => {\r\n            entry[1].todayPercentage = this.getPercentage(entry[1].today, totalToday);\r\n            entry[1].yesterdayPercentage = this.getPercentage(entry[1].yesterday, totalYesterday);\r\n            entry[1].weekPercentage = this.getPercentage(entry[1].week, totalThisWeek);\r\n            entry[1].monthPercentage = this.getPercentage(entry[1].month, totalThisMonth);\r\n        });\r\n        timesMap[TOTALS_KEY] = {\r\n            today: totalToday,\r\n            yesterday: totalYesterday,\r\n            week: totalThisWeek,\r\n            month: totalThisMonth\r\n        }\r\n        return timesMap;\r\n    }\r\n\r\n    getPercentage(today, totalToday) {\r\n        const percent = Math.round(today / totalToday * 100);\r\n        return !isNaN(percent) ? percent + '%' : '-';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Table size=\"sm\" responsive>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Task</th>\r\n                        <th>Today</th>\r\n                        <th>%</th>\r\n                        <th>Yesterday</th>\r\n                        <th>%</th>\r\n                        <th>Week</th>\r\n                        <th>%</th>\r\n                        <th>Month</th>\r\n                        <th>%</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {Object.entries(this.state.timesMap).filter(entry => entry[0] !== TOTALS_KEY).map(entry => (\r\n                        <tr key={entry[0]}>\r\n                            <td>{entry[0]}</td>\r\n                            <td data-testid={'today-' + entry[0].charAt(0) + entry[0].length}>{this.formatSeconds(entry[1].today)}</td>\r\n                            <td data-testid={'todayp-' + entry[0].charAt(0) + entry[0].length}>{entry[1].todayPercentage}</td>\r\n                            <td data-testid={'yesterday-' + entry[0].charAt(0) + entry[0].length}>{this.formatSeconds(entry[1].yesterday)}</td>\r\n                            <td data-testid={'yesterdayp-' + entry[0].charAt(0) + entry[0].length}>{entry[1].yesterdayPercentage}</td>\r\n                            <td data-testid={'week-' + entry[0].charAt(0) + entry[0].length}>{this.formatSeconds(entry[1].week)}</td>\r\n                            <td data-testid={'weekp-' + entry[0].charAt(0) + entry[0].length}>{entry[1].weekPercentage}</td>\r\n                            <td data-testid={'month-' + entry[0].charAt(0) + entry[0].length}>{this.formatSeconds(entry[1].month)}</td>\r\n                            <td data-testid={'monthp-' + entry[0].charAt(0) + entry[0].length}>{entry[1].monthPercentage}</td>\r\n                        </tr>\r\n                    ))}\r\n                    <tr>\r\n                        <td>Total</td>\r\n                        <td data-testid={'today-total'}>{this.formatSeconds(this.state.timesMap[TOTALS_KEY].today)}</td>\r\n                        <td data-testid={'todayp-total'}>100%</td>\r\n                        <td data-testid={'yesterday-total'}>{this.formatSeconds(this.state.timesMap[TOTALS_KEY].yesterday)}</td>\r\n                        <td data-testid={'yesterdayp-total'}>100%</td>\r\n                        <td data-testid={'week-total'}>{this.formatSeconds(this.state.timesMap[TOTALS_KEY].week)}</td>\r\n                        <td data-testid={'weekp-total'}>100%</td>\r\n                        <td data-testid={'month-total'}>{this.formatSeconds(this.state.timesMap[TOTALS_KEY].month)}</td>\r\n                        <td data-testid={'monthp-total'}>100%</td>\r\n                    </tr>\r\n                </tbody>\r\n            </Table>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TaskTimes;","import React from 'react';\nimport { Helmet } from 'react-helmet';\nimport './App.css';\nimport UserSettings from './UserSettings';\nimport Timer from './Timer';\nimport FullCalendar from '@fullcalendar/react';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport dayGridMonth from '@fullcalendar/daygrid';\nimport listPlugin from '@fullcalendar/list';\nimport SimpleTaskManager from './SimpleTaskManager';\nimport TaskTimes from './TaskTimes';\nimport Constants from './Constants';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport Collapse from 'react-bootstrap/Collapse';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.defaultSettings = props.defaultSettings;\n    this.storage = props.storage;\n    this.state = this.getDefaultState();\n    if (this.storage && this.storage.state) {\n      this.state = Object.assign(this.state, this.storage.state);\n      this.state.events.forEach(e => {\n        e.start = new Date(Date.parse(e.start));\n        e.end = new Date(Date.parse(e.end));\n      });\n    }\n    if (props.notifications) {\n      this.notifications = props.notifications;\n      this.notifications.requestPermission().then((result) => {\n        if (result === 'granted') {\n          this.notificationsGranted = true;\n        }\n      });\n    }\n    this.plugins = [timeGridPlugin];\n  }\n\n  onClickReset = () => {\n    if (window.confirm(Constants.RESET_CONFIRMATION_TEXT)) {\n      this.setStateAndStorage(this.getStateForReset());\n    }\n  }\n\n  onClickSettings = () => {\n    this.setState({\n      settingsVisible: !this.state.settingsVisible\n    });\n  }\n\n  setStateAndStorage = (state) => {\n    this.setState(state);\n    if (this.storage) {\n      this.storage.state = Object.assign(this.state, state);\n    }\n  }\n\n  onChangeSettings = (settings) => {\n    this.setStateAndStorage(settings);\n  }\n\n  getDefaultState = () => {\n    return {\n      timerSeconds: this.defaultSettings.workMinutes * 60,\n      totalWorkedSeconds: 0,\n      isWork: null,\n      availableBreakSeconds: 0,\n      hiddenAvailableBreakSeconds: 0,\n      totalCombinedTime: 0,\n      cycle: 0,\n      notificationsGranted: false,\n      timerRunning: null,\n      continousWork: this.defaultSettings.continousWork,\n      timerLastUpdatedAt: Date.now(),\n      autoStartTimers: true,\n      workMinutes: this.defaultSettings.workMinutes,\n      shortBreakMinutes: this.defaultSettings.shortBreakMinutes,\n      longBreakMinutes: this.defaultSettings.longBreakMinutes,\n      longBreakFreq: this.defaultSettings.longBreakFreq,\n      settingsVisible: false,\n      events: [],\n      timerStartedAt: null,\n      timerStartedWithSeconds: null,\n      tasks: []\n    };\n  }\n\n  getStateForReset = () => {\n    const stateForReset = this.getDefaultState();\n    stateForReset.continousWork = this.state.continousWork;\n    stateForReset.autoStartTimers = this.state.autoStartTimers;\n    stateForReset.workMinutes = this.state.workMinutes;\n    stateForReset.shortBreakMinutes = this.state.shortBreakMinutes;\n    stateForReset.longBreakMinutes = this.state.longBreakMinutes;\n    stateForReset.longBreakFreq = this.state.longBreakFreq;\n    stateForReset.timerSeconds = this.state.workMinutes * 60;\n    stateForReset.events = this.state.events;\n    stateForReset.tasks = this.state.tasks;\n    return stateForReset;\n  }\n\n  handleTimerStateChange = (timerState) => {\n    // if (timerState.timerStartedAt < this.state.timerStartedAt) {\n    //   timerState.timerStartedAt = this.state.timerStartedAt;\n    // }\n    this.setStateAndStorage(timerState);\n  }\n\n  handleShowNotification = (notificationTitle) => {\n    if (this.notifications && this.notificationsGranted) {\n      if (!this.notificationQueued) {\n        // makes sure that notifications are sent not more frequently than 10 seconds apart\n        this.notificationQueued = true;\n        setTimeout(this.clearNotificationQueue, 10000);\n        this.notifications.createNotification(notificationTitle);\n      }\n    }\n  }\n\n  clearNotificationQueue = () => {\n    this.notificationQueued = null;\n  }\n\n  handleEventCreated = (event) => {\n    let eventTitle = event.wasWork ? 'Work' : 'Break';\n    if (this.state.selectedTask) {\n      eventTitle += ' (' + this.state.selectedTask + ')';\n    }\n    const newEvent = {\n      title: eventTitle,\n      isWork: event.wasWork,\n      start: new Date(event.start),\n      end: new Date(event.end),\n      color: event.wasWork ? '#3788d8' : 'orange',\n      task: this.state.selectedTask\n    };\n    if (newEvent.start.getTime() === newEvent.end.getTime()) {\n      return;\n    }\n    let newEvents = [...this.state.events, newEvent];\n    if (newEvents.length > 1 && newEvents[newEvents.length - 1].isWork === newEvents[newEvents.length - 2].isWork\n      && newEvents[newEvents.length - 2].end.getTime() === newEvents[newEvents.length - 1].start.getTime()\n      && newEvents[newEvents.length - 1].task === newEvents[newEvents.length - 2].task) {\n      newEvents = newEvents.slice(0, newEvents.length - 1);\n      newEvents[newEvents.length - 1].end = new Date(event.end);\n    }\n    this.setStateAndStorage({\n      events: newEvents\n    });\n    this.setEventsTimestamp();\n  }\n\n  handleTaskCreated = (task) => {\n    let newTasks = this.state.tasks;\n    newTasks.push(task);\n    this.setStateAndStorage({\n      tasks: newTasks\n    });\n    this.setEventsTimestamp();\n  }\n\n  handleTaskSelected = (task) => {\n    const end = this.state.timerStartedAt + (this.state.timerStartedWithSeconds - this.state.timerSeconds) * 1000;\n    this.handleEventCreated({\n      wasWork: this.state.isWork,\n      start: this.state.timerStartedAt,\n      end: end\n    });\n\n    let newTasks = this.state.tasks;\n    if (task) {\n      newTasks.splice(this.state.tasks.indexOf(task), 1);\n      newTasks.splice(0, 0, task);\n    }\n\n    this.setStateAndStorage({\n      timerStartedAt: end,\n      timerStartedWithSeconds: this.state.timerSeconds,\n      selectedTask: task,\n      tasks: newTasks\n    });\n  }\n\n  setEventsTimestamp() {\n    this.setState({\n      eventsTimestamp: Date.now()\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Helmet>\n          <title>Timer</title>\n        </Helmet>\n\n        <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\" integrity=\"sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z\" crossOrigin=\"anonymous\"></link>\n\n        <script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossOrigin=\"anonymous\"></script>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\" integrity=\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\" crossOrigin=\"anonymous\"></script>\n        <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\" integrity=\"sha384-B4gt1jrGC7Jh4AgTPSdUtOBvfO8shuf57BaghqFfPlYxofvL8/KUEfYiJOMMV+rV\" crossOrigin=\"anonymous\"></script>\n\n        <Container>\n          <Row>\n            <Col sm={{ offset: 11 }}>\n              <Button variant=\"light\" onClick={this.onClickReset} data-testid=\"reset-btn\">{Constants.RESET_BUTTON_TEXT}</Button>\n            </Col>\n          </Row>\n          <Timer timerSeconds={this.state.timerSeconds}\n            totalWorkedSeconds={this.state.totalWorkedSeconds}\n            isWork={this.state.isWork}\n            availableBreakSeconds={this.state.availableBreakSeconds}\n            hiddenAvailableBreakSeconds={this.state.hiddenAvailableBreakSeconds}\n            totalCombinedTime={this.state.totalCombinedTime}\n            cycle={this.state.cycle}\n            timerRunning={this.state.timerRunning}\n            continousWork={this.state.continousWork}\n            timerLastUpdatedAt={this.state.timerLastUpdatedAt}\n            autoStartTimers={this.state.autoStartTimers}\n            workMinutes={this.state.workMinutes}\n            shortBreakMinutes={this.state.shortBreakMinutes}\n            longBreakMinutes={this.state.longBreakMinutes}\n            longBreakFreq={this.state.longBreakFreq}\n            timerStartedAt={this.state.timerStartedAt}\n            timerStartedWithSeconds={this.state.timerStartedWithSeconds}\n            setStateAndStorage={this.handleTimerStateChange}\n            showNotification={this.handleShowNotification}\n            onTimerFinish={this.handleEventCreated} />\n          <Button variant=\"light\" className=\"m-2\" onClick={this.onClickSettings}>Settings</Button>\n          <Collapse in={this.state.settingsVisible}>\n            <div>\n              <Card>\n                <Card.Body>\n                  <UserSettings\n                    workMinutes={this.state.workMinutes} shortBreakMinutes={this.state.shortBreakMinutes}\n                    longBreakMinutes={this.state.longBreakMinutes} longBreakFreq={this.state.longBreakFreq}\n                    onchange={this.onChangeSettings} />\n                </Card.Body>\n              </Card>\n            </div>\n          </Collapse>\n          <Row className=\"mb-3\">\n            <Col>\n              <SimpleTaskManager onTaskCreate={this.handleTaskCreated} onTaskSelected={this.handleTaskSelected} tasks={this.state.tasks} selectedTask={this.state.selectedTask} />\n            </Col>\n          </Row>\n          <Row className=\"mb-3\">\n            <Col>\n              <TaskTimes events={this.state.events} eventsTimestamp={this.state.eventsTimestamp} />\n            </Col>\n          </Row>\n          <Card>\n            <Card.Body>\n              <FullCalendar events={this.state.events} plugins={[timeGridPlugin, dayGridMonth, listPlugin]} initialView=\"timeGridWeek\" headerToolbar={\n                { right: 'today prev,next dayGridMonth,timeGridWeek,timeGridDay listWeek' }\n              } slotDuration='00:10:00' eventDidMount={function (event) {\n                event.el.title = event.event.title;\n              }} />\n            </Card.Body>\n          </Card>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import Settings from './Settings';\r\n\r\nclass DefaultSettings extends Settings {\r\n  constructor() {\r\n    super(25, 5, 10, 4, 480, true);\r\n  }\r\n}\r\n\r\nexport default DefaultSettings;","class Settings {\r\n    constructor(workMinutes, shortBreakMinutes, longBreakMinutes, longBreakFreq, continousWork) {\r\n        this._workMinutes = workMinutes;\r\n        this._shortBreakMinutes = shortBreakMinutes;\r\n        this._longBreakMinutes = longBreakMinutes;\r\n        this._longBreakFreq = longBreakFreq;\r\n        this._continousWork = continousWork;\r\n    }\r\n\r\n    get workMinutes() {\r\n        return this._workMinutes;\r\n    }\r\n\r\n    get shortBreakMinutes() {\r\n        return this._shortBreakMinutes;\r\n    }\r\n\r\n    get longBreakMinutes() {\r\n        return this._longBreakMinutes;\r\n    }\r\n\r\n    get longBreakFreq() {\r\n        return this._longBreakFreq;\r\n    }\r\n\r\n    get continousWork() {\r\n        return this._continousWork;\r\n    }\r\n}\r\n\r\nexport default Settings;","class BrowserNotifications {\r\n    requestPermission() {\r\n        return Notification.requestPermission();\r\n    }\r\n\r\n    createNotification(title, params) {\r\n        new Notification(title, params);\r\n    }\r\n}\r\n\r\nexport default BrowserNotifications;","class LocalStorage {\r\n    get state() {\r\n        return JSON.parse(localStorage.getItem('timer_state'));\r\n    }\r\n\r\n    set state(state) {\r\n        localStorage.setItem('timer_state', JSON.stringify(state));\r\n    }\r\n}\r\n\r\nexport default LocalStorage;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport DefaultSettings from './DefaultSettings';\r\nimport BrowserNotifications from './BrowserNotifications';\r\nimport LocalStorage from './LocalStorage';\r\n\r\nReactDOM.render(<App basename={ process.env.PUBLIC_URL } defaultSettings={ new DefaultSettings() } notifications={ new BrowserNotifications() } storage={ new LocalStorage() }/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}