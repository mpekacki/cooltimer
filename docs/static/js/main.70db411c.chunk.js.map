{"version":3,"sources":["UserSettings.js","Constants.js","Timer.js","SimpleTaskManager.js","TaskTimes.js","App.js","serviceWorker.js","DefaultSettings.js","Settings.js","BrowserNotifications.js","LocalStorage.js","index.js"],"names":["UserSettings","onChangeWorkMinutes","event","props","onchange","workMinutes","target","value","onChangeShortBreakMinutes","shortBreakMinutes","onChangeLongBreakMinutes","longBreakMinutes","onChangeLongBreakFreq","longBreakFreq","Form","Row","Col","sm","Group","as","Label","column","xs","Control","type","this","onChange","Text","className","React","Component","Constants","Timer","onClickStartWorking","setStateAndStorage","isWork","timerRunning","markTimerStart","timerSeconds","Date","now","onClickReturnToWork","lastTimerSeconds","newTimerSeconds","lastWorkTimerSeconds","notifyCycleChange","onClickGoOnABreak","availableBreakSeconds","Math","round","tick","secondsDiff","timerLastUpdatedAt","newState","calculateNewState","wasWork","oldTimerSeconds","timerEndAt","timerStartedAt","timerStartedWithSeconds","start","end","onTimerFinish","onClickHoldWork","handleClose","onClickResumeWork","onChangeContinousWork","continousWork","checked","onChangeAutoStartTimers","autoStartTimers","handleShow","setState","showHoldModal","interval","setInterval","state","clearInterval","getTimerMinutes","getTimerSeconds","String","padStart","floor","seconds","hoursPart","hoursLabel","minutesPart","secondsPart","tempState","totalWorkedSeconds","hiddenAvailableBreakSeconds","cycle","totalCombinedTime","secondsPassed","availableBreakSecondsIncrement","stateChange","newCycle","newAvailableBreakSeconds","newIsWork","Object","assign","showNotification","Modal","show","onHide","Header","closeButton","Title","CONFIRM_HOLD_TIMER_MODAL_HEADER","Body","CONFIRM_HOLD_TIMER_MODAL_TEXT","Footer","Button","variant","onClick","CONFIRM_HOLD_TIMER_BUTTON_TEXT","ButtonGroup","HOLD_WORK_BUTTON_TEXT","data-testid","RESUME_WORK_BUTTON_TEXT","START_WORKING_BUTTON_TEXT","onClickReset","RESET_BUTTON_TEXT","WORK_LABEL_TEXT","BREAK_LABEL_TEXT","GO_ON_A_BREAT_BUTTON_TEXT","OverlayTrigger","overlay","Tooltip","id","BREAK_WILL_BECOME_AVAILABLE_TEXT","disabled","style","pointerEvents","RETURN_TO_WORK_BUTTON_TEXT","formatSecondsAsText","cyclesUntilLongBreak","Check","label","CONTINOUS_WORK_TEXT","START_TIMERS_AUTOMATICALLY_TEXT","SimpleTaskManager","handleTextInputChange","taskInput","createButtonVisible","trim","tasks","some","task","toUpperCase","visibleTasks","getVisibleTasks","handleSaveClick","onTaskCreate","handleTaskSelected","onTaskSelected","selectedTask","prevProps","length","searchText","filter","x","includes","Container","inline","controlId","placeholder","CREATE_TASK_PLACEHOLDER_TEXT","SAVE_NEW_TASK_BUTTON_TEXT","ToggleButtonGroup","name","ToggleButton","NO_TASK_TEXT","map","TOTALS_KEY","TaskTimes","formatSeconds","hours","minutes","timesMap","calculateTimes","eventsTimestamp","totalToday","totalYesterday","totalThisWeek","totalThisMonth","events","forEach","isForToday","isToday","isForYesterday","isYesterday","isForThisWeek","isThisWeek","isForThisMonth","isThisMonth","taskName","undefined","today","yesterday","week","month","len","getTime","entries","entry","todayPercentage","getPercentage","yesterdayPercentage","weekPercentage","monthPercentage","percent","isNaN","Table","size","responsive","charAt","App","window","confirm","RESET_CONFIRMATION_TEXT","getStateForReset","onClickSettings","settingsVisible","onClickToggleCalendar","calendarVisible","storage","onChangeSettings","settings","getDefaultState","defaultSettings","notificationsGranted","stateForReset","handleTimerStateChange","timerState","handleShowNotification","notificationTitle","notifications","notificationQueued","setTimeout","clearNotificationQueue","createNotification","handleEventCreated","eventTitle","newEvent","title","color","newEvents","slice","setEventsTimestamp","handleTaskCreated","newTasks","push","splice","indexOf","e","parse","requestPermission","then","result","plugins","timeGridPlugin","Helmet","defer","Collapse","in","Card","CloseButton","dayGridMonth","listPlugin","initialView","headerToolbar","right","slotDuration","height","eventDidMount","el","Boolean","location","hostname","match","DefaultSettings","_workMinutes","_shortBreakMinutes","_longBreakMinutes","_longBreakFreq","_continousWork","BrowserNotifications","Notification","params","LocalStorage","JSON","localStorage","getItem","setItem","stringify","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.70db411c.chunk.js","sourcesContent":["import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nclass UserSettings extends React.Component {\n    onChangeWorkMinutes = (event) => {\n        this.props.onchange({\n            workMinutes: event.target.value\n        });\n    }\n\n    onChangeShortBreakMinutes = (event) => {\n        this.props.onchange({\n            shortBreakMinutes: event.target.value\n        });\n    }\n\n    onChangeLongBreakMinutes = (event) => {\n        this.props.onchange({\n            longBreakMinutes: event.target.value\n        });\n    }\n\n    onChangeLongBreakFreq = (event) => {\n        this.props.onchange({\n            longBreakFreq: event.target.value\n        });\n    }\n\n    render() {\n        return (\n            <Form>\n                <Row>\n                    <Col sm={6}>\n                        <Form.Group as={Row}>\n                            <Form.Label column xs={8}>Work cycle minutes</Form.Label>\n                            <Col xs={4}>\n                                <Form.Control type=\"number\" value={this.props.workMinutes} onChange={this.onChangeWorkMinutes} />\n                            </Col>\n                        </Form.Group>\n                    </Col>\n                    <Col sm={6}>\n                        <Form.Group as={Row}>\n                            <Form.Label column xs={8}>Short break minutes</Form.Label>\n                            <Col xs={4}>\n                                <Form.Control type=\"number\" value={this.props.shortBreakMinutes} onChange={this.onChangeShortBreakMinutes} />\n                            </Col>\n                        </Form.Group>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col sm={6}>\n                        <Form.Group as={Row}>\n                            <Form.Label column xs={8}>Long break minutes</Form.Label>\n                            <Col xs={4}>\n                                <Form.Control type=\"number\" value={this.props.longBreakMinutes} onChange={this.onChangeLongBreakMinutes} />\n                            </Col>\n                        </Form.Group>\n                    </Col>\n                    <Col sm={6}>\n                        <Form.Group as={Row}>\n                            <Form.Label column xs={8}>Long break after n cycles</Form.Label>\n                            <Col xs={4}>\n                                <Form.Control type=\"number\" value={this.props.longBreakFreq} onChange={this.onChangeLongBreakFreq} />\n                            </Col>\n                        </Form.Group>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <Form.Text className=\"text-muted\">\n                            Changes are effective after timer reset.\n    </Form.Text>\n                    </Col>\n                </Row>\n            </Form>\n        );\n    }\n}\n\nexport default UserSettings;","export default class Constants {\n    static get CREATE_TASK_PLACEHOLDER_TEXT() {\n        return 'Enter task name...';\n    }\n\n    static get SAVE_NEW_TASK_BUTTON_TEXT() {\n        return 'Save new task';\n    }\n\n    static get NO_TASK_TEXT() {\n        return 'No task';\n    }\n\n    static get GO_ON_A_BREAT_BUTTON_TEXT() {\n        return 'Go on a break';\n    }\n\n    static get RETURN_TO_WORK_BUTTON_TEXT() {\n        return 'Return to work';\n    }\n\n    static get START_WORKING_BUTTON_TEXT() {\n        return 'Start';\n    }\n\n    static get HOLD_WORK_BUTTON_TEXT() {\n        return 'Hold';\n    }\n\n    static get RESUME_WORK_BUTTON_TEXT() {\n        return 'Resume';\n    }\n\n    static get CONTINOUS_WORK_TEXT() {\n        return 'Continous work';\n    }\n\n    static get START_TIMERS_AUTOMATICALLY_TEXT() {\n        return 'Start new timers automatically';\n    }\n\n    static get RESET_CONFIRMATION_TEXT() {\n        return 'Do you want to reset timer values? (tasks, events, settings etc. will be kept)';\n    }\n\n    static get RESET_BUTTON_TEXT() {\n        return 'Reset';\n    }\n\n    static get CONFIRM_HOLD_TIMER_BUTTON_TEXT() {\n        return 'Yes, hold timer';\n    }\n\n    static get CONFIRM_HOLD_TIMER_MODAL_HEADER() {\n        return 'Warning!';\n    }\n\n    static get CONFIRM_HOLD_TIMER_MODAL_TEXT() {\n        return 'This option should only be used if you\\'re stopping work for a significant amount of time. It should not be used for normal mid-work breaks - instead, please wait for the \"Go on a break\" button to become available.\\n\\nAre sure you want to hold the timer anyway?';\n    }\n\n    static get WORK_LABEL_TEXT() {\n        return 'Work';\n    }\n\n    static get BREAK_LABEL_TEXT() {\n        return 'Break';\n    }\n\n    static get BREAK_WILL_BECOME_AVAILABLE_TEXT() {\n        return 'A break will be available when the current work timer finishes.';\n    }\n}","import React from 'react';\nimport Constants from './Constants';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\n\nclass Timer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.interval = setInterval(this.tick, 1000);\n        this.tick();\n        this.state = {\n            showHoldModal: false\n        };\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    formatSecondsAsTimer() {\n        let minutesPart = this.getTimerMinutes();\n        let secondsPart = this.getTimerSeconds();\n        return minutesPart + ':' + secondsPart;\n    }\n\n    getTimerSeconds() {\n        return String(this.props.timerSeconds % 60).padStart(2, '0');\n    }\n\n    getTimerMinutes() {\n        return String(Math.floor(this.props.timerSeconds / 60)).padStart(2, '0');\n    }\n\n    formatSecondsAsText(seconds) {\n        seconds = Math.round(seconds);\n        let hoursPart = Math.floor(seconds / 3600) + '';\n        let hoursLabel = hoursPart === '1' ? 'hour' : 'hours';\n        seconds = seconds % 3600;\n        let minutesPart = Math.floor(seconds / 60) + '';\n        let minutesLabel = minutesPart === '1' ? 'minute' : 'minutes';\n        seconds = seconds % 60;\n        let secondsPart = (seconds % 60) + '';\n        let secondsLabel = secondsPart === '1' ? 'second' : 'seconds';\n        return hoursPart + ' ' + hoursLabel + ' ' + minutesPart + ' ' + minutesLabel + ' ' + secondsPart + ' ' + secondsLabel;\n    }\n\n    onClickStartWorking = () => {\n        this.setStateAndStorage({\n            isWork: true,\n            timerRunning: true\n        });\n        this.markTimerStart(this.props.timerSeconds, Date.now());\n    }\n\n    onClickReturnToWork = () => {\n        const lastTimerSeconds = this.props.timerSeconds;\n        const newTimerSeconds = this.props.lastWorkTimerSeconds || this.props.workMinutes * 60;\n        this.setStateAndStorage({\n            isWork: true,\n            timerSeconds: newTimerSeconds\n        });\n        this.notifyCycleChange(false, lastTimerSeconds, newTimerSeconds);\n    }\n\n    onClickGoOnABreak = () => {\n        let availableBreakSeconds = Math.round(this.props.availableBreakSeconds);\n        const lastTimerSeconds = this.props.timerSeconds;\n        this.setStateAndStorage({\n            isWork: false,\n            timerSeconds: availableBreakSeconds,\n            availableBreakSeconds: availableBreakSeconds\n        });\n        this.notifyCycleChange(true, lastTimerSeconds, availableBreakSeconds);\n    }\n\n    tick = () => {\n        if (!this.props.timerRunning) {\n            this.setStateAndStorage({\n                timerLastUpdatedAt: Date.now()\n            });\n            return;\n        }\n\n        let now = Date.now();\n        let secondsDiff = Math.round((now - this.props.timerLastUpdatedAt) / 1000);\n        let newState = this.calculateNewState(secondsDiff, now);\n\n        this.setStateAndStorage(newState);\n    }\n\n    notifyCycleChange = (wasWork, oldTimerSeconds, newTimerSeconds) => {\n        const timerEndAt = this.props.timerStartedAt + (this.props.timerStartedWithSeconds - oldTimerSeconds) * 1000;\n        const event = {\n            wasWork: wasWork,\n            start: this.props.timerStartedAt,\n            end: timerEndAt\n        };\n        this.props.onTimerFinish(event);\n        this.markTimerStart(newTimerSeconds, timerEndAt);\n    }\n\n    markTimerStart = (timerSeconds, timerStartedAt) => {\n        const newState = {\n            timerStartedAt: timerStartedAt,\n            timerStartedWithSeconds: timerSeconds\n        };\n        this.props.setStateAndStorage(newState);\n    }\n\n    onClickHoldWork = () => {\n        this.setStateAndStorage({\n            timerRunning: false\n        });\n        this.notifyCycleChange(this.props.isWork, this.props.timerSeconds, this.props.timerSeconds);\n        this.handleClose();\n    }\n\n    onClickResumeWork = () => {\n        this.setStateAndStorage({\n            timerRunning: true\n        });\n        this.markTimerStart(this.props.timerSeconds, Date.now());\n    }\n\n    onChangeContinousWork = (event) => {\n        this.setStateAndStorage({\n            continousWork: event.target.checked\n        });\n    }\n\n    onChangeAutoStartTimers = (event) => {\n        this.setStateAndStorage({\n            autoStartTimers: event.target.checked\n        });\n    }\n\n    setStateAndStorage = (newState) => {\n        this.props.setStateAndStorage(newState);\n    }\n\n    calculateNewState(secondsDiff, now) {\n        this.tempState = {\n            isWork: this.props.isWork,\n            totalWorkedSeconds: this.props.totalWorkedSeconds,\n            lastWorkTimerSeconds: this.props.lastWorkTimerSeconds,\n            availableBreakSeconds: this.props.availableBreakSeconds,\n            hiddenAvailableBreakSeconds: this.props.hiddenAvailableBreakSeconds,\n            timerLastUpdatedAt: this.props.timerLastUpdatedAt,\n            cycle: this.props.cycle,\n            continousWork: this.props.continousWork,\n            timerSeconds: this.props.timerSeconds,\n            totalCombinedTime: this.props.totalCombinedTime\n        };\n\n        for (let secondsPassed = secondsDiff; secondsPassed > 0; secondsPassed--) {\n            this.tempState.timerSeconds--;\n            this.tempState.totalCombinedTime++;\n            if (this.tempState.isWork) {\n                this.tempState.totalWorkedSeconds++;\n                this.tempState.lastWorkTimerSeconds = this.tempState.timerSeconds;\n                let availableBreakSecondsIncrement = this.props.shortBreakMinutes * 1.0 / this.props.workMinutes;\n                if (this.tempState.availableBreakSeconds >= this.props.shortBreakMinutes * 60) {\n                    this.tempState.availableBreakSeconds += availableBreakSecondsIncrement;\n                } else {\n                    this.tempState.hiddenAvailableBreakSeconds += availableBreakSecondsIncrement;\n                }\n            } else {\n                this.tempState.availableBreakSeconds--;\n            }\n            this.tempState.timerLastUpdatedAt = now;\n            if (this.tempState.timerSeconds === 0) {\n                let isWork = this.tempState.isWork;\n                let stateChange = {};\n                if (isWork) {\n                    let newCycle = this.tempState.cycle + 1;\n                    let newAvailableBreakSeconds = this.tempState.availableBreakSeconds;\n                    if (newCycle === this.props.longBreakFreq) {\n                        newCycle = 0;\n                        newAvailableBreakSeconds += this.props.longBreakMinutes * 60 - this.props.shortBreakMinutes * 60;\n                    }\n                    newAvailableBreakSeconds += this.tempState.hiddenAvailableBreakSeconds;\n                    newAvailableBreakSeconds = Math.round(newAvailableBreakSeconds);\n\n                    let newTimerSeconds;\n                    let newIsWork;\n\n                    if (this.tempState.continousWork) {\n                        newTimerSeconds = this.props.workMinutes * 60;\n                        newIsWork = true;\n                    } else {\n                        newTimerSeconds = newAvailableBreakSeconds;\n                        newIsWork = false;\n                    }\n\n                    stateChange = {\n                        timerSeconds: newTimerSeconds,\n                        availableBreakSeconds: newAvailableBreakSeconds,\n                        hiddenAvailableBreakSeconds: 0,\n                        isWork: newIsWork,\n                        cycle: newCycle\n                    };\n                } else {\n                    stateChange = {\n                        timerSeconds: this.props.lastWorkTimerSeconds || this.props.workMinutes * 60,\n                        isWork: true\n                    };\n                }\n\n                stateChange.timerRunning = this.props.autoStartTimers;\n\n                const lastTimerSeconds = this.tempState.timerSeconds;\n                this.tempState = Object.assign(this.tempState, stateChange);\n\n                this.props.showNotification(isWork ? 'Work finished' : 'Break finished');\n                this.notifyCycleChange(isWork, lastTimerSeconds, this.tempState.timerSeconds);\n            }\n        }\n\n        return this.tempState;\n    }\n\n    get cyclesUntilLongBreak() {\n        return this.props.longBreakFreq - this.props.cycle;\n    }\n\n    handleShow = () => {\n        this.setState({\n            showHoldModal: true\n        });\n    }\n\n    handleClose = () => {\n        this.setState({\n            showHoldModal: false\n        });\n    }\n\n    render() {\n        return (\n            <>\n                <Modal show={this.state.showHoldModal} onHide={this.handleClose}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>{Constants.CONFIRM_HOLD_TIMER_MODAL_HEADER}</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>{Constants.CONFIRM_HOLD_TIMER_MODAL_TEXT}</Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={this.handleClose}>\n                            No\n                        </Button>\n                        <Button variant=\"primary\" onClick={this.onClickHoldWork}>\n                            {Constants.CONFIRM_HOLD_TIMER_BUTTON_TEXT}\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n                <Row className=\"mt-3\">\n                    <Col>\n                        <ButtonGroup>\n\n                            {this.props.timerRunning === true &&\n                                <Button variant=\"outline-warning\" onClick={this.handleShow}>{Constants.HOLD_WORK_BUTTON_TEXT}</Button>\n                            }\n                            {this.props.timerRunning === false &&\n                                <Button variant=\"secondary\" onClick={this.onClickResumeWork} data-testid=\"resume-work-btn\">{Constants.RESUME_WORK_BUTTON_TEXT}</Button>\n                            }\n                            {this.props.isWork === null &&\n                                <Button variant=\"success\" onClick={this.onClickStartWorking} data-testid=\"start-working-btn\">{Constants.START_WORKING_BUTTON_TEXT}</Button>\n                            }\n                            {this.props.isWork !== null &&\n                                <Button variant=\"outline-dark\" onClick={this.props.onClickReset} data-testid=\"reset-btn\">{Constants.RESET_BUTTON_TEXT}</Button>\n                            }\n                        </ButtonGroup>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <h3 className=\"mt-3\">{this.props.isWork === true ? Constants.WORK_LABEL_TEXT : (this.props.isWork === false ? Constants.BREAK_LABEL_TEXT : '')}</h3>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <h1 data-testid=\"timer\">{this.getTimerMinutes() + ':' + this.getTimerSeconds()}</h1>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        {this.props.isWork === true ?\n                            <>\n                                {!this.props.availableBreakSeconds ? <>\n                                    <OverlayTrigger overlay={<Tooltip id=\"tooltip-disabled\">{Constants.BREAK_WILL_BECOME_AVAILABLE_TEXT}</Tooltip>}>\n                                        <span className=\"d-inline-block\">\n                                            <Button disabled variant=\"success\" style={{ pointerEvents: 'none' }}>\n                                                {Constants.GO_ON_A_BREAT_BUTTON_TEXT}\n                                            </Button>\n                                        </span>\n                                    </OverlayTrigger>\n                                </> : <>\n                                    <Button variant=\"success\" onClick={this.onClickGoOnABreak}>{Constants.GO_ON_A_BREAT_BUTTON_TEXT}</Button>\n                                </>}\n                            </> : null\n                        }\n                        {this.props.isWork === false ?\n                            <>\n                                <Button variant=\"secondary\" onClick={this.onClickReturnToWork}>{Constants.RETURN_TO_WORK_BUTTON_TEXT}</Button>\n                            </> : null\n                        }\n                    </Col>\n                </Row>\n                <Row>\n                    <Col sm={6} className=\"font-weight-light text-md-right\">\n                        Total time worked:\n                    </Col>\n                    <Col sm={6} className=\"text-md-left\" data-testid=\"totalWorkedTime\">\n                        {this.formatSecondsAsText(this.props.totalWorkedSeconds)}\n                    </Col>\n                </Row>\n                <Row>\n                    <Col sm={6} className=\"font-weight-light text-md-right\">\n                        Available break time:\n                    </Col>\n                    <Col sm={6} className=\"text-md-left\" data-testid=\"availableBreakTime\">\n                        {this.formatSecondsAsText(this.props.availableBreakSeconds)}\n                    </Col>\n                </Row>\n                <Row>\n                    <Col sm={6} className=\"font-weight-light text-md-right\">\n                        Cycles until long break ({this.props.longBreakMinutes} minutes):\n                    </Col>\n                    <Col sm={6} className=\"text-md-left\" data-testid=\"longBreakInfo\">\n                        {this.cyclesUntilLongBreak}\n                    </Col>\n                </Row>\n                <Row>\n                    <Col sm={6} className=\"font-weight-light text-md-right\">\n                        Total time (work + break):\n                    </Col>\n                    <Col sm={6} className=\"text-md-left\" data-testid=\"totalCombinedTime\">\n                        {this.formatSecondsAsText(this.props.totalCombinedTime)}\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <Form.Check\n                            type=\"checkbox\"\n                            label={Constants.CONTINOUS_WORK_TEXT}\n                            checked={this.props.continousWork}\n                            id=\"cont-work-check\"\n                            data-testid=\"cont-work\"\n                            onChange={this.onChangeContinousWork}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <Form.Check\n                            type=\"checkbox\"\n                            label={Constants.START_TIMERS_AUTOMATICALLY_TEXT}\n                            checked={this.props.autoStartTimers}\n                            id=\"auto-start-timers-check\"\n                            data-testid=\"auto-start-timers\"\n                            onChange={this.onChangeAutoStartTimers}\n                        />\n                    </Col>\n                </Row>\n            </>\n        );\n    }\n}\n\nexport default Timer;","import React from 'react';\nimport Constants from './Constants';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\nimport ToggleButton from 'react-bootstrap/ToggleButton';\nimport Button from 'react-bootstrap/Button';\n\nclass SimpleTaskManager extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      taskInput: '',\n      selectedTask: props.selectedTask || '',\n      visibleTasks: props.tasks,\n      createButtonVisible: false\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.selectedTask !== prevProps.selectedTask || !!this.props.tasks !== !!prevProps.tasks || (this.props.tasks && prevProps.tasks && this.props.tasks.length !== prevProps.tasks.length)) {\n      this.setState({\n        selectedTask: this.props.selectedTask || '',\n        visibleTasks: this.getVisibleTasks(this.state.taskInput)\n      });\n    }\n  }\n\n  handleTextInputChange = (event) => {\n    const value = event.target.value;\n    this.setState({\n      taskInput: value,\n      createButtonVisible: value && value.trim() !== '' && (!this.props.tasks || !this.props.tasks.some(task => task.toUpperCase() === value.toUpperCase())),\n      visibleTasks: this.getVisibleTasks(value)\n    });\n  }\n\n  handleSaveClick = () => {\n    this.props.onTaskCreate(this.state.taskInput.trim());\n    this.setState({\n      taskInput: '',\n      visibleTasks: this.getVisibleTasks(''),\n      createButtonVisible: false\n    });\n  }\n\n  handleTaskSelected = (value) => {\n    if (value === \"\") {\n      value = null;\n    }\n    this.props.onTaskSelected(value);\n  }\n\n  getVisibleTasks(searchText) {\n    return this.props.tasks ? this.props.tasks.filter(x => x.toUpperCase().includes(searchText.toUpperCase())) : [];\n  }\n\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col>\n            <Form inline className=\"mb-2\">\n              <Form.Group controlId=\"taskInput\" className=\"mr-1\">\n                <Form.Control type=\"text\" onChange={this.handleTextInputChange} placeholder={Constants.CREATE_TASK_PLACEHOLDER_TEXT} value={this.state.taskInput}></Form.Control>\n              </Form.Group>\n              {(this.state.createButtonVisible ?\n                <Button type=\"primary\" onClick={this.handleSaveClick}>\n                  {Constants.SAVE_NEW_TASK_BUTTON_TEXT} \"{this.state.taskInput}\"\n              </Button>\n                : null)}\n            </Form>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <ToggleButtonGroup type=\"radio\" name=\"tasks\" style={{ 'flexWrap': 'wrap' }} className=\"float-left\" value={this.state.selectedTask} onChange={this.handleTaskSelected}>\n              <ToggleButton id=\"radio-null\" value=\"\">\n                {Constants.NO_TASK_TEXT}\n              </ToggleButton>\n              {this.state && this.state.visibleTasks && this.state.visibleTasks.map(\n                task => {\n                  return (\n                    <ToggleButton id={'radio-' + task} value={task} data-testid={'button-' + task} key={task}>\n                      {task}\n                    </ToggleButton>\n                  )\n                }\n              )}\n            </ToggleButtonGroup>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default SimpleTaskManager;","import React from 'react';\nimport { isToday, isYesterday, isThisWeek, isThisMonth } from 'date-fns';\nimport Constants from './Constants';\nimport Table from 'react-bootstrap/Table';\n\nconst TOTALS_KEY = '@@@TOTALS';\n\nclass TaskTimes extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            timesMap: this.calculateTimes()\n        };\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.eventsTimestamp !== prevProps.eventsTimestamp) {\n            this.setState({\n                timesMap: this.calculateTimes()\n            });\n        }\n    }\n\n    formatSeconds = (seconds) => {\n        seconds /= 1000;\n        let hours = Math.floor(seconds / 3600);\n        let minutes = Math.floor((seconds % 3600) / 60);\n        return `${hours}h${minutes}m`;\n    }\n\n    calculateTimes() {\n        const timesMap = {};\n        let totalToday = 0, totalYesterday = 0, totalThisWeek = 0, totalThisMonth = 0;\n        this.props.events.forEach(event => {\n            if (!event.isWork) {\n                return;\n            }\n            let isForToday = isToday(event.start);;\n            let isForYesterday = isYesterday(event.start);\n            let isForThisWeek = isThisWeek(event.start);\n            let isForThisMonth = isThisMonth(event.start);\n            if (!isForToday && !isForYesterday && !isForThisWeek && !isForThisMonth) {\n                return;\n            }\n            let taskName = event.task;\n            if (taskName === null || taskName === undefined || taskName === '' || taskName === 'null') {\n                taskName = Constants.NO_TASK_TEXT;\n            }\n            if (!(taskName in timesMap)) {\n                timesMap[taskName] = {\n                    today: 0,\n                    yesterday: 0,\n                    week: 0,\n                    month: 0\n                };\n            }\n            if (event.end !== undefined) {\n                let len = event.end.getTime() - event.start.getTime();\n                if (isForToday) {\n                    timesMap[taskName].today += len;\n                    totalToday += len;\n                } else if (isForYesterday) {\n                    timesMap[taskName].yesterday += len;\n                    totalYesterday += len;\n                }\n                if (isForThisWeek) {\n                    timesMap[taskName].week += len;\n                    totalThisWeek += len;\n                }\n                if (isForThisMonth) {\n                    timesMap[taskName].month += len;\n                    totalThisMonth += len;\n                }\n            }\n        });\n        Object.entries(timesMap).forEach((entry) => {\n            entry[1].todayPercentage = this.getPercentage(entry[1].today, totalToday);\n            entry[1].yesterdayPercentage = this.getPercentage(entry[1].yesterday, totalYesterday);\n            entry[1].weekPercentage = this.getPercentage(entry[1].week, totalThisWeek);\n            entry[1].monthPercentage = this.getPercentage(entry[1].month, totalThisMonth);\n        });\n        timesMap[TOTALS_KEY] = {\n            today: totalToday,\n            yesterday: totalYesterday,\n            week: totalThisWeek,\n            month: totalThisMonth\n        }\n        return timesMap;\n    }\n\n    getPercentage(today, totalToday) {\n        const percent = Math.round(today / totalToday * 100);\n        return !isNaN(percent) ? percent + '%' : '-';\n    }\n\n    render() {\n        return (\n            <Table size=\"sm\" responsive>\n                <thead>\n                    <tr>\n                        <th>Task</th>\n                        <th>Today</th>\n                        <th>%</th>\n                        <th>Yesterday</th>\n                        <th>%</th>\n                        <th>Week</th>\n                        <th>%</th>\n                        <th>Month</th>\n                        <th>%</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {Object.entries(this.state.timesMap).filter(entry => entry[0] !== TOTALS_KEY).map(entry => (\n                        <tr key={entry[0]}>\n                            <td>{entry[0]}</td>\n                            <td data-testid={'today-' + entry[0].charAt(0) + entry[0].length}>{this.formatSeconds(entry[1].today)}</td>\n                            <td data-testid={'todayp-' + entry[0].charAt(0) + entry[0].length}>{entry[1].todayPercentage}</td>\n                            <td data-testid={'yesterday-' + entry[0].charAt(0) + entry[0].length}>{this.formatSeconds(entry[1].yesterday)}</td>\n                            <td data-testid={'yesterdayp-' + entry[0].charAt(0) + entry[0].length}>{entry[1].yesterdayPercentage}</td>\n                            <td data-testid={'week-' + entry[0].charAt(0) + entry[0].length}>{this.formatSeconds(entry[1].week)}</td>\n                            <td data-testid={'weekp-' + entry[0].charAt(0) + entry[0].length}>{entry[1].weekPercentage}</td>\n                            <td data-testid={'month-' + entry[0].charAt(0) + entry[0].length}>{this.formatSeconds(entry[1].month)}</td>\n                            <td data-testid={'monthp-' + entry[0].charAt(0) + entry[0].length}>{entry[1].monthPercentage}</td>\n                        </tr>\n                    ))}\n                    <tr>\n                        <td>Total</td>\n                        <td data-testid={'today-total'}>{this.formatSeconds(this.state.timesMap[TOTALS_KEY].today)}</td>\n                        <td data-testid={'todayp-total'}>100%</td>\n                        <td data-testid={'yesterday-total'}>{this.formatSeconds(this.state.timesMap[TOTALS_KEY].yesterday)}</td>\n                        <td data-testid={'yesterdayp-total'}>100%</td>\n                        <td data-testid={'week-total'}>{this.formatSeconds(this.state.timesMap[TOTALS_KEY].week)}</td>\n                        <td data-testid={'weekp-total'}>100%</td>\n                        <td data-testid={'month-total'}>{this.formatSeconds(this.state.timesMap[TOTALS_KEY].month)}</td>\n                        <td data-testid={'monthp-total'}>100%</td>\n                    </tr>\n                </tbody>\n            </Table>\n        );\n    }\n}\n\nexport default TaskTimes;","import React from 'react';\nimport { Helmet } from 'react-helmet';\nimport './App.css';\nimport UserSettings from './UserSettings';\nimport Timer from './Timer';\nimport FullCalendar from '@fullcalendar/react';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport dayGridMonth from '@fullcalendar/daygrid';\nimport listPlugin from '@fullcalendar/list';\nimport SimpleTaskManager from './SimpleTaskManager';\nimport TaskTimes from './TaskTimes';\nimport Constants from './Constants';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport Collapse from 'react-bootstrap/Collapse';\nimport CloseButton from 'react-bootstrap/CloseButton';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.defaultSettings = props.defaultSettings;\n    this.storage = props.storage;\n    this.state = this.getDefaultState();\n    if (this.storage && this.storage.state) {\n      this.state = Object.assign(this.state, this.storage.state);\n      this.state.events.forEach(e => {\n        e.start = new Date(Date.parse(e.start));\n        e.end = new Date(Date.parse(e.end));\n      });\n    }\n    if (props.notifications) {\n      this.notifications = props.notifications;\n      this.notifications.requestPermission().then((result) => {\n        if (result === 'granted') {\n          this.notificationsGranted = true;\n        }\n      });\n    }\n    this.plugins = [timeGridPlugin];\n  }\n\n  onClickReset = () => {\n    if (window.confirm(Constants.RESET_CONFIRMATION_TEXT)) {\n      this.setStateAndStorage(this.getStateForReset());\n    }\n  }\n\n  onClickSettings = () => {\n    this.setState({\n      settingsVisible: !this.state.settingsVisible\n    });\n  }\n\n  onClickToggleCalendar = () => {\n    this.setState({\n      calendarVisible: !this.state.calendarVisible\n    });\n  }\n\n  setStateAndStorage = (state) => {\n    this.setState(state);\n    if (this.storage) {\n      this.storage.state = Object.assign(this.state, state);\n    }\n  }\n\n  onChangeSettings = (settings) => {\n    this.setStateAndStorage(settings);\n  }\n\n  getDefaultState = () => {\n    return {\n      timerSeconds: this.defaultSettings.workMinutes * 60,\n      lastWorkTimerSeconds: this.defaultSettings.workMinutes * 60,\n      totalWorkedSeconds: 0,\n      isWork: null,\n      availableBreakSeconds: 0,\n      hiddenAvailableBreakSeconds: 0,\n      totalCombinedTime: 0,\n      cycle: 0,\n      notificationsGranted: false,\n      timerRunning: null,\n      continousWork: this.defaultSettings.continousWork,\n      timerLastUpdatedAt: Date.now(),\n      autoStartTimers: true,\n      workMinutes: this.defaultSettings.workMinutes,\n      shortBreakMinutes: this.defaultSettings.shortBreakMinutes,\n      longBreakMinutes: this.defaultSettings.longBreakMinutes,\n      longBreakFreq: this.defaultSettings.longBreakFreq,\n      settingsVisible: false,\n      calendarVisible: false,\n      events: [],\n      timerStartedAt: null,\n      timerStartedWithSeconds: null,\n      tasks: []\n    };\n  }\n\n  getStateForReset = () => {\n    const stateForReset = this.getDefaultState();\n    stateForReset.continousWork = this.state.continousWork;\n    stateForReset.autoStartTimers = this.state.autoStartTimers;\n    stateForReset.workMinutes = this.state.workMinutes;\n    stateForReset.shortBreakMinutes = this.state.shortBreakMinutes;\n    stateForReset.longBreakMinutes = this.state.longBreakMinutes;\n    stateForReset.longBreakFreq = this.state.longBreakFreq;\n    stateForReset.timerSeconds = this.state.workMinutes * 60;\n    stateForReset.events = this.state.events;\n    stateForReset.tasks = this.state.tasks;\n    return stateForReset;\n  }\n\n  handleTimerStateChange = (timerState) => {\n    this.setStateAndStorage(timerState);\n  }\n\n  handleShowNotification = (notificationTitle) => {\n    if (this.notifications && this.notificationsGranted) {\n      if (!this.notificationQueued) {\n        // makes sure that notifications are sent not more frequently than 10 seconds apart\n        this.notificationQueued = true;\n        setTimeout(this.clearNotificationQueue, 10000);\n        this.notifications.createNotification(notificationTitle);\n      }\n    }\n  }\n\n  clearNotificationQueue = () => {\n    this.notificationQueued = null;\n  }\n\n  handleEventCreated = (event) => {\n    let eventTitle = event.wasWork ? 'Work' : 'Break';\n    if (this.state.selectedTask && event.wasWork) {\n      eventTitle += ' (' + this.state.selectedTask + ')';\n    }\n    const newEvent = {\n      title: eventTitle,\n      isWork: event.wasWork,\n      start: new Date(event.start),\n      end: new Date(event.end),\n      color: event.wasWork ? '#3788d8' : 'orange',\n      task: this.state.selectedTask\n    };\n    if (newEvent.start.getTime() === newEvent.end.getTime()) {\n      return;\n    }\n    let newEvents = [...this.state.events, newEvent];\n    if (newEvents.length > 1 && newEvents[newEvents.length - 1].isWork === newEvents[newEvents.length - 2].isWork\n      && newEvents[newEvents.length - 2].end.getTime() === newEvents[newEvents.length - 1].start.getTime()\n      && newEvents[newEvents.length - 1].task === newEvents[newEvents.length - 2].task) {\n      newEvents = newEvents.slice(0, newEvents.length - 1);\n      newEvents[newEvents.length - 1].end = new Date(event.end);\n    }\n    this.setStateAndStorage({\n      events: newEvents\n    });\n    this.setEventsTimestamp();\n  }\n\n  handleTaskCreated = (task) => {\n    let newTasks = this.state.tasks;\n    newTasks.push(task);\n    this.setStateAndStorage({\n      tasks: newTasks\n    });\n    this.setEventsTimestamp();\n  }\n\n  handleTaskSelected = (task) => {\n    const end = this.state.timerStartedAt + (this.state.timerStartedWithSeconds - this.state.timerSeconds) * 1000;\n    this.handleEventCreated({\n      wasWork: this.state.isWork,\n      start: this.state.timerStartedAt,\n      end: end\n    });\n\n    let newTasks = this.state.tasks;\n    if (task) {\n      newTasks.splice(this.state.tasks.indexOf(task), 1);\n      newTasks.splice(0, 0, task);\n    }\n\n    this.setStateAndStorage({\n      timerStartedAt: end,\n      timerStartedWithSeconds: this.state.timerSeconds,\n      selectedTask: task,\n      tasks: newTasks\n    });\n  }\n\n  setEventsTimestamp() {\n    this.setState({\n      eventsTimestamp: Date.now()\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Helmet defer={false}>\n          <title>{String(Math.floor(this.state.timerSeconds / 60)).padStart(2, '0') + ':' + String(this.state.timerSeconds % 60).padStart(2, '0')} {this.state.isWork === true ? \"Work\" : ( this.state.isWork === false ? \"Break\" : \"\" )}{this.state.isWork && this.state.selectedTask ? ' (' + this.state.selectedTask + ')' : ''}</title>\n        </Helmet>\n        <Container>\n          <Timer timerSeconds={this.state.timerSeconds}\n            lastWorkTimerSeconds={this.state.lastWorkTimerSeconds}\n            totalWorkedSeconds={this.state.totalWorkedSeconds}\n            isWork={this.state.isWork}\n            availableBreakSeconds={this.state.availableBreakSeconds}\n            hiddenAvailableBreakSeconds={this.state.hiddenAvailableBreakSeconds}\n            totalCombinedTime={this.state.totalCombinedTime}\n            cycle={this.state.cycle}\n            timerRunning={this.state.timerRunning}\n            continousWork={this.state.continousWork}\n            timerLastUpdatedAt={this.state.timerLastUpdatedAt}\n            autoStartTimers={this.state.autoStartTimers}\n            workMinutes={this.state.workMinutes}\n            shortBreakMinutes={this.state.shortBreakMinutes}\n            longBreakMinutes={this.state.longBreakMinutes}\n            longBreakFreq={this.state.longBreakFreq}\n            timerStartedAt={this.state.timerStartedAt}\n            timerStartedWithSeconds={this.state.timerStartedWithSeconds}\n            setStateAndStorage={this.handleTimerStateChange}\n            showNotification={this.handleShowNotification}\n            onTimerFinish={this.handleEventCreated}\n            onClickReset={this.onClickReset} />\n          <Row>\n            <Col>\n              <Button variant=\"outline-dark\" className=\"m-2\" onClick={this.onClickSettings}>Settings</Button>\n            </Col>\n          </Row>\n          <Row className=\"mb-3\">\n            <Col>\n              <Collapse in={this.state.settingsVisible}>\n                <div>\n                  <Card>\n                    <Card.Header>\n                      <CloseButton onClick={this.onClickSettings} />\n                    </Card.Header>\n                    <Card.Body>\n                      <UserSettings\n                        workMinutes={this.state.workMinutes} shortBreakMinutes={this.state.shortBreakMinutes}\n                        longBreakMinutes={this.state.longBreakMinutes} longBreakFreq={this.state.longBreakFreq}\n                        onchange={this.onChangeSettings} />\n                    </Card.Body>\n                  </Card>\n                </div>\n              </Collapse>\n            </Col>\n          </Row>\n          <Row className=\"mb-3\">\n            <Col>\n              <SimpleTaskManager onTaskCreate={this.handleTaskCreated} onTaskSelected={this.handleTaskSelected} tasks={this.state.tasks} selectedTask={this.state.selectedTask} />\n            </Col>\n          </Row>\n          <Row className=\"mb-3\">\n            <Col>\n              <TaskTimes events={this.state.events} eventsTimestamp={this.state.eventsTimestamp} />\n            </Col>\n          </Row>\n          <Row className=\"mb-2\">\n            <Col>\n              <Button variant=\"outline-dark\" onClick={this.onClickToggleCalendar}>{this.state.calendarVisible ? 'Hide calendar' : 'Show calendar'}</Button>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Collapse in={this.state.calendarVisible}>\n                <Card>\n                  <Card.Body>\n                    <FullCalendar events={this.state.events} plugins={[timeGridPlugin, dayGridMonth, listPlugin]} initialView=\"timeGridWeek\" headerToolbar={\n                      { right: 'today prev,next dayGridMonth,timeGridWeek,timeGridDay listWeek' }\n                    } slotDuration='00:10:00' height={650} eventDidMount={function (event) {\n                      event.el.title = event.event.title;\n                    }} />\n                  </Card.Body>\n                </Card>\n              </Collapse>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import Settings from './Settings';\n\nclass DefaultSettings extends Settings {\n  constructor() {\n    super(25, 5, 10, 4, 480, true);\n  }\n}\n\nexport default DefaultSettings;","class Settings {\n    constructor(workMinutes, shortBreakMinutes, longBreakMinutes, longBreakFreq, continousWork) {\n        this._workMinutes = workMinutes;\n        this._shortBreakMinutes = shortBreakMinutes;\n        this._longBreakMinutes = longBreakMinutes;\n        this._longBreakFreq = longBreakFreq;\n        this._continousWork = continousWork;\n    }\n\n    get workMinutes() {\n        return this._workMinutes;\n    }\n\n    get shortBreakMinutes() {\n        return this._shortBreakMinutes;\n    }\n\n    get longBreakMinutes() {\n        return this._longBreakMinutes;\n    }\n\n    get longBreakFreq() {\n        return this._longBreakFreq;\n    }\n\n    get continousWork() {\n        return this._continousWork;\n    }\n}\n\nexport default Settings;","class BrowserNotifications {\n    requestPermission() {\n        return Notification.requestPermission();\n    }\n\n    createNotification(title, params) {\n        new Notification(title, params);\n    }\n}\n\nexport default BrowserNotifications;","class LocalStorage {\n    get state() {\n        return JSON.parse(localStorage.getItem('timer_state'));\n    }\n\n    set state(state) {\n        localStorage.setItem('timer_state', JSON.stringify(state));\n    }\n}\n\nexport default LocalStorage;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport DefaultSettings from './DefaultSettings';\nimport BrowserNotifications from './BrowserNotifications';\nimport LocalStorage from './LocalStorage';\n\nReactDOM.render(<App basename={ process.env.PUBLIC_URL } defaultSettings={ new DefaultSettings() } notifications={ new BrowserNotifications() } storage={ new LocalStorage() }/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}