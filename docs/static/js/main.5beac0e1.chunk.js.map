{"version":3,"sources":["UserSettings.js","Constants.js","Timer.js","SimpleTaskManager.js","TaskTimes.js","App.js","serviceWorker.js","DefaultSettings.js","Settings.js","BrowserNotifications.js","LocalStorage.js","index.js"],"names":["UserSettings","onChangeWorkMinutes","event","props","onchange","workMinutes","target","value","onChangeShortBreakMinutes","shortBreakMinutes","onChangeLongBreakMinutes","longBreakMinutes","onChangeLongBreakFreq","longBreakFreq","Form","Row","Col","sm","Group","as","Label","column","xs","Control","type","this","onChange","Text","className","React","Component","Constants","taskName","Timer","onClickStartWorking","setStateAndStorage","isWork","timerRunning","markTimerStart","timerSeconds","Date","now","onClickReturnToWork","lastTimerSeconds","newTimerSeconds","lastWorkTimerSeconds","notifyCycleChange","onClickGoOnABreak","availableBreakSeconds","Math","round","tick","secondsDiff","timerLastUpdatedAt","newState","calculateNewState","wasWork","oldTimerSeconds","timerEndAt","timerStartedAt","timerStartedWithSeconds","start","end","onTimerFinish","onClickHoldWork","handleClose","onClickResumeWork","onChangeContinousWork","continousWork","checked","onChangeAutoStartTimers","autoStartTimers","handleShow","setState","showHoldModal","interval","setInterval","state","clearInterval","getTimerMinutes","getTimerSeconds","String","padStart","floor","seconds","hoursPart","hoursLabel","minutesPart","secondsPart","trim","tempState","totalWorkedSeconds","hiddenAvailableBreakSeconds","cycle","totalCombinedTime","secondsPassed","availableBreakSecondsIncrement","stateChange","newCycle","newAvailableBreakSeconds","newIsWork","Object","assign","showNotification","Modal","show","onHide","Header","closeButton","Title","CONFIRM_HOLD_TIMER_MODAL_HEADER","Body","CONFIRM_HOLD_TIMER_MODAL_TEXT","Footer","Button","variant","onClick","CONFIRM_HOLD_TIMER_BUTTON_TEXT","ButtonGroup","HOLD_WORK_BUTTON_TEXT","data-testid","RESUME_WORK_BUTTON_TEXT","START_WORKING_BUTTON_TEXT","onClickReset","RESET_BUTTON_TEXT","WORK_LABEL_TEXT","BREAK_LABEL_TEXT","GO_ON_A_BREAT_BUTTON_TEXT","OverlayTrigger","overlay","Tooltip","id","BREAK_WILL_BECOME_AVAILABLE_TEXT","disabled","style","pointerEvents","RETURN_TO_WORK_BUTTON_TEXT","formatSecondsAsText","span","offset","getFutureAdditionBreakTime","cyclesUntilLongBreak","Check","label","CONTINOUS_WORK_TEXT","START_TIMERS_AUTOMATICALLY_TEXT","additionalBreakTime","SimpleTaskManager","handleTextInputChange","taskInput","createButtonVisible","tasks","some","task","toUpperCase","visibleTasks","getVisibleTasks","handleSaveClick","onTaskCreate","handleTaskSelected","onTaskSelected","handleRemoveClick","window","confirm","getRemoveTaskConfirmationText","selectedTask","onTaskRemoved","prevProps","eventsTimestamp","length","searchText","filter","x","includes","Container","inline","controlId","placeholder","CREATE_TASK_PLACEHOLDER_TEXT","SAVE_NEW_TASK_BUTTON_TEXT","size","REMOVE_TASK_BUTTON_TEXT","ToggleButtonGroup","name","ToggleButton","NO_TASK_TEXT","map","TOTALS_KEY","TaskTimes","formatSeconds","hours","minutes","timesMap","calculateTimes","totalToday","totalYesterday","totalThisWeek","totalThisMonth","events","forEach","isForToday","isToday","isForYesterday","isYesterday","isForThisWeek","isThisWeek","isForThisMonth","isThisMonth","undefined","today","yesterday","week","month","len","getTime","entries","entry","todayPercentage","getPercentage","yesterdayPercentage","weekPercentage","monthPercentage","percent","isNaN","Table","responsive","charAt","App","RESET_CONFIRMATION_TEXT","getStateForReset","onClickSettings","settingsVisible","onClickToggleCalendar","calendarVisible","storage","onChangeSettings","settings","getDefaultState","defaultSettings","notificationsGranted","stateForReset","handleTimerStateChange","timerState","handleShowNotification","notificationTitle","notifications","notificationQueued","setTimeout","clearNotificationQueue","createNotification","handleEventCreated","eventTitle","newEvent","title","color","newEvents","slice","setEventsTimestamp","handleTaskCreated","newTasks","push","splice","indexOf","handleTaskRemoved","e","parse","requestPermission","then","result","plugins","timeGridPlugin","Helmet","defer","Collapse","in","Card","CloseButton","dayGridMonth","listPlugin","initialView","headerToolbar","right","slotDuration","height","eventDidMount","el","Boolean","location","hostname","match","DefaultSettings","_workMinutes","_shortBreakMinutes","_longBreakMinutes","_longBreakFreq","_continousWork","BrowserNotifications","Notification","params","LocalStorage","JSON","localStorage","getItem","setItem","stringify","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5beac0e1.chunk.js","sourcesContent":["import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nclass UserSettings extends React.Component {\n    onChangeWorkMinutes = (event) => {\n        this.props.onchange({\n            workMinutes: event.target.value\n        });\n    }\n\n    onChangeShortBreakMinutes = (event) => {\n        this.props.onchange({\n            shortBreakMinutes: event.target.value\n        });\n    }\n\n    onChangeLongBreakMinutes = (event) => {\n        this.props.onchange({\n            longBreakMinutes: event.target.value\n        });\n    }\n\n    onChangeLongBreakFreq = (event) => {\n        this.props.onchange({\n            longBreakFreq: event.target.value\n        });\n    }\n\n    render() {\n        return (\n            <Form>\n                <Row>\n                    <Col sm={6}>\n                        <Form.Group as={Row}>\n                            <Form.Label column xs={8}>Work cycle minutes</Form.Label>\n                            <Col xs={4}>\n                                <Form.Control type=\"number\" value={this.props.workMinutes} onChange={this.onChangeWorkMinutes} />\n                            </Col>\n                        </Form.Group>\n                    </Col>\n                    <Col sm={6}>\n                        <Form.Group as={Row}>\n                            <Form.Label column xs={8}>Short break minutes</Form.Label>\n                            <Col xs={4}>\n                                <Form.Control type=\"number\" value={this.props.shortBreakMinutes} onChange={this.onChangeShortBreakMinutes} />\n                            </Col>\n                        </Form.Group>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col sm={6}>\n                        <Form.Group as={Row}>\n                            <Form.Label column xs={8}>Long break minutes</Form.Label>\n                            <Col xs={4}>\n                                <Form.Control type=\"number\" value={this.props.longBreakMinutes} onChange={this.onChangeLongBreakMinutes} />\n                            </Col>\n                        </Form.Group>\n                    </Col>\n                    <Col sm={6}>\n                        <Form.Group as={Row}>\n                            <Form.Label column xs={8}>Long break after n cycles</Form.Label>\n                            <Col xs={4}>\n                                <Form.Control type=\"number\" value={this.props.longBreakFreq} onChange={this.onChangeLongBreakFreq} />\n                            </Col>\n                        </Form.Group>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <Form.Text className=\"text-muted\">\n                            Changes are effective after timer reset.\n    </Form.Text>\n                    </Col>\n                </Row>\n            </Form>\n        );\n    }\n}\n\nexport default UserSettings;","export default class Constants {\n    static get CREATE_TASK_PLACEHOLDER_TEXT() {\n        return 'Enter task name...';\n    }\n\n    static get SAVE_NEW_TASK_BUTTON_TEXT() {\n        return 'Save new task';\n    }\n\n    static get NO_TASK_TEXT() {\n        return 'No task';\n    }\n\n    static get GO_ON_A_BREAT_BUTTON_TEXT() {\n        return 'Go on a break';\n    }\n\n    static get RETURN_TO_WORK_BUTTON_TEXT() {\n        return 'Return to work';\n    }\n\n    static get START_WORKING_BUTTON_TEXT() {\n        return 'Start';\n    }\n\n    static get HOLD_WORK_BUTTON_TEXT() {\n        return 'Hold';\n    }\n\n    static get RESUME_WORK_BUTTON_TEXT() {\n        return 'Resume';\n    }\n\n    static get CONTINOUS_WORK_TEXT() {\n        return 'Continous work';\n    }\n\n    static get START_TIMERS_AUTOMATICALLY_TEXT() {\n        return 'Start new timers automatically';\n    }\n\n    static get RESET_CONFIRMATION_TEXT() {\n        return 'Do you want to reset timer values? (tasks, events, settings etc. will be kept)';\n    }\n\n    static get RESET_BUTTON_TEXT() {\n        return 'Reset';\n    }\n\n    static get CONFIRM_HOLD_TIMER_BUTTON_TEXT() {\n        return 'Yes, hold timer';\n    }\n\n    static get CONFIRM_HOLD_TIMER_MODAL_HEADER() {\n        return 'Warning!';\n    }\n\n    static get CONFIRM_HOLD_TIMER_MODAL_TEXT() {\n        return 'This option should only be used if you\\'re stopping work for a significant amount of time. It should not be used for normal mid-work breaks - instead, please wait for the \"Go on a break\" button to become available.\\n\\nAre sure you want to hold the timer anyway?';\n    }\n\n    static get WORK_LABEL_TEXT() {\n        return 'Work';\n    }\n\n    static get BREAK_LABEL_TEXT() {\n        return 'Break';\n    }\n\n    static get BREAK_WILL_BECOME_AVAILABLE_TEXT() {\n        return 'A break will be available when the current work timer finishes.';\n    }\n\n    static get REMOVE_TASK_BUTTON_TEXT() {\n        return 'Remove task';\n    }\n\n    static getRemoveTaskConfirmationText(taskName) {\n        return `Are sure you want to remove the task \"${taskName}\"?`;\n    }\n}","import React from 'react';\nimport Constants from './Constants';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\n\nclass Timer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.interval = setInterval(this.tick, 1000);\n        this.tick();\n        this.state = {\n            showHoldModal: false\n        };\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    formatSecondsAsTimer() {\n        let minutesPart = this.getTimerMinutes();\n        let secondsPart = this.getTimerSeconds();\n        return minutesPart + ':' + secondsPart;\n    }\n\n    getTimerSeconds() {\n        return String(this.props.timerSeconds % 60).padStart(2, '0');\n    }\n\n    getTimerMinutes() {\n        return String(Math.floor(this.props.timerSeconds / 60)).padStart(2, '0');\n    }\n\n    formatSecondsAsText(seconds) {\n        seconds = Math.round(seconds);\n        let hoursPart = Math.floor(seconds / 3600) + '';\n        let hoursLabel = hoursPart === '1' ? 'hour' : 'hours';\n        seconds = seconds % 3600;\n        let minutesPart = Math.floor(seconds / 60) + '';\n        let minutesLabel = minutesPart === '1' ? 'minute' : 'minutes';\n        seconds = seconds % 60;\n        let secondsPart = (seconds % 60) + '';\n        let secondsLabel = secondsPart === '1' ? 'second' : 'seconds';\n        const formattedTime = ((hoursPart !== '0' ? hoursPart + ' ' + hoursLabel + ' ' : '') +\n          (minutesPart !== '0' ? minutesPart + ' ' + minutesLabel + ' ' : '') +\n          (secondsPart !== '0' ? secondsPart + ' ' + secondsLabel : '')).trim();\n        return formattedTime || '0 minutes';\n      }\n\n    onClickStartWorking = () => {\n        this.setStateAndStorage({\n            isWork: true,\n            timerRunning: true\n        });\n        this.markTimerStart(this.props.timerSeconds, Date.now());\n    }\n\n    onClickReturnToWork = () => {\n        const lastTimerSeconds = this.props.timerSeconds;\n        const newTimerSeconds = this.props.lastWorkTimerSeconds || this.props.workMinutes * 60;\n        this.setStateAndStorage({\n            isWork: true,\n            timerSeconds: newTimerSeconds\n        });\n        this.notifyCycleChange(false, lastTimerSeconds, newTimerSeconds);\n    }\n\n    onClickGoOnABreak = () => {\n        let availableBreakSeconds = Math.round(this.props.availableBreakSeconds);\n        const lastTimerSeconds = this.props.timerSeconds;\n        this.setStateAndStorage({\n            isWork: false,\n            timerSeconds: availableBreakSeconds,\n            availableBreakSeconds: availableBreakSeconds\n        });\n        this.notifyCycleChange(true, lastTimerSeconds, availableBreakSeconds);\n    }\n\n    tick = () => {\n        if (!this.props.timerRunning) {\n            this.setStateAndStorage({\n                timerLastUpdatedAt: Date.now()\n            });\n            return;\n        }\n\n        let now = Date.now();\n        let secondsDiff = Math.round((now - this.props.timerLastUpdatedAt) / 1000);\n        let newState = this.calculateNewState(secondsDiff, now);\n\n        this.setStateAndStorage(newState);\n    }\n\n    notifyCycleChange = (wasWork, oldTimerSeconds, newTimerSeconds) => {\n        const timerEndAt = this.props.timerStartedAt + (this.props.timerStartedWithSeconds - oldTimerSeconds) * 1000;\n        const event = {\n            wasWork: wasWork,\n            start: this.props.timerStartedAt,\n            end: timerEndAt\n        };\n        this.props.onTimerFinish(event);\n        this.markTimerStart(newTimerSeconds, timerEndAt);\n    }\n\n    markTimerStart = (timerSeconds, timerStartedAt) => {\n        const newState = {\n            timerStartedAt: timerStartedAt,\n            timerStartedWithSeconds: timerSeconds\n        };\n        this.props.setStateAndStorage(newState);\n    }\n\n    onClickHoldWork = () => {\n        this.setStateAndStorage({\n            timerRunning: false\n        });\n        this.notifyCycleChange(this.props.isWork, this.props.timerSeconds, this.props.timerSeconds);\n        this.handleClose();\n    }\n\n    onClickResumeWork = () => {\n        this.setStateAndStorage({\n            timerRunning: true\n        });\n        this.markTimerStart(this.props.timerSeconds, Date.now());\n    }\n\n    onChangeContinousWork = (event) => {\n        this.setStateAndStorage({\n            continousWork: event.target.checked\n        });\n    }\n\n    onChangeAutoStartTimers = (event) => {\n        this.setStateAndStorage({\n            autoStartTimers: event.target.checked\n        });\n    }\n\n    setStateAndStorage = (newState) => {\n        this.props.setStateAndStorage(newState);\n    }\n\n    calculateNewState(secondsDiff, now) {\n        this.tempState = {\n            isWork: this.props.isWork,\n            totalWorkedSeconds: this.props.totalWorkedSeconds,\n            lastWorkTimerSeconds: this.props.lastWorkTimerSeconds,\n            availableBreakSeconds: this.props.availableBreakSeconds,\n            hiddenAvailableBreakSeconds: this.props.hiddenAvailableBreakSeconds,\n            timerLastUpdatedAt: this.props.timerLastUpdatedAt,\n            cycle: this.props.cycle,\n            continousWork: this.props.continousWork,\n            timerSeconds: this.props.timerSeconds,\n            totalCombinedTime: this.props.totalCombinedTime\n        };\n\n        for (let secondsPassed = secondsDiff; secondsPassed > 0; secondsPassed--) {\n            this.tempState.timerSeconds--;\n            this.tempState.totalCombinedTime++;\n            if (this.tempState.isWork) {\n                this.tempState.totalWorkedSeconds++;\n                this.tempState.lastWorkTimerSeconds = this.tempState.timerSeconds;\n                let availableBreakSecondsIncrement = this.props.shortBreakMinutes * 1.0 / this.props.workMinutes;\n                if (this.tempState.availableBreakSeconds >= this.props.shortBreakMinutes * 60) {\n                    this.tempState.availableBreakSeconds += availableBreakSecondsIncrement;\n                } else {\n                    this.tempState.hiddenAvailableBreakSeconds += availableBreakSecondsIncrement;\n                }\n            } else {\n                this.tempState.availableBreakSeconds--;\n            }\n            this.tempState.timerLastUpdatedAt = now;\n            if (this.tempState.timerSeconds === 0) {\n                let isWork = this.tempState.isWork;\n                let stateChange = {};\n                if (isWork) {\n                    let newCycle = this.tempState.cycle + 1;\n                    let newAvailableBreakSeconds = this.tempState.availableBreakSeconds;\n                    if (newCycle === this.props.longBreakFreq) {\n                        newCycle = 0;\n                        newAvailableBreakSeconds += this.props.longBreakMinutes * 60 - this.props.shortBreakMinutes * 60;\n                    }\n                    newAvailableBreakSeconds += this.tempState.hiddenAvailableBreakSeconds;\n                    newAvailableBreakSeconds = Math.round(newAvailableBreakSeconds);\n\n                    let newTimerSeconds;\n                    let newIsWork;\n\n                    if (this.tempState.continousWork) {\n                        newTimerSeconds = this.props.workMinutes * 60;\n                        newIsWork = true;\n                    } else {\n                        newTimerSeconds = newAvailableBreakSeconds;\n                        newIsWork = false;\n                    }\n\n                    stateChange = {\n                        timerSeconds: newTimerSeconds,\n                        availableBreakSeconds: newAvailableBreakSeconds,\n                        hiddenAvailableBreakSeconds: 0,\n                        isWork: newIsWork,\n                        cycle: newCycle\n                    };\n                } else {\n                    stateChange = {\n                        timerSeconds: this.props.lastWorkTimerSeconds || this.props.workMinutes * 60,\n                        isWork: true\n                    };\n                }\n\n                stateChange.timerRunning = this.props.autoStartTimers;\n\n                const lastTimerSeconds = this.tempState.timerSeconds;\n                this.tempState = Object.assign(this.tempState, stateChange);\n\n                this.props.showNotification(isWork ? 'Work finished' : 'Break finished');\n                this.notifyCycleChange(isWork, lastTimerSeconds, this.tempState.timerSeconds);\n            }\n        }\n\n        return this.tempState;\n    }\n\n    get cyclesUntilLongBreak() {\n        return this.props.longBreakFreq - this.props.cycle;\n    }\n\n    handleShow = () => {\n        this.setState({\n            showHoldModal: true\n        });\n    }\n\n    handleClose = () => {\n        this.setState({\n            showHoldModal: false\n        });\n    }\n\n    render() {\n        return (\n            <>\n                <Modal show={this.state.showHoldModal} onHide={this.handleClose}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>{Constants.CONFIRM_HOLD_TIMER_MODAL_HEADER}</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>{Constants.CONFIRM_HOLD_TIMER_MODAL_TEXT}</Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={this.handleClose}>\n                            No\n                        </Button>\n                        <Button variant=\"primary\" onClick={this.onClickHoldWork}>\n                            {Constants.CONFIRM_HOLD_TIMER_BUTTON_TEXT}\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n                <Row className=\"mt-3\">\n                    <Col>\n                        <ButtonGroup>\n\n                            {this.props.timerRunning === true &&\n                                <Button variant=\"outline-warning\" onClick={this.handleShow}>{Constants.HOLD_WORK_BUTTON_TEXT}</Button>\n                            }\n                            {this.props.timerRunning === false &&\n                                <Button variant=\"secondary\" onClick={this.onClickResumeWork} data-testid=\"resume-work-btn\">{Constants.RESUME_WORK_BUTTON_TEXT}</Button>\n                            }\n                            {this.props.isWork === null &&\n                                <Button variant=\"success\" onClick={this.onClickStartWorking} data-testid=\"start-working-btn\">{Constants.START_WORKING_BUTTON_TEXT}</Button>\n                            }\n                            {this.props.isWork !== null &&\n                                <Button variant=\"outline-dark\" onClick={this.props.onClickReset} data-testid=\"reset-btn\">{Constants.RESET_BUTTON_TEXT}</Button>\n                            }\n                        </ButtonGroup>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <h3 className=\"mt-3\">{this.props.isWork === true ? Constants.WORK_LABEL_TEXT : (this.props.isWork === false ? Constants.BREAK_LABEL_TEXT : '')}</h3>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <h1 data-testid=\"timer\">{this.getTimerMinutes() + ':' + this.getTimerSeconds()}</h1>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        {this.props.isWork === true ?\n                            <>\n                                {!this.props.availableBreakSeconds ? <>\n                                    <OverlayTrigger overlay={<Tooltip id=\"tooltip-disabled\">{Constants.BREAK_WILL_BECOME_AVAILABLE_TEXT}</Tooltip>}>\n                                        <span className=\"d-inline-block\">\n                                            <Button disabled variant=\"success\" style={{ pointerEvents: 'none' }}>\n                                                {Constants.GO_ON_A_BREAT_BUTTON_TEXT}\n                                            </Button>\n                                        </span>\n                                    </OverlayTrigger>\n                                </> : <>\n                                    <Button variant=\"success\" onClick={this.onClickGoOnABreak}>{Constants.GO_ON_A_BREAT_BUTTON_TEXT}</Button>\n                                </>}\n                            </> : null\n                        }\n                        {this.props.isWork === false ?\n                            <>\n                                <Button variant=\"secondary\" onClick={this.onClickReturnToWork}>{Constants.RETURN_TO_WORK_BUTTON_TEXT}</Button>\n                            </> : null\n                        }\n                    </Col>\n                </Row>\n                <Row>\n                    <Col sm={6} className=\"font-weight-light text-md-right\">\n                        Total time worked:\n                    </Col>\n                    <Col sm={6} className=\"text-md-left\" data-testid=\"totalWorkedTime\">\n                        {this.formatSecondsAsText(this.props.totalWorkedSeconds)}\n                    </Col>\n                </Row>\n                <Row>\n                    <Col sm={6} className=\"font-weight-light text-md-right\">\n                        Available break time:\n                    </Col>\n                    <Col sm={6} className=\"text-md-left\" data-testid=\"availableBreakTime\">\n                        {this.formatSecondsAsText(this.props.availableBreakSeconds)}\n                    </Col>\n                </Row>\n                {this.props.isWork && this.props.availableBreakSeconds < this.props.shortBreakMinutes * 60 &&\n                    <Row>\n                        <Col xs={12} sm={{ span: 6, offset: 6 }} className=\"text-md-left text-muted font-weight-light small\">\n                            + <span data-testid=\"futureAdditionBreakTime\">{this.getFutureAdditionBreakTime()}</span> after work timer finishes\n                        </Col>\n                    </Row>\n                }\n                <Row>\n                    <Col sm={6} className=\"font-weight-light text-md-right\">\n                        Cycles until long break ({this.props.longBreakMinutes} minutes):\n                    </Col>\n                    <Col sm={6} className=\"text-md-left\" data-testid=\"longBreakInfo\">\n                        {this.cyclesUntilLongBreak}\n                    </Col>\n                </Row>\n                <Row>\n                    <Col sm={6} className=\"font-weight-light text-md-right\">\n                        Total time (work + break):\n                    </Col>\n                    <Col sm={6} className=\"text-md-left\" data-testid=\"totalCombinedTime\">\n                        {this.formatSecondsAsText(this.props.totalCombinedTime)}\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <Form.Check\n                            type=\"checkbox\"\n                            label={Constants.CONTINOUS_WORK_TEXT}\n                            checked={this.props.continousWork}\n                            id=\"cont-work-check\"\n                            data-testid=\"cont-work\"\n                            onChange={this.onChangeContinousWork}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <Form.Check\n                            type=\"checkbox\"\n                            label={Constants.START_TIMERS_AUTOMATICALLY_TEXT}\n                            checked={this.props.autoStartTimers}\n                            id=\"auto-start-timers-check\"\n                            data-testid=\"auto-start-timers\"\n                            onChange={this.onChangeAutoStartTimers}\n                        />\n                    </Col>\n                </Row>\n            </>\n        );\n    }\n\n    getFutureAdditionBreakTime() {\n        let additionalBreakTime = Math.round(this.props.hiddenAvailableBreakSeconds + this.props.timerSeconds * 1.0 / (this.props.workMinutes * 60.0) * this.props.shortBreakMinutes * 60);\n        if (this.props.cycle === this.props.longBreakFreq - 1) {\n            additionalBreakTime += (this.props.longBreakMinutes - this.props.shortBreakMinutes) * 60;\n        }\n        return this.formatSecondsAsText(additionalBreakTime);\n    }\n}\n\nexport default Timer;","import React from 'react';\nimport Constants from './Constants';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\nimport ToggleButton from 'react-bootstrap/ToggleButton';\nimport Button from 'react-bootstrap/Button';\n\nclass SimpleTaskManager extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      taskInput: '',\n      selectedTask: props.selectedTask || '',\n      visibleTasks: props.tasks,\n      createButtonVisible: false\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.eventsTimestamp !== prevProps.eventsTimestamp || this.props.selectedTask !== prevProps.selectedTask || !!this.props.tasks !== !!prevProps.tasks || (this.props.tasks && prevProps.tasks && this.props.tasks.length !== prevProps.tasks.length)) {\n      this.setState({\n        selectedTask: this.props.selectedTask || '',\n        visibleTasks: this.getVisibleTasks(this.state.taskInput)\n      });\n    }\n  }\n\n  handleTextInputChange = (event) => {\n    const value = event.target.value;\n    this.setState({\n      taskInput: value,\n      createButtonVisible: value && value.trim() !== '' && (!this.props.tasks || !this.props.tasks.some(task => task.toUpperCase() === value.toUpperCase())),\n      visibleTasks: this.getVisibleTasks(value)\n    });\n  }\n\n  handleSaveClick = () => {\n    this.props.onTaskCreate(this.state.taskInput.trim());\n    this.setState({\n      taskInput: '',\n      visibleTasks: this.getVisibleTasks(''),\n      createButtonVisible: false\n    });\n  }\n\n  handleTaskSelected = (value) => {\n    if (value === \"\") {\n      value = null;\n    }\n    this.props.onTaskSelected(value);\n  }\n\n  getVisibleTasks(searchText) {\n    return this.props.tasks ? this.props.tasks.filter(x => x.toUpperCase().includes(searchText.toUpperCase())) : [];\n  }\n\n  handleRemoveClick = () => {\n    if (window.confirm(Constants.getRemoveTaskConfirmationText(this.state.selectedTask))) {\n      this.props.onTaskRemoved(this.state.selectedTask);\n    }\n  }\n\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col xs={9}>\n            <Form inline className=\"mb-2\">\n              <Form.Group controlId=\"taskInput\" className=\"mr-1\">\n                <Form.Control type=\"text\" onChange={this.handleTextInputChange} placeholder={Constants.CREATE_TASK_PLACEHOLDER_TEXT} value={this.state.taskInput}></Form.Control>\n              </Form.Group>\n              {(this.state.createButtonVisible ?\n                <Button type=\"primary\" onClick={this.handleSaveClick}>\n                  {Constants.SAVE_NEW_TASK_BUTTON_TEXT} \"{this.state.taskInput}\"\n              </Button>\n                : null)}\n            </Form>\n          </Col>\n          {this.state.selectedTask &&\n            <Col xs={2}>\n              <Button variant=\"outline-danger\" size=\"sm\" onClick={this.handleRemoveClick} className=\"mr-1\">{Constants.REMOVE_TASK_BUTTON_TEXT}</Button>\n            </Col>\n          }\n        </Row>\n        <Row>\n          <Col>\n            <ToggleButtonGroup type=\"radio\" name=\"tasks\" style={{ 'flexWrap': 'wrap' }} className=\"float-left\" value={this.state.selectedTask} onChange={this.handleTaskSelected}>\n              <ToggleButton id=\"radio-null\" value=\"\">\n                {Constants.NO_TASK_TEXT}\n              </ToggleButton>\n              {this.state && this.state.visibleTasks && this.state.visibleTasks.map(\n                task => {\n                  return (\n                    <ToggleButton id={'radio-' + task} value={task} data-testid={'button-' + task} key={task}>\n                      {task}\n                    </ToggleButton>\n                  )\n                }\n              )}\n            </ToggleButtonGroup>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default SimpleTaskManager;","import React from 'react';\nimport { isToday, isYesterday, isThisWeek, isThisMonth } from 'date-fns';\nimport Constants from './Constants';\nimport Table from 'react-bootstrap/Table';\n\nconst TOTALS_KEY = '@@@TOTALS';\n\nclass TaskTimes extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            timesMap: this.calculateTimes()\n        };\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.eventsTimestamp !== prevProps.eventsTimestamp) {\n            this.setState({\n                timesMap: this.calculateTimes()\n            });\n        }\n    }\n\n    formatSeconds = (seconds) => {\n        seconds /= 1000;\n        let hours = Math.floor(seconds / 3600);\n        let minutes = Math.floor((seconds % 3600) / 60);\n        return `${hours}h${minutes}m`;\n    }\n\n    calculateTimes() {\n        const timesMap = {};\n        let totalToday = 0, totalYesterday = 0, totalThisWeek = 0, totalThisMonth = 0;\n        this.props.events.forEach(event => {\n            if (!event.isWork) {\n                return;\n            }\n            let isForToday = isToday(event.start);;\n            let isForYesterday = isYesterday(event.start);\n            let isForThisWeek = isThisWeek(event.start);\n            let isForThisMonth = isThisMonth(event.start);\n            if (!isForToday && !isForYesterday && !isForThisWeek && !isForThisMonth) {\n                return;\n            }\n            let taskName = event.task;\n            if (taskName === null || taskName === undefined || taskName === '' || taskName === 'null') {\n                taskName = Constants.NO_TASK_TEXT;\n            }\n            if (!(taskName in timesMap)) {\n                timesMap[taskName] = {\n                    today: 0,\n                    yesterday: 0,\n                    week: 0,\n                    month: 0\n                };\n            }\n            if (event.end !== undefined) {\n                let len = event.end.getTime() - event.start.getTime();\n                if (isForToday) {\n                    timesMap[taskName].today += len;\n                    totalToday += len;\n                } else if (isForYesterday) {\n                    timesMap[taskName].yesterday += len;\n                    totalYesterday += len;\n                }\n                if (isForThisWeek) {\n                    timesMap[taskName].week += len;\n                    totalThisWeek += len;\n                }\n                if (isForThisMonth) {\n                    timesMap[taskName].month += len;\n                    totalThisMonth += len;\n                }\n            }\n        });\n        Object.entries(timesMap).forEach((entry) => {\n            entry[1].todayPercentage = this.getPercentage(entry[1].today, totalToday);\n            entry[1].yesterdayPercentage = this.getPercentage(entry[1].yesterday, totalYesterday);\n            entry[1].weekPercentage = this.getPercentage(entry[1].week, totalThisWeek);\n            entry[1].monthPercentage = this.getPercentage(entry[1].month, totalThisMonth);\n        });\n        timesMap[TOTALS_KEY] = {\n            today: totalToday,\n            yesterday: totalYesterday,\n            week: totalThisWeek,\n            month: totalThisMonth\n        }\n        return timesMap;\n    }\n\n    getPercentage(today, totalToday) {\n        const percent = Math.round(today / totalToday * 100);\n        return !isNaN(percent) ? percent + '%' : '-';\n    }\n\n    render() {\n        return (\n            <Table size=\"sm\" responsive>\n                <thead>\n                    <tr>\n                        <th>Task</th>\n                        <th>Today</th>\n                        <th>%</th>\n                        <th>Yesterday</th>\n                        <th>%</th>\n                        <th>Week</th>\n                        <th>%</th>\n                        <th>Month</th>\n                        <th>%</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {Object.entries(this.state.timesMap).filter(entry => entry[0] !== TOTALS_KEY).map(entry => (\n                        <tr key={entry[0]}>\n                            <td>{entry[0]}</td>\n                            <td data-testid={'today-' + entry[0].charAt(0) + entry[0].length}>{this.formatSeconds(entry[1].today)}</td>\n                            <td data-testid={'todayp-' + entry[0].charAt(0) + entry[0].length}>{entry[1].todayPercentage}</td>\n                            <td data-testid={'yesterday-' + entry[0].charAt(0) + entry[0].length}>{this.formatSeconds(entry[1].yesterday)}</td>\n                            <td data-testid={'yesterdayp-' + entry[0].charAt(0) + entry[0].length}>{entry[1].yesterdayPercentage}</td>\n                            <td data-testid={'week-' + entry[0].charAt(0) + entry[0].length}>{this.formatSeconds(entry[1].week)}</td>\n                            <td data-testid={'weekp-' + entry[0].charAt(0) + entry[0].length}>{entry[1].weekPercentage}</td>\n                            <td data-testid={'month-' + entry[0].charAt(0) + entry[0].length}>{this.formatSeconds(entry[1].month)}</td>\n                            <td data-testid={'monthp-' + entry[0].charAt(0) + entry[0].length}>{entry[1].monthPercentage}</td>\n                        </tr>\n                    ))}\n                    <tr>\n                        <td>Total</td>\n                        <td data-testid={'today-total'}>{this.formatSeconds(this.state.timesMap[TOTALS_KEY].today)}</td>\n                        <td data-testid={'todayp-total'}>100%</td>\n                        <td data-testid={'yesterday-total'}>{this.formatSeconds(this.state.timesMap[TOTALS_KEY].yesterday)}</td>\n                        <td data-testid={'yesterdayp-total'}>100%</td>\n                        <td data-testid={'week-total'}>{this.formatSeconds(this.state.timesMap[TOTALS_KEY].week)}</td>\n                        <td data-testid={'weekp-total'}>100%</td>\n                        <td data-testid={'month-total'}>{this.formatSeconds(this.state.timesMap[TOTALS_KEY].month)}</td>\n                        <td data-testid={'monthp-total'}>100%</td>\n                    </tr>\n                </tbody>\n            </Table>\n        );\n    }\n}\n\nexport default TaskTimes;","import React from 'react';\nimport { Helmet } from 'react-helmet';\nimport './App.css';\nimport UserSettings from './UserSettings';\nimport Timer from './Timer';\nimport FullCalendar from '@fullcalendar/react';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport dayGridMonth from '@fullcalendar/daygrid';\nimport listPlugin from '@fullcalendar/list';\nimport SimpleTaskManager from './SimpleTaskManager';\nimport TaskTimes from './TaskTimes';\nimport Constants from './Constants';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport Collapse from 'react-bootstrap/Collapse';\nimport CloseButton from 'react-bootstrap/CloseButton';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.defaultSettings = props.defaultSettings;\n    this.storage = props.storage;\n    this.state = this.getDefaultState();\n    if (this.storage && this.storage.state) {\n      this.state = Object.assign(this.state, this.storage.state);\n      this.state.events.forEach(e => {\n        e.start = new Date(Date.parse(e.start));\n        e.end = new Date(Date.parse(e.end));\n      });\n    }\n    if (props.notifications) {\n      this.notifications = props.notifications;\n      this.notifications.requestPermission().then((result) => {\n        if (result === 'granted') {\n          this.notificationsGranted = true;\n        }\n      });\n    }\n    this.plugins = [timeGridPlugin];\n  }\n\n  onClickReset = () => {\n    if (window.confirm(Constants.RESET_CONFIRMATION_TEXT)) {\n      this.setStateAndStorage(this.getStateForReset());\n    }\n  }\n\n  onClickSettings = () => {\n    this.setState({\n      settingsVisible: !this.state.settingsVisible\n    });\n  }\n\n  onClickToggleCalendar = () => {\n    this.setState({\n      calendarVisible: !this.state.calendarVisible\n    });\n  }\n\n  setStateAndStorage = (state) => {\n    this.setState(state);\n    if (this.storage) {\n      this.storage.state = Object.assign(this.state, state);\n    }\n  }\n\n  onChangeSettings = (settings) => {\n    this.setStateAndStorage(settings);\n  }\n\n  getDefaultState = () => {\n    return {\n      timerSeconds: this.defaultSettings.workMinutes * 60,\n      lastWorkTimerSeconds: this.defaultSettings.workMinutes * 60,\n      totalWorkedSeconds: 0,\n      isWork: null,\n      availableBreakSeconds: 0,\n      hiddenAvailableBreakSeconds: 0,\n      totalCombinedTime: 0,\n      cycle: 0,\n      notificationsGranted: false,\n      timerRunning: null,\n      continousWork: this.defaultSettings.continousWork,\n      timerLastUpdatedAt: Date.now(),\n      autoStartTimers: true,\n      workMinutes: this.defaultSettings.workMinutes,\n      shortBreakMinutes: this.defaultSettings.shortBreakMinutes,\n      longBreakMinutes: this.defaultSettings.longBreakMinutes,\n      longBreakFreq: this.defaultSettings.longBreakFreq,\n      settingsVisible: false,\n      calendarVisible: false,\n      events: [],\n      timerStartedAt: null,\n      timerStartedWithSeconds: null,\n      tasks: []\n    };\n  }\n\n  getStateForReset = () => {\n    const stateForReset = this.getDefaultState();\n    stateForReset.continousWork = this.state.continousWork;\n    stateForReset.autoStartTimers = this.state.autoStartTimers;\n    stateForReset.workMinutes = this.state.workMinutes;\n    stateForReset.shortBreakMinutes = this.state.shortBreakMinutes;\n    stateForReset.longBreakMinutes = this.state.longBreakMinutes;\n    stateForReset.longBreakFreq = this.state.longBreakFreq;\n    stateForReset.timerSeconds = this.state.workMinutes * 60;\n    stateForReset.events = this.state.events;\n    stateForReset.tasks = this.state.tasks;\n    return stateForReset;\n  }\n\n  handleTimerStateChange = (timerState) => {\n    this.setStateAndStorage(timerState);\n  }\n\n  handleShowNotification = (notificationTitle) => {\n    if (this.notifications && this.notificationsGranted) {\n      if (!this.notificationQueued) {\n        // makes sure that notifications are sent not more frequently than 10 seconds apart\n        this.notificationQueued = true;\n        setTimeout(this.clearNotificationQueue, 10000);\n        this.notifications.createNotification(notificationTitle);\n      }\n    }\n  }\n\n  clearNotificationQueue = () => {\n    this.notificationQueued = null;\n  }\n\n  handleEventCreated = (event) => {\n    let eventTitle = event.wasWork ? 'Work' : 'Break';\n    if (this.state.selectedTask && event.wasWork) {\n      eventTitle += ' (' + this.state.selectedTask + ')';\n    }\n    const newEvent = {\n      title: eventTitle,\n      isWork: event.wasWork,\n      start: new Date(event.start),\n      end: new Date(event.end),\n      color: event.wasWork ? '#3788d8' : 'orange',\n      task: this.state.selectedTask\n    };\n    if (newEvent.start.getTime() === newEvent.end.getTime()) {\n      return;\n    }\n    let newEvents = [...this.state.events, newEvent];\n    if (newEvents.length > 1 && newEvents[newEvents.length - 1].isWork === newEvents[newEvents.length - 2].isWork\n      && newEvents[newEvents.length - 2].end.getTime() === newEvents[newEvents.length - 1].start.getTime()\n      && newEvents[newEvents.length - 1].task === newEvents[newEvents.length - 2].task) {\n      newEvents = newEvents.slice(0, newEvents.length - 1);\n      newEvents[newEvents.length - 1].end = new Date(event.end);\n    }\n    this.setStateAndStorage({\n      events: newEvents\n    });\n    this.setEventsTimestamp();\n  }\n\n  handleTaskCreated = (task) => {\n    let newTasks = this.state.tasks;\n    newTasks.push(task);\n    this.setStateAndStorage({\n      tasks: newTasks\n    });\n    this.setEventsTimestamp();\n  }\n\n  handleTaskSelected = (task) => {\n    const end = this.state.timerStartedAt + (this.state.timerStartedWithSeconds - this.state.timerSeconds) * 1000;\n    this.handleEventCreated({\n      wasWork: this.state.isWork,\n      start: this.state.timerStartedAt,\n      end: end\n    });\n\n    let newTasks = this.state.tasks;\n    if (task) {\n      newTasks.splice(this.state.tasks.indexOf(task), 1);\n      newTasks.splice(0, 0, task);\n    }\n\n    this.setStateAndStorage({\n      timerStartedAt: end,\n      timerStartedWithSeconds: this.state.timerSeconds,\n      selectedTask: task,\n      tasks: newTasks\n    });\n  }\n\n  handleTaskRemoved = (task) => {\n    let newTasks = this.state.tasks;\n    newTasks.splice(newTasks.indexOf(task), 1);\n    let newEvents = this.state.events.filter(e => e.task !== task);\n    this.setState({\n      tasks: newTasks,\n      events: newEvents,\n      eventsTimestamp: Date.now(),\n      selectedTask: this.state.selectedTask === task ? null : this.state.selectedTask\n    });\n  }\n\n  setEventsTimestamp = () => {\n    this.setState({\n      eventsTimestamp: Date.now()\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Helmet defer={false}>\n          <title>{String(Math.floor(this.state.timerSeconds / 60)).padStart(2, '0') + ':' + String(this.state.timerSeconds % 60).padStart(2, '0')} {this.state.isWork === true ? \"Work\" : ( this.state.isWork === false ? \"Break\" : \"\" )}{this.state.isWork && this.state.selectedTask ? ' (' + this.state.selectedTask + ')' : ''}</title>\n        </Helmet>\n        <Container>\n          <Timer timerSeconds={this.state.timerSeconds}\n            lastWorkTimerSeconds={this.state.lastWorkTimerSeconds}\n            totalWorkedSeconds={this.state.totalWorkedSeconds}\n            isWork={this.state.isWork}\n            availableBreakSeconds={this.state.availableBreakSeconds}\n            hiddenAvailableBreakSeconds={this.state.hiddenAvailableBreakSeconds}\n            totalCombinedTime={this.state.totalCombinedTime}\n            cycle={this.state.cycle}\n            timerRunning={this.state.timerRunning}\n            continousWork={this.state.continousWork}\n            timerLastUpdatedAt={this.state.timerLastUpdatedAt}\n            autoStartTimers={this.state.autoStartTimers}\n            workMinutes={this.state.workMinutes}\n            shortBreakMinutes={this.state.shortBreakMinutes}\n            longBreakMinutes={this.state.longBreakMinutes}\n            longBreakFreq={this.state.longBreakFreq}\n            timerStartedAt={this.state.timerStartedAt}\n            timerStartedWithSeconds={this.state.timerStartedWithSeconds}\n            setStateAndStorage={this.handleTimerStateChange}\n            showNotification={this.handleShowNotification}\n            onTimerFinish={this.handleEventCreated}\n            onClickReset={this.onClickReset} />\n          <Row>\n            <Col>\n              <Button variant=\"outline-dark\" className=\"m-2\" onClick={this.onClickSettings}>Settings</Button>\n            </Col>\n          </Row>\n          <Row className=\"mb-3\">\n            <Col>\n              <Collapse in={this.state.settingsVisible}>\n                <div>\n                  <Card>\n                    <Card.Header>\n                      <CloseButton onClick={this.onClickSettings} />\n                    </Card.Header>\n                    <Card.Body>\n                      <UserSettings\n                        workMinutes={this.state.workMinutes} shortBreakMinutes={this.state.shortBreakMinutes}\n                        longBreakMinutes={this.state.longBreakMinutes} longBreakFreq={this.state.longBreakFreq}\n                        onchange={this.onChangeSettings} />\n                    </Card.Body>\n                  </Card>\n                </div>\n              </Collapse>\n            </Col>\n          </Row>\n          <Row className=\"mb-3\">\n            <Col>\n              <SimpleTaskManager \n                onTaskCreate={this.handleTaskCreated} \n                onTaskSelected={this.handleTaskSelected} \n                tasks={this.state.tasks} \n                selectedTask={this.state.selectedTask} \n                onTaskRemoved={this.handleTaskRemoved}\n                eventsTimestamp={this.state.eventsTimestamp}\n              />\n            </Col>\n          </Row>\n          <Row className=\"mb-3\">\n            <Col>\n              <TaskTimes events={this.state.events} eventsTimestamp={this.state.eventsTimestamp} />\n            </Col>\n          </Row>\n          <Row className=\"mb-2\">\n            <Col>\n              <Button variant=\"outline-dark\" onClick={this.onClickToggleCalendar}>{this.state.calendarVisible ? 'Hide calendar' : 'Show calendar'}</Button>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Collapse in={this.state.calendarVisible}>\n                <Card>\n                  <Card.Body>\n                    <FullCalendar events={this.state.events} plugins={[timeGridPlugin, dayGridMonth, listPlugin]} initialView=\"timeGridWeek\" headerToolbar={\n                      { right: 'today prev,next dayGridMonth,timeGridWeek,timeGridDay listWeek' }\n                    } slotDuration='00:10:00' height={650} eventDidMount={function (event) {\n                      event.el.title = event.event.title;\n                    }} />\n                  </Card.Body>\n                </Card>\n              </Collapse>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import Settings from './Settings';\n\nclass DefaultSettings extends Settings {\n  constructor() {\n    super(25, 5, 10, 4, 480, true);\n  }\n}\n\nexport default DefaultSettings;","class Settings {\n    constructor(workMinutes, shortBreakMinutes, longBreakMinutes, longBreakFreq, continousWork) {\n        this._workMinutes = workMinutes;\n        this._shortBreakMinutes = shortBreakMinutes;\n        this._longBreakMinutes = longBreakMinutes;\n        this._longBreakFreq = longBreakFreq;\n        this._continousWork = continousWork;\n    }\n\n    get workMinutes() {\n        return this._workMinutes;\n    }\n\n    get shortBreakMinutes() {\n        return this._shortBreakMinutes;\n    }\n\n    get longBreakMinutes() {\n        return this._longBreakMinutes;\n    }\n\n    get longBreakFreq() {\n        return this._longBreakFreq;\n    }\n\n    get continousWork() {\n        return this._continousWork;\n    }\n}\n\nexport default Settings;","class BrowserNotifications {\n    requestPermission() {\n        return Notification.requestPermission();\n    }\n\n    createNotification(title, params) {\n        new Notification(title, params);\n    }\n}\n\nexport default BrowserNotifications;","class LocalStorage {\n    get state() {\n        return JSON.parse(localStorage.getItem('timer_state'));\n    }\n\n    set state(state) {\n        localStorage.setItem('timer_state', JSON.stringify(state));\n    }\n}\n\nexport default LocalStorage;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport DefaultSettings from './DefaultSettings';\nimport BrowserNotifications from './BrowserNotifications';\nimport LocalStorage from './LocalStorage';\n\nReactDOM.render(<App basename={ process.env.PUBLIC_URL } defaultSettings={ new DefaultSettings() } notifications={ new BrowserNotifications() } storage={ new LocalStorage() }/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}