{"version":3,"sources":["UserSettings.js","Constants.js","Timer.js","SimpleTaskManager.js","TaskTimes.js","App.js","serviceWorker.js","DefaultSettings.js","Settings.js","BrowserNotifications.js","LocalStorage.js","index.js"],"names":["UserSettings","onChangeWorkMinutes","event","props","onchange","workMinutes","target","value","onChangeShortBreakMinutes","shortBreakMinutes","onChangeLongBreakMinutes","longBreakMinutes","onChangeLongBreakFreq","longBreakFreq","Form","Row","Col","sm","Group","as","Label","column","xs","Control","type","this","onChange","Text","className","React","Component","Constants","taskName","Timer","onClickStartWorking","setStateAndStorage","isWork","timerRunning","markTimerStart","timerSeconds","Date","now","onClickReturnToWork","lastTimerSeconds","newTimerSeconds","alwaysStartFullWork","lastWorkTimerSeconds","notifyCycleChange","onClickGoOnABreak","availableBreakSeconds","Math","round","tick","secondsDiff","timerLastUpdatedAt","newState","calculateNewState","wasWork","oldTimerSeconds","timerEndAt","timerStartedAt","timerStartedWithSeconds","start","end","onTimerFinish","onClickHoldWork","handleClose","onClickResumeWork","onChangeContinousWork","continousWork","checked","onChangeAutoStartTimers","autoStartTimers","onChangeAlwaysStartFullWork","handleShow","setState","showHoldModal","interval","setInterval","state","clearInterval","getTimerMinutes","getTimerSeconds","String","padStart","floor","seconds","hoursPart","hoursLabel","minutesPart","secondsPart","trim","tempState","totalWorkedSeconds","hiddenAvailableBreakSeconds","cycle","totalCombinedTime","secondsPassed","availableBreakSecondsIncrement","stateChange","newCycle","newAvailableBreakSeconds","newIsWork","Object","assign","showNotification","Modal","show","onHide","Header","closeButton","Title","CONFIRM_HOLD_TIMER_MODAL_HEADER","Body","CONFIRM_HOLD_TIMER_MODAL_TEXT","Footer","Button","variant","onClick","CONFIRM_HOLD_TIMER_BUTTON_TEXT","ButtonGroup","HOLD_WORK_BUTTON_TEXT","RESUME_WORK_BUTTON_TEXT","START_WORKING_BUTTON_TEXT","onClickReset","RESET_BUTTON_TEXT","WORK_LABEL_TEXT","BREAK_LABEL_TEXT","GO_ON_A_BREAT_BUTTON_TEXT","OverlayTrigger","overlay","Tooltip","id","BREAK_WILL_BECOME_AVAILABLE_TEXT","disabled","style","pointerEvents","RETURN_TO_WORK_BUTTON_TEXT","formatSecondsAsText","span","offset","getFutureAdditionBreakTime","cyclesUntilLongBreak","Check","label","CONTINOUS_WORK_TEXT","START_TIMERS_AUTOMATICALLY_TEXT","ALWAYS_START_FULL_WORK_TEXT","additionalBreakTime","SimpleTaskManager","handleTextInputChange","taskInput","createButtonVisible","tasks","some","task","toUpperCase","visibleTasks","getVisibleTasks","handleSaveClick","onTaskCreate","handleTaskSelected","onTaskSelected","handleRemoveClick","window","confirm","getRemoveTaskConfirmationText","selectedTask","onTaskRemoved","prevProps","eventsTimestamp","length","searchText","filter","x","includes","Container","inline","controlId","placeholder","CREATE_TASK_PLACEHOLDER_TEXT","SAVE_NEW_TASK_BUTTON_TEXT","size","REMOVE_TASK_BUTTON_TEXT","ToggleButtonGroup","name","ToggleButton","NO_TASK_TEXT","map","TOTALS_KEY","TaskTimes","formatSeconds","hours","minutes","timesMap","calculateTimes","totalToday","totalYesterday","totalThisWeek","totalThisMonth","events","forEach","isForToday","isToday","isForYesterday","isYesterday","isForThisWeek","isThisWeek","isForThisMonth","isThisMonth","undefined","today","yesterday","week","month","len","getTime","entries","entry","todayPercentage","getPercentage","yesterdayPercentage","weekPercentage","monthPercentage","percent","isNaN","Table","responsive","charAt","App","RESET_CONFIRMATION_TEXT","getStateForReset","onClickSettings","settingsVisible","onClickToggleCalendar","calendarVisible","storage","isEqual","onChangeSettings","settings","getDefaultState","defaultSettings","defaultState","stateForReset","handleTimerStateChange","timerState","handleShowNotification","notificationTitle","notifications","notificationsGranted","notificationQueued","setTimeout","clearNotificationQueue","createNotification","handleEventCreated","eventTitle","newEvent","title","color","newEvents","slice","setEventsTimestamp","handleTaskCreated","newTasks","push","splice","indexOf","handleTaskRemoved","e","parse","requestPermission","then","result","plugins","timeGridPlugin","Helmet","defer","Collapse","in","Card","CloseButton","dayGridMonth","listPlugin","initialView","headerToolbar","right","slotDuration","height","eventDidMount","el","Boolean","location","hostname","match","DefaultSettings","_workMinutes","_shortBreakMinutes","_longBreakMinutes","_longBreakFreq","_continousWork","_defaultState","BrowserNotifications","Notification","params","LocalStorage","JSON","localStorage","getItem","setItem","stringify","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.23f7fb36.chunk.js","sourcesContent":["import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nclass UserSettings extends React.Component {\r\n    onChangeWorkMinutes = (event) => {\r\n        this.props.onchange({\r\n            workMinutes: event.target.value\r\n        });\r\n    }\r\n\r\n    onChangeShortBreakMinutes = (event) => {\r\n        this.props.onchange({\r\n            shortBreakMinutes: event.target.value\r\n        });\r\n    }\r\n\r\n    onChangeLongBreakMinutes = (event) => {\r\n        this.props.onchange({\r\n            longBreakMinutes: event.target.value\r\n        });\r\n    }\r\n\r\n    onChangeLongBreakFreq = (event) => {\r\n        this.props.onchange({\r\n            longBreakFreq: event.target.value\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Form>\r\n                <Row>\r\n                    <Col sm={6}>\r\n                        <Form.Group as={Row}>\r\n                            <Form.Label column xs={8}>Work cycle minutes</Form.Label>\r\n                            <Col xs={4}>\r\n                                <Form.Control type=\"number\" value={this.props.workMinutes} onChange={this.onChangeWorkMinutes} />\r\n                            </Col>\r\n                        </Form.Group>\r\n                    </Col>\r\n                    <Col sm={6}>\r\n                        <Form.Group as={Row}>\r\n                            <Form.Label column xs={8}>Short break minutes</Form.Label>\r\n                            <Col xs={4}>\r\n                                <Form.Control type=\"number\" value={this.props.shortBreakMinutes} onChange={this.onChangeShortBreakMinutes} />\r\n                            </Col>\r\n                        </Form.Group>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col sm={6}>\r\n                        <Form.Group as={Row}>\r\n                            <Form.Label column xs={8}>Long break minutes</Form.Label>\r\n                            <Col xs={4}>\r\n                                <Form.Control type=\"number\" value={this.props.longBreakMinutes} onChange={this.onChangeLongBreakMinutes} />\r\n                            </Col>\r\n                        </Form.Group>\r\n                    </Col>\r\n                    <Col sm={6}>\r\n                        <Form.Group as={Row}>\r\n                            <Form.Label column xs={8}>Long break after n cycles</Form.Label>\r\n                            <Col xs={4}>\r\n                                <Form.Control type=\"number\" value={this.props.longBreakFreq} onChange={this.onChangeLongBreakFreq} />\r\n                            </Col>\r\n                        </Form.Group>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Form.Text className=\"text-muted\">\r\n                            Changes are effective after timer reset.\r\n    </Form.Text>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UserSettings;","export default class Constants {\r\n    static get CREATE_TASK_PLACEHOLDER_TEXT() {\r\n        return 'Enter task name...';\r\n    }\r\n\r\n    static get SAVE_NEW_TASK_BUTTON_TEXT() {\r\n        return 'Save new task';\r\n    }\r\n\r\n    static get NO_TASK_TEXT() {\r\n        return 'No task';\r\n    }\r\n\r\n    static get GO_ON_A_BREAT_BUTTON_TEXT() {\r\n        return 'Go on a break';\r\n    }\r\n\r\n    static get RETURN_TO_WORK_BUTTON_TEXT() {\r\n        return 'Return to work';\r\n    }\r\n\r\n    static get START_WORKING_BUTTON_TEXT() {\r\n        return 'Start';\r\n    }\r\n\r\n    static get HOLD_WORK_BUTTON_TEXT() {\r\n        return 'Hold';\r\n    }\r\n\r\n    static get RESUME_WORK_BUTTON_TEXT() {\r\n        return 'Resume';\r\n    }\r\n\r\n    static get CONTINOUS_WORK_TEXT() {\r\n        return 'Continous work';\r\n    }\r\n\r\n    static get START_TIMERS_AUTOMATICALLY_TEXT() {\r\n        return 'Start new timers automatically';\r\n    }\r\n\r\n    static get RESET_CONFIRMATION_TEXT() {\r\n        return 'Do you want to reset timer values? (tasks, events, settings etc. will be kept)';\r\n    }\r\n\r\n    static get RESET_BUTTON_TEXT() {\r\n        return 'Reset';\r\n    }\r\n\r\n    static get CONFIRM_HOLD_TIMER_BUTTON_TEXT() {\r\n        return 'Yes, hold timer';\r\n    }\r\n\r\n    static get CONFIRM_HOLD_TIMER_MODAL_HEADER() {\r\n        return 'Warning!';\r\n    }\r\n\r\n    static get CONFIRM_HOLD_TIMER_MODAL_TEXT() {\r\n        return 'This option should only be used if you\\'re stopping work for a significant amount of time. It should not be used for normal mid-work breaks - instead, please wait for the \"Go on a break\" button to become available.\\n\\nAre sure you want to hold the timer anyway?';\r\n    }\r\n\r\n    static get WORK_LABEL_TEXT() {\r\n        return 'Work';\r\n    }\r\n\r\n    static get BREAK_LABEL_TEXT() {\r\n        return 'Break';\r\n    }\r\n\r\n    static get BREAK_WILL_BECOME_AVAILABLE_TEXT() {\r\n        return 'A break will be available when the current work timer finishes.';\r\n    }\r\n\r\n    static get REMOVE_TASK_BUTTON_TEXT() {\r\n        return 'Remove task';\r\n    }\r\n\r\n    static getRemoveTaskConfirmationText(taskName) {\r\n        return `Are sure you want to remove the task \"${taskName}\"?`;\r\n    }\r\n\r\n    static get ALWAYS_START_FULL_WORK_TEXT() {\r\n        return 'Always start full work timer';\r\n    }\r\n}","import React from 'react';\r\nimport Constants from './Constants';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\n\r\nclass Timer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.interval = setInterval(this.tick, 1000);\r\n        this.tick();\r\n        this.state = {\r\n            showHoldModal: false\r\n        };\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n    }\r\n\r\n    formatSecondsAsTimer() {\r\n        let minutesPart = this.getTimerMinutes();\r\n        let secondsPart = this.getTimerSeconds();\r\n        return minutesPart + ':' + secondsPart;\r\n    }\r\n\r\n    getTimerSeconds() {\r\n        return String(this.props.timerSeconds % 60).padStart(2, '0');\r\n    }\r\n\r\n    getTimerMinutes() {\r\n        return String(Math.floor(this.props.timerSeconds / 60)).padStart(2, '0');\r\n    }\r\n\r\n    formatSecondsAsText(seconds) {\r\n        seconds = Math.round(seconds);\r\n        let hoursPart = Math.floor(seconds / 3600) + '';\r\n        let hoursLabel = hoursPart === '1' ? 'hour' : 'hours';\r\n        seconds = seconds % 3600;\r\n        let minutesPart = Math.floor(seconds / 60) + '';\r\n        let minutesLabel = minutesPart === '1' ? 'minute' : 'minutes';\r\n        seconds = seconds % 60;\r\n        let secondsPart = (seconds % 60) + '';\r\n        let secondsLabel = secondsPart === '1' ? 'second' : 'seconds';\r\n        const formattedTime = ((hoursPart !== '0' ? hoursPart + ' ' + hoursLabel + ' ' : '') +\r\n          (minutesPart !== '0' ? minutesPart + ' ' + minutesLabel + ' ' : '') +\r\n          (secondsPart !== '0' ? secondsPart + ' ' + secondsLabel : '')).trim();\r\n        return formattedTime || '0 minutes';\r\n      }\r\n\r\n    onClickStartWorking = () => {\r\n        this.setStateAndStorage({\r\n            isWork: true,\r\n            timerRunning: true\r\n        });\r\n        this.markTimerStart(this.props.timerSeconds, Date.now());\r\n    }\r\n\r\n    onClickReturnToWork = () => {\r\n        const lastTimerSeconds = this.props.timerSeconds;\r\n        const newTimerSeconds = (!this.props.alwaysStartFullWork && this.props.lastWorkTimerSeconds) || this.props.workMinutes * 60;\r\n        this.setStateAndStorage({\r\n            isWork: true,\r\n            timerSeconds: newTimerSeconds\r\n        });\r\n        this.notifyCycleChange(false, lastTimerSeconds, newTimerSeconds);\r\n    }\r\n\r\n    onClickGoOnABreak = () => {\r\n        let availableBreakSeconds = Math.round(this.props.availableBreakSeconds);\r\n        const lastTimerSeconds = this.props.timerSeconds;\r\n        this.setStateAndStorage({\r\n            isWork: false,\r\n            timerSeconds: availableBreakSeconds,\r\n            availableBreakSeconds: availableBreakSeconds\r\n        });\r\n        this.notifyCycleChange(true, lastTimerSeconds, availableBreakSeconds);\r\n    }\r\n\r\n    tick = () => {\r\n        if (!this.props.timerRunning) {\r\n            this.setStateAndStorage({\r\n                timerLastUpdatedAt: Date.now()\r\n            });\r\n            return;\r\n        }\r\n\r\n        let now = Date.now();\r\n        let secondsDiff = Math.round((now - this.props.timerLastUpdatedAt) / 1000);\r\n        let newState = this.calculateNewState(secondsDiff, now);\r\n\r\n        this.setStateAndStorage(newState);\r\n    }\r\n\r\n    notifyCycleChange = (wasWork, oldTimerSeconds, newTimerSeconds) => {\r\n        const timerEndAt = this.props.timerStartedAt + (this.props.timerStartedWithSeconds - oldTimerSeconds) * 1000;\r\n        const event = {\r\n            wasWork: wasWork,\r\n            start: this.props.timerStartedAt,\r\n            end: timerEndAt\r\n        };\r\n        this.props.onTimerFinish(event);\r\n        this.markTimerStart(newTimerSeconds, timerEndAt);\r\n    }\r\n\r\n    markTimerStart = (timerSeconds, timerStartedAt) => {\r\n        const newState = {\r\n            timerStartedAt: timerStartedAt,\r\n            timerStartedWithSeconds: timerSeconds\r\n        };\r\n        this.props.setStateAndStorage(newState);\r\n    }\r\n\r\n    onClickHoldWork = () => {\r\n        this.setStateAndStorage({\r\n            timerRunning: false\r\n        });\r\n        this.notifyCycleChange(this.props.isWork, this.props.timerSeconds, this.props.timerSeconds);\r\n        this.handleClose();\r\n    }\r\n\r\n    onClickResumeWork = () => {\r\n        this.setStateAndStorage({\r\n            timerRunning: true\r\n        });\r\n        this.markTimerStart(this.props.timerSeconds, Date.now());\r\n    }\r\n\r\n    onChangeContinousWork = (event) => {\r\n        this.setStateAndStorage({\r\n            continousWork: event.target.checked\r\n        });\r\n    }\r\n\r\n    onChangeAutoStartTimers = (event) => {\r\n        this.setStateAndStorage({\r\n            autoStartTimers: event.target.checked\r\n        });\r\n    }\r\n\r\n    onChangeAlwaysStartFullWork = (event) => {\r\n        this.setStateAndStorage({\r\n            alwaysStartFullWork: event.target.checked\r\n        });\r\n    }\r\n\r\n    setStateAndStorage = (newState) => {\r\n        this.props.setStateAndStorage(newState);\r\n    }\r\n\r\n    calculateNewState(secondsDiff, now) {\r\n        this.tempState = {\r\n            isWork: this.props.isWork,\r\n            totalWorkedSeconds: this.props.totalWorkedSeconds,\r\n            lastWorkTimerSeconds: this.props.lastWorkTimerSeconds,\r\n            availableBreakSeconds: this.props.availableBreakSeconds,\r\n            hiddenAvailableBreakSeconds: this.props.hiddenAvailableBreakSeconds,\r\n            timerLastUpdatedAt: this.props.timerLastUpdatedAt,\r\n            cycle: this.props.cycle,\r\n            continousWork: this.props.continousWork,\r\n            timerSeconds: this.props.timerSeconds,\r\n            totalCombinedTime: this.props.totalCombinedTime\r\n        };\r\n\r\n        for (let secondsPassed = secondsDiff; secondsPassed > 0; secondsPassed--) {\r\n            this.tempState.timerSeconds--;\r\n            this.tempState.totalCombinedTime++;\r\n            if (this.tempState.isWork) {\r\n                this.tempState.totalWorkedSeconds++;\r\n                this.tempState.lastWorkTimerSeconds = this.tempState.timerSeconds;\r\n                let availableBreakSecondsIncrement = this.props.shortBreakMinutes * 1.0 / this.props.workMinutes;\r\n                if (this.tempState.availableBreakSeconds >= this.props.shortBreakMinutes * 60) {\r\n                    this.tempState.availableBreakSeconds += availableBreakSecondsIncrement;\r\n                } else {\r\n                    this.tempState.hiddenAvailableBreakSeconds += availableBreakSecondsIncrement;\r\n                }\r\n            } else {\r\n                this.tempState.availableBreakSeconds--;\r\n            }\r\n            this.tempState.timerLastUpdatedAt = now;\r\n            if (this.tempState.timerSeconds === 0) {\r\n                let isWork = this.tempState.isWork;\r\n                let stateChange = {};\r\n                if (isWork) {\r\n                    let newCycle = this.tempState.cycle + 1;\r\n                    let newAvailableBreakSeconds = this.tempState.availableBreakSeconds;\r\n                    if (newCycle === this.props.longBreakFreq) {\r\n                        newCycle = 0;\r\n                        newAvailableBreakSeconds += this.props.longBreakMinutes * 60 - this.props.shortBreakMinutes * 60;\r\n                    }\r\n                    newAvailableBreakSeconds += this.tempState.hiddenAvailableBreakSeconds;\r\n                    newAvailableBreakSeconds = Math.round(newAvailableBreakSeconds);\r\n\r\n                    let newTimerSeconds;\r\n                    let newIsWork;\r\n\r\n                    if (this.tempState.continousWork) {\r\n                        newTimerSeconds = this.props.workMinutes * 60;\r\n                        newIsWork = true;\r\n                    } else {\r\n                        newTimerSeconds = newAvailableBreakSeconds;\r\n                        newIsWork = false;\r\n                    }\r\n\r\n                    stateChange = {\r\n                        timerSeconds: newTimerSeconds,\r\n                        availableBreakSeconds: newAvailableBreakSeconds,\r\n                        hiddenAvailableBreakSeconds: 0,\r\n                        isWork: newIsWork,\r\n                        cycle: newCycle\r\n                    };\r\n                } else {\r\n                    stateChange = {\r\n                        timerSeconds: (!this.props.alwaysStartFullWork && this.props.lastWorkTimerSeconds) || this.props.workMinutes * 60,\r\n                        isWork: true\r\n                    };\r\n                }\r\n\r\n                stateChange.timerRunning = this.props.autoStartTimers;\r\n\r\n                const lastTimerSeconds = this.tempState.timerSeconds;\r\n                this.tempState = Object.assign(this.tempState, stateChange);\r\n\r\n                this.props.showNotification(isWork ? 'Work finished' : 'Break finished');\r\n                this.notifyCycleChange(isWork, lastTimerSeconds, this.tempState.timerSeconds);\r\n            }\r\n        }\r\n\r\n        return this.tempState;\r\n    }\r\n\r\n    get cyclesUntilLongBreak() {\r\n        return this.props.longBreakFreq - this.props.cycle;\r\n    }\r\n\r\n    handleShow = () => {\r\n        this.setState({\r\n            showHoldModal: true\r\n        });\r\n    }\r\n\r\n    handleClose = () => {\r\n        this.setState({\r\n            showHoldModal: false\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Modal show={this.state.showHoldModal} onHide={this.handleClose}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>{Constants.CONFIRM_HOLD_TIMER_MODAL_HEADER}</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>{Constants.CONFIRM_HOLD_TIMER_MODAL_TEXT}</Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={this.handleClose}>\r\n                            No\r\n                        </Button>\r\n                        <Button variant=\"primary\" onClick={this.onClickHoldWork}>\r\n                            {Constants.CONFIRM_HOLD_TIMER_BUTTON_TEXT}\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n                <Row className=\"mt-3\">\r\n                    <Col>\r\n                        <ButtonGroup>\r\n\r\n                            {this.props.timerRunning === true &&\r\n                                <Button variant=\"outline-warning\" onClick={this.handleShow}>{Constants.HOLD_WORK_BUTTON_TEXT}</Button>\r\n                            }\r\n                            {this.props.timerRunning === false &&\r\n                                <Button variant=\"secondary\" onClick={this.onClickResumeWork} data-testid=\"resume-work-btn\">{Constants.RESUME_WORK_BUTTON_TEXT}</Button>\r\n                            }\r\n                            {this.props.isWork === null &&\r\n                                <Button variant=\"success\" onClick={this.onClickStartWorking} data-testid=\"start-working-btn\">{Constants.START_WORKING_BUTTON_TEXT}</Button>\r\n                            }\r\n                            {this.props.isWork !== null &&\r\n                                <Button variant=\"outline-dark\" onClick={this.props.onClickReset} data-testid=\"reset-btn\">{Constants.RESET_BUTTON_TEXT}</Button>\r\n                            }\r\n                        </ButtonGroup>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <h3 className=\"mt-3\">{this.props.isWork === true ? Constants.WORK_LABEL_TEXT : (this.props.isWork === false ? Constants.BREAK_LABEL_TEXT : '')}</h3>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <h1 data-testid=\"timer\">{this.getTimerMinutes() + ':' + this.getTimerSeconds()}</h1>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        {this.props.isWork === true ?\r\n                            <>\r\n                                {!this.props.availableBreakSeconds ? <>\r\n                                    <OverlayTrigger overlay={<Tooltip id=\"tooltip-disabled\">{Constants.BREAK_WILL_BECOME_AVAILABLE_TEXT}</Tooltip>}>\r\n                                        <span className=\"d-inline-block\">\r\n                                            <Button disabled variant=\"success\" style={{ pointerEvents: 'none' }}>\r\n                                                {Constants.GO_ON_A_BREAT_BUTTON_TEXT}\r\n                                            </Button>\r\n                                        </span>\r\n                                    </OverlayTrigger>\r\n                                </> : <>\r\n                                    <Button variant=\"success\" onClick={this.onClickGoOnABreak}>{Constants.GO_ON_A_BREAT_BUTTON_TEXT}</Button>\r\n                                </>}\r\n                            </> : null\r\n                        }\r\n                        {this.props.isWork === false ?\r\n                            <>\r\n                                <Button variant=\"secondary\" onClick={this.onClickReturnToWork}>{Constants.RETURN_TO_WORK_BUTTON_TEXT}</Button>\r\n                            </> : null\r\n                        }\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col sm={6} className=\"font-weight-light text-md-right\">\r\n                        Total time worked:\r\n                    </Col>\r\n                    <Col sm={6} className=\"text-md-left\" data-testid=\"totalWorkedTime\">\r\n                        {this.formatSecondsAsText(this.props.totalWorkedSeconds)}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col sm={6} className=\"font-weight-light text-md-right\">\r\n                        Available break time:\r\n                    </Col>\r\n                    <Col sm={6} className=\"text-md-left\" data-testid=\"availableBreakTime\">\r\n                        {this.formatSecondsAsText(this.props.availableBreakSeconds)}\r\n                    </Col>\r\n                </Row>\r\n                {this.props.isWork && this.props.availableBreakSeconds < this.props.shortBreakMinutes * 60 &&\r\n                    <Row>\r\n                        <Col xs={12} sm={{ span: 6, offset: 6 }} className=\"text-md-left text-muted font-weight-light small\">\r\n                            + <span data-testid=\"futureAdditionBreakTime\">{this.getFutureAdditionBreakTime()}</span> after work timer finishes\r\n                        </Col>\r\n                    </Row>\r\n                }\r\n                <Row>\r\n                    <Col sm={6} className=\"font-weight-light text-md-right\">\r\n                        Cycles until long break ({this.props.longBreakMinutes} minutes):\r\n                    </Col>\r\n                    <Col sm={6} className=\"text-md-left\" data-testid=\"longBreakInfo\">\r\n                        {this.cyclesUntilLongBreak}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col sm={6} className=\"font-weight-light text-md-right\">\r\n                        Total time (work + break):\r\n                    </Col>\r\n                    <Col sm={6} className=\"text-md-left\" data-testid=\"totalCombinedTime\">\r\n                        {this.formatSecondsAsText(this.props.totalCombinedTime)}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Form.Check\r\n                            type=\"checkbox\"\r\n                            label={Constants.CONTINOUS_WORK_TEXT}\r\n                            checked={this.props.continousWork}\r\n                            id=\"cont-work-check\"\r\n                            data-testid=\"cont-work\"\r\n                            onChange={this.onChangeContinousWork}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Form.Check\r\n                            type=\"checkbox\"\r\n                            label={Constants.START_TIMERS_AUTOMATICALLY_TEXT}\r\n                            checked={this.props.autoStartTimers}\r\n                            id=\"auto-start-timers-check\"\r\n                            data-testid=\"auto-start-timers\"\r\n                            onChange={this.onChangeAutoStartTimers}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Form.Check\r\n                            type=\"checkbox\"\r\n                            label={Constants.ALWAYS_START_FULL_WORK_TEXT}\r\n                            checked={this.props.alwaysStartFullWork}\r\n                            id=\"full-work-check\"\r\n                            data-testid=\"full-work\"\r\n                            onChange={this.onChangeAlwaysStartFullWork}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </>\r\n        );\r\n    }\r\n\r\n    getFutureAdditionBreakTime() {\r\n        let additionalBreakTime = Math.round(this.props.hiddenAvailableBreakSeconds + this.props.timerSeconds * 1.0 / (this.props.workMinutes * 60.0) * this.props.shortBreakMinutes * 60);\r\n        if (this.props.cycle === this.props.longBreakFreq - 1) {\r\n            additionalBreakTime += (this.props.longBreakMinutes - this.props.shortBreakMinutes) * 60;\r\n        }\r\n        return this.formatSecondsAsText(additionalBreakTime);\r\n    }\r\n}\r\n\r\nexport default Timer;","import React from 'react';\r\nimport Constants from './Constants';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\r\nimport ToggleButton from 'react-bootstrap/ToggleButton';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nclass SimpleTaskManager extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      taskInput: '',\r\n      selectedTask: props.selectedTask || '',\r\n      visibleTasks: props.tasks,\r\n      createButtonVisible: false\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.eventsTimestamp !== prevProps.eventsTimestamp || this.props.selectedTask !== prevProps.selectedTask || !!this.props.tasks !== !!prevProps.tasks || (this.props.tasks && prevProps.tasks && this.props.tasks.length !== prevProps.tasks.length)) {\r\n      this.setState({\r\n        selectedTask: this.props.selectedTask || '',\r\n        visibleTasks: this.getVisibleTasks(this.state.taskInput)\r\n      });\r\n    }\r\n  }\r\n\r\n  handleTextInputChange = (event) => {\r\n    const value = event.target.value;\r\n    this.setState({\r\n      taskInput: value,\r\n      createButtonVisible: value && value.trim() !== '' && (!this.props.tasks || !this.props.tasks.some(task => task.toUpperCase() === value.toUpperCase())),\r\n      visibleTasks: this.getVisibleTasks(value)\r\n    });\r\n  }\r\n\r\n  handleSaveClick = () => {\r\n    this.props.onTaskCreate(this.state.taskInput.trim());\r\n    this.setState({\r\n      taskInput: '',\r\n      visibleTasks: this.getVisibleTasks(''),\r\n      createButtonVisible: false\r\n    });\r\n  }\r\n\r\n  handleTaskSelected = (value) => {\r\n    if (value === \"\") {\r\n      value = null;\r\n    }\r\n    this.props.onTaskSelected(value);\r\n  }\r\n\r\n  getVisibleTasks(searchText) {\r\n    return this.props.tasks ? this.props.tasks.filter(x => x.toUpperCase().includes(searchText.toUpperCase())) : [];\r\n  }\r\n\r\n  handleRemoveClick = () => {\r\n    if (window.confirm(Constants.getRemoveTaskConfirmationText(this.state.selectedTask))) {\r\n      this.props.onTaskRemoved(this.state.selectedTask);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <Row>\r\n          <Col xs={9}>\r\n            <Form inline className=\"mb-2\">\r\n              <Form.Group controlId=\"taskInput\" className=\"mr-1\">\r\n                <Form.Control type=\"text\" onChange={this.handleTextInputChange} placeholder={Constants.CREATE_TASK_PLACEHOLDER_TEXT} value={this.state.taskInput}></Form.Control>\r\n              </Form.Group>\r\n              {(this.state.createButtonVisible ?\r\n                <Button type=\"primary\" onClick={this.handleSaveClick}>\r\n                  {Constants.SAVE_NEW_TASK_BUTTON_TEXT} \"{this.state.taskInput}\"\r\n              </Button>\r\n                : null)}\r\n            </Form>\r\n          </Col>\r\n          {this.state.selectedTask &&\r\n            <Col xs={2}>\r\n              <Button variant=\"outline-danger\" size=\"sm\" onClick={this.handleRemoveClick} className=\"mr-1\">{Constants.REMOVE_TASK_BUTTON_TEXT}</Button>\r\n            </Col>\r\n          }\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <ToggleButtonGroup type=\"radio\" name=\"tasks\" style={{ 'flexWrap': 'wrap' }} className=\"float-left\" value={this.state.selectedTask} onChange={this.handleTaskSelected}>\r\n              <ToggleButton id=\"radio-null\" value=\"\">\r\n                {Constants.NO_TASK_TEXT}\r\n              </ToggleButton>\r\n              {this.state && this.state.visibleTasks && this.state.visibleTasks.map(\r\n                task => {\r\n                  return (\r\n                    <ToggleButton id={'radio-' + task} value={task} data-testid={'button-' + task} key={task}>\r\n                      {task}\r\n                    </ToggleButton>\r\n                  )\r\n                }\r\n              )}\r\n            </ToggleButtonGroup>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SimpleTaskManager;","import React from 'react';\r\nimport { isToday, isYesterday, isThisWeek, isThisMonth } from 'date-fns';\r\nimport Constants from './Constants';\r\nimport Table from 'react-bootstrap/Table';\r\n\r\nconst TOTALS_KEY = '@@@TOTALS';\r\n\r\nclass TaskTimes extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            timesMap: this.calculateTimes()\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.eventsTimestamp !== prevProps.eventsTimestamp) {\r\n            this.setState({\r\n                timesMap: this.calculateTimes()\r\n            });\r\n        }\r\n    }\r\n\r\n    formatSeconds = (seconds) => {\r\n        seconds /= 1000;\r\n        let hours = Math.floor(seconds / 3600);\r\n        let minutes = Math.floor((seconds % 3600) / 60);\r\n        return `${hours}h${minutes}m`;\r\n    }\r\n\r\n    calculateTimes() {\r\n        const timesMap = {};\r\n        let totalToday = 0, totalYesterday = 0, totalThisWeek = 0, totalThisMonth = 0;\r\n        this.props.events.forEach(event => {\r\n            if (!event.isWork) {\r\n                return;\r\n            }\r\n            let isForToday = isToday(event.start);;\r\n            let isForYesterday = isYesterday(event.start);\r\n            let isForThisWeek = isThisWeek(event.start);\r\n            let isForThisMonth = isThisMonth(event.start);\r\n            if (!isForToday && !isForYesterday && !isForThisWeek && !isForThisMonth) {\r\n                return;\r\n            }\r\n            let taskName = event.task;\r\n            if (taskName === null || taskName === undefined || taskName === '' || taskName === 'null') {\r\n                taskName = Constants.NO_TASK_TEXT;\r\n            }\r\n            if (!(taskName in timesMap)) {\r\n                timesMap[taskName] = {\r\n                    today: 0,\r\n                    yesterday: 0,\r\n                    week: 0,\r\n                    month: 0\r\n                };\r\n            }\r\n            if (event.end !== undefined) {\r\n                let len = event.end.getTime() - event.start.getTime();\r\n                if (isForToday) {\r\n                    timesMap[taskName].today += len;\r\n                    totalToday += len;\r\n                } else if (isForYesterday) {\r\n                    timesMap[taskName].yesterday += len;\r\n                    totalYesterday += len;\r\n                }\r\n                if (isForThisWeek) {\r\n                    timesMap[taskName].week += len;\r\n                    totalThisWeek += len;\r\n                }\r\n                if (isForThisMonth) {\r\n                    timesMap[taskName].month += len;\r\n                    totalThisMonth += len;\r\n                }\r\n            }\r\n        });\r\n        Object.entries(timesMap).forEach((entry) => {\r\n            entry[1].todayPercentage = this.getPercentage(entry[1].today, totalToday);\r\n            entry[1].yesterdayPercentage = this.getPercentage(entry[1].yesterday, totalYesterday);\r\n            entry[1].weekPercentage = this.getPercentage(entry[1].week, totalThisWeek);\r\n            entry[1].monthPercentage = this.getPercentage(entry[1].month, totalThisMonth);\r\n        });\r\n        timesMap[TOTALS_KEY] = {\r\n            today: totalToday,\r\n            yesterday: totalYesterday,\r\n            week: totalThisWeek,\r\n            month: totalThisMonth\r\n        }\r\n        return timesMap;\r\n    }\r\n\r\n    getPercentage(today, totalToday) {\r\n        const percent = Math.round(today / totalToday * 100);\r\n        return !isNaN(percent) ? percent + '%' : '-';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Table size=\"sm\" responsive>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Task</th>\r\n                        <th>Today</th>\r\n                        <th>%</th>\r\n                        <th>Yesterday</th>\r\n                        <th>%</th>\r\n                        <th>Week</th>\r\n                        <th>%</th>\r\n                        <th>Month</th>\r\n                        <th>%</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {Object.entries(this.state.timesMap).filter(entry => entry[0] !== TOTALS_KEY).map(entry => (\r\n                        <tr key={entry[0]}>\r\n                            <td>{entry[0]}</td>\r\n                            <td data-testid={'today-' + entry[0].charAt(0) + entry[0].length}>{this.formatSeconds(entry[1].today)}</td>\r\n                            <td data-testid={'todayp-' + entry[0].charAt(0) + entry[0].length}>{entry[1].todayPercentage}</td>\r\n                            <td data-testid={'yesterday-' + entry[0].charAt(0) + entry[0].length}>{this.formatSeconds(entry[1].yesterday)}</td>\r\n                            <td data-testid={'yesterdayp-' + entry[0].charAt(0) + entry[0].length}>{entry[1].yesterdayPercentage}</td>\r\n                            <td data-testid={'week-' + entry[0].charAt(0) + entry[0].length}>{this.formatSeconds(entry[1].week)}</td>\r\n                            <td data-testid={'weekp-' + entry[0].charAt(0) + entry[0].length}>{entry[1].weekPercentage}</td>\r\n                            <td data-testid={'month-' + entry[0].charAt(0) + entry[0].length}>{this.formatSeconds(entry[1].month)}</td>\r\n                            <td data-testid={'monthp-' + entry[0].charAt(0) + entry[0].length}>{entry[1].monthPercentage}</td>\r\n                        </tr>\r\n                    ))}\r\n                    <tr>\r\n                        <td>Total</td>\r\n                        <td data-testid={'today-total'}>{this.formatSeconds(this.state.timesMap[TOTALS_KEY].today)}</td>\r\n                        <td data-testid={'todayp-total'}>100%</td>\r\n                        <td data-testid={'yesterday-total'}>{this.formatSeconds(this.state.timesMap[TOTALS_KEY].yesterday)}</td>\r\n                        <td data-testid={'yesterdayp-total'}>100%</td>\r\n                        <td data-testid={'week-total'}>{this.formatSeconds(this.state.timesMap[TOTALS_KEY].week)}</td>\r\n                        <td data-testid={'weekp-total'}>100%</td>\r\n                        <td data-testid={'month-total'}>{this.formatSeconds(this.state.timesMap[TOTALS_KEY].month)}</td>\r\n                        <td data-testid={'monthp-total'}>100%</td>\r\n                    </tr>\r\n                </tbody>\r\n            </Table>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TaskTimes;","import React from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport './App.css';\r\nimport UserSettings from './UserSettings';\r\nimport Timer from './Timer';\r\nimport FullCalendar from '@fullcalendar/react';\r\nimport timeGridPlugin from '@fullcalendar/timegrid';\r\nimport dayGridMonth from '@fullcalendar/daygrid';\r\nimport listPlugin from '@fullcalendar/list';\r\nimport SimpleTaskManager from './SimpleTaskManager';\r\nimport TaskTimes from './TaskTimes';\r\nimport Constants from './Constants';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Collapse from 'react-bootstrap/Collapse';\r\nimport CloseButton from 'react-bootstrap/CloseButton';\r\nimport isEqual from 'lodash/isEqual';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.defaultSettings = props.defaultSettings;\r\n    this.storage = props.storage;\r\n    this.state = this.getDefaultState();\r\n    if (this.storage && this.storage.state) {\r\n      this.state = Object.assign(this.state, this.storage.state);\r\n      this.state.events.forEach(e => {\r\n        e.start = new Date(Date.parse(e.start));\r\n        e.end = new Date(Date.parse(e.end));\r\n      });\r\n    }\r\n    if (props.notifications) {\r\n      this.notifications = props.notifications;\r\n      this.notifications.requestPermission().then((result) => {\r\n        if (result === 'granted') {\r\n          this.notificationsGranted = true;\r\n        }\r\n      });\r\n    }\r\n    this.plugins = [timeGridPlugin];\r\n  }\r\n\r\n  onClickReset = () => {\r\n    if (window.confirm(Constants.RESET_CONFIRMATION_TEXT)) {\r\n      this.setStateAndStorage(this.getStateForReset());\r\n    }\r\n  }\r\n\r\n  onClickSettings = () => {\r\n    this.setState({\r\n      settingsVisible: !this.state.settingsVisible\r\n    });\r\n  }\r\n\r\n  onClickToggleCalendar = () => {\r\n    this.setState({\r\n      calendarVisible: !this.state.calendarVisible\r\n    });\r\n  }\r\n\r\n  setStateAndStorage = (state) => {\r\n    this.setState(state);\r\n    if (this.storage && !isEqual(this.storage.state, state)) {\r\n      this.storage.state = Object.assign(this.state, state);\r\n    }\r\n  }\r\n\r\n  onChangeSettings = (settings) => {\r\n    this.setStateAndStorage(settings);\r\n  }\r\n\r\n  getDefaultState = () => {\r\n    return Object.assign({}, this.defaultSettings.defaultState);\r\n  }\r\n\r\n  getStateForReset = () => {\r\n    const stateForReset = this.getDefaultState();\r\n    stateForReset.continousWork = this.state.continousWork;\r\n    stateForReset.autoStartTimers = this.state.autoStartTimers;\r\n    stateForReset.workMinutes = this.state.workMinutes;\r\n    stateForReset.shortBreakMinutes = this.state.shortBreakMinutes;\r\n    stateForReset.longBreakMinutes = this.state.longBreakMinutes;\r\n    stateForReset.longBreakFreq = this.state.longBreakFreq;\r\n    stateForReset.timerSeconds = this.state.workMinutes * 60;\r\n    stateForReset.events = this.state.events;\r\n    stateForReset.tasks = this.state.tasks;\r\n    return stateForReset;\r\n  }\r\n\r\n  handleTimerStateChange = (timerState) => {\r\n    this.setStateAndStorage(timerState);\r\n  }\r\n\r\n  handleShowNotification = (notificationTitle) => {\r\n    if (this.notifications && this.notificationsGranted) {\r\n      if (!this.notificationQueued) {\r\n        // makes sure that notifications are sent not more frequently than 10 seconds apart\r\n        this.notificationQueued = true;\r\n        setTimeout(this.clearNotificationQueue, 10000);\r\n        this.notifications.createNotification(notificationTitle);\r\n      }\r\n    }\r\n  }\r\n\r\n  clearNotificationQueue = () => {\r\n    this.notificationQueued = null;\r\n  }\r\n\r\n  handleEventCreated = (event) => {\r\n    let eventTitle = event.wasWork ? 'Work' : 'Break';\r\n    if (this.state.selectedTask && event.wasWork) {\r\n      eventTitle += ' (' + this.state.selectedTask + ')';\r\n    }\r\n    const newEvent = {\r\n      title: eventTitle,\r\n      isWork: event.wasWork,\r\n      start: new Date(event.start),\r\n      end: new Date(event.end),\r\n      color: event.wasWork ? '#3788d8' : 'orange',\r\n      task: this.state.selectedTask\r\n    };\r\n    if (newEvent.start.getTime() === newEvent.end.getTime()) {\r\n      return;\r\n    }\r\n    let newEvents = [...this.state.events, newEvent];\r\n    if (newEvents.length > 1 && newEvents[newEvents.length - 1].isWork === newEvents[newEvents.length - 2].isWork\r\n      && newEvents[newEvents.length - 2].end.getTime() === newEvents[newEvents.length - 1].start.getTime()\r\n      && newEvents[newEvents.length - 1].task === newEvents[newEvents.length - 2].task) {\r\n      newEvents = newEvents.slice(0, newEvents.length - 1);\r\n      newEvents[newEvents.length - 1].end = new Date(event.end);\r\n    }\r\n    this.setStateAndStorage({\r\n      events: newEvents\r\n    });\r\n    this.setEventsTimestamp();\r\n  }\r\n\r\n  handleTaskCreated = (task) => {\r\n    let newTasks = this.state.tasks;\r\n    newTasks.push(task);\r\n    this.setStateAndStorage({\r\n      tasks: newTasks\r\n    });\r\n    this.setEventsTimestamp();\r\n  }\r\n\r\n  handleTaskSelected = (task) => {\r\n    const end = this.state.timerStartedAt + (this.state.timerStartedWithSeconds - this.state.timerSeconds) * 1000;\r\n    this.handleEventCreated({\r\n      wasWork: this.state.isWork,\r\n      start: this.state.timerStartedAt,\r\n      end: end\r\n    });\r\n\r\n    let newTasks = this.state.tasks;\r\n    if (task) {\r\n      newTasks.splice(this.state.tasks.indexOf(task), 1);\r\n      newTasks.splice(0, 0, task);\r\n    }\r\n\r\n    this.setStateAndStorage({\r\n      timerStartedAt: end,\r\n      timerStartedWithSeconds: this.state.timerSeconds,\r\n      selectedTask: task,\r\n      tasks: newTasks\r\n    });\r\n  }\r\n\r\n  handleTaskRemoved = (task) => {\r\n    let newTasks = this.state.tasks;\r\n    newTasks.splice(newTasks.indexOf(task), 1);\r\n    let newEvents = this.state.events.filter(e => e.task !== task);\r\n    this.setState({\r\n      tasks: newTasks,\r\n      events: newEvents,\r\n      eventsTimestamp: Date.now(),\r\n      selectedTask: this.state.selectedTask === task ? null : this.state.selectedTask\r\n    });\r\n  }\r\n\r\n  setEventsTimestamp = () => {\r\n    this.setState({\r\n      eventsTimestamp: Date.now()\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Helmet defer={false}>\r\n          <title>{String(Math.floor(this.state.timerSeconds / 60)).padStart(2, '0') + ':' + String(this.state.timerSeconds % 60).padStart(2, '0')} {this.state.isWork === true ? \"Work\" : ( this.state.isWork === false ? \"Break\" : \"\" )}{this.state.isWork && this.state.selectedTask ? ' (' + this.state.selectedTask + ')' : ''}</title>\r\n        </Helmet>\r\n        <Container>\r\n          <Timer timerSeconds={this.state.timerSeconds}\r\n            lastWorkTimerSeconds={this.state.lastWorkTimerSeconds}\r\n            totalWorkedSeconds={this.state.totalWorkedSeconds}\r\n            isWork={this.state.isWork}\r\n            availableBreakSeconds={this.state.availableBreakSeconds}\r\n            hiddenAvailableBreakSeconds={this.state.hiddenAvailableBreakSeconds}\r\n            totalCombinedTime={this.state.totalCombinedTime}\r\n            cycle={this.state.cycle}\r\n            timerRunning={this.state.timerRunning}\r\n            continousWork={this.state.continousWork}\r\n            timerLastUpdatedAt={this.state.timerLastUpdatedAt}\r\n            autoStartTimers={this.state.autoStartTimers}\r\n            alwaysStartFullWork={this.state.alwaysStartFullWork}\r\n            workMinutes={this.state.workMinutes}\r\n            shortBreakMinutes={this.state.shortBreakMinutes}\r\n            longBreakMinutes={this.state.longBreakMinutes}\r\n            longBreakFreq={this.state.longBreakFreq}\r\n            timerStartedAt={this.state.timerStartedAt}\r\n            timerStartedWithSeconds={this.state.timerStartedWithSeconds}\r\n            setStateAndStorage={this.handleTimerStateChange}\r\n            showNotification={this.handleShowNotification}\r\n            onTimerFinish={this.handleEventCreated}\r\n            onClickReset={this.onClickReset} />\r\n          <Row className=\"mt-2 mb-2\">\r\n            <Col>\r\n              <Button variant=\"outline-dark\" onClick={this.onClickSettings}>Settings</Button>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"mb-3\">\r\n            <Col>\r\n              <Collapse in={this.state.settingsVisible}>\r\n                <div>\r\n                  <Card>\r\n                    <Card.Header>\r\n                      <CloseButton onClick={this.onClickSettings} />\r\n                    </Card.Header>\r\n                    <Card.Body>\r\n                      <UserSettings\r\n                        workMinutes={this.state.workMinutes} shortBreakMinutes={this.state.shortBreakMinutes}\r\n                        longBreakMinutes={this.state.longBreakMinutes} longBreakFreq={this.state.longBreakFreq}\r\n                        onchange={this.onChangeSettings} />\r\n                    </Card.Body>\r\n                  </Card>\r\n                </div>\r\n              </Collapse>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"mb-3\">\r\n            <Col>\r\n              <SimpleTaskManager \r\n                onTaskCreate={this.handleTaskCreated} \r\n                onTaskSelected={this.handleTaskSelected} \r\n                tasks={this.state.tasks} \r\n                selectedTask={this.state.selectedTask} \r\n                onTaskRemoved={this.handleTaskRemoved}\r\n                eventsTimestamp={this.state.eventsTimestamp}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"mb-3\">\r\n            <Col>\r\n              <TaskTimes events={this.state.events} eventsTimestamp={this.state.eventsTimestamp} />\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"mb-2\">\r\n            <Col>\r\n              <Button variant=\"outline-dark\" onClick={this.onClickToggleCalendar}>{this.state.calendarVisible ? 'Hide calendar' : 'Show calendar'}</Button>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Collapse in={this.state.calendarVisible}>\r\n                <Card>\r\n                  <Card.Body>\r\n                    <FullCalendar events={this.state.events} plugins={[timeGridPlugin, dayGridMonth, listPlugin]} initialView=\"timeGridWeek\" headerToolbar={\r\n                      { right: 'today prev,next dayGridMonth,timeGridWeek,timeGridDay listWeek' }\r\n                    } slotDuration='00:10:00' height={650} eventDidMount={function (event) {\r\n                      event.el.title = event.event.title;\r\n                    }} />\r\n                  </Card.Body>\r\n                </Card>\r\n              </Collapse>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import Settings from \"./Settings\";\r\n\r\nclass DefaultSettings extends Settings {\r\n  constructor() {\r\n    const workMinutes = 25;\r\n    const shortBreakMinutes = 5;\r\n    const longBreakMinutes = 10;\r\n    const longBreakFreq = 4;\r\n    const continousWork = true;\r\n\r\n    super(\r\n      workMinutes,\r\n      shortBreakMinutes,\r\n      longBreakMinutes,\r\n      longBreakFreq,\r\n      continousWork,\r\n      {\r\n        timerSeconds: workMinutes * 60,\r\n        lastWorkTimerSeconds: workMinutes * 60,\r\n        totalWorkedSeconds: 0,\r\n        isWork: null,\r\n        availableBreakSeconds: 0,\r\n        hiddenAvailableBreakSeconds: 0,\r\n        totalCombinedTime: 0,\r\n        cycle: 0,\r\n        notificationsGranted: false,\r\n        timerRunning: null,\r\n        continousWork: continousWork,\r\n        timerLastUpdatedAt: Date.now(),\r\n        autoStartTimers: true,\r\n        alwaysStartFullWork: true,\r\n        workMinutes: workMinutes,\r\n        shortBreakMinutes: shortBreakMinutes,\r\n        longBreakMinutes: longBreakMinutes,\r\n        longBreakFreq: longBreakFreq,\r\n        settingsVisible: false,\r\n        calendarVisible: false,\r\n        events: [],\r\n        timerStartedAt: null,\r\n        timerStartedWithSeconds: null,\r\n        tasks: [],\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nexport default DefaultSettings;\r\n","class Settings {\r\n    constructor(workMinutes, shortBreakMinutes, longBreakMinutes, longBreakFreq, continousWork, defaultState) {\r\n        this._workMinutes = workMinutes;\r\n        this._shortBreakMinutes = shortBreakMinutes;\r\n        this._longBreakMinutes = longBreakMinutes;\r\n        this._longBreakFreq = longBreakFreq;\r\n        this._continousWork = continousWork;\r\n        this._defaultState = defaultState;\r\n    }\r\n\r\n    get workMinutes() {\r\n        return this._workMinutes;\r\n    }\r\n\r\n    get shortBreakMinutes() {\r\n        return this._shortBreakMinutes;\r\n    }\r\n\r\n    get longBreakMinutes() {\r\n        return this._longBreakMinutes;\r\n    }\r\n\r\n    get longBreakFreq() {\r\n        return this._longBreakFreq;\r\n    }\r\n\r\n    get continousWork() {\r\n        return this._continousWork;\r\n    }\r\n\r\n    get defaultState() {\r\n        return this._defaultState;\r\n    }\r\n}\r\n\r\nexport default Settings;","class BrowserNotifications {\r\n    requestPermission() {\r\n        return Notification.requestPermission();\r\n    }\r\n\r\n    createNotification(title, params) {\r\n        new Notification(title, params);\r\n    }\r\n}\r\n\r\nexport default BrowserNotifications;","class LocalStorage {\r\n    get state() {\r\n        return JSON.parse(localStorage.getItem('timer_state'));\r\n    }\r\n\r\n    set state(state) {\r\n        localStorage.setItem('timer_state', JSON.stringify(state));\r\n    }\r\n}\r\n\r\nexport default LocalStorage;","import './custom.scss';\r\nimport '@fontsource/signika';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport DefaultSettings from './DefaultSettings';\r\nimport BrowserNotifications from './BrowserNotifications';\r\nimport LocalStorage from './LocalStorage';\r\n\r\nReactDOM.render(<App basename={ process.env.PUBLIC_URL } defaultSettings={ new DefaultSettings() } notifications={ new BrowserNotifications() } storage={ new LocalStorage() }/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}